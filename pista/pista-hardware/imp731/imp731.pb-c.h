/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: model/imp731.proto */

#ifndef PROTOBUF_C_model_2fimp731_2eproto__INCLUDED
#define PROTOBUF_C_model_2fimp731_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003000 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _Imp731__Ident Imp731__Ident;
typedef struct _Imp731__Status Imp731__Status;
typedef struct _Imp731__Breath Imp731__Breath;
typedef struct _Imp731__Sensors Imp731__Sensors;


/* --- enums --- */


/* --- messages --- */

struct  _Imp731__Ident
{
  ProtobufCMessage base;
  /*
   *[9];
   */
  char *model;
  /*
   * [10];
   */
  char *serial_no;
  /*
   * [18];
   */
  ProtobufCBinaryData cpu_id;
  /*
   * [18];
   */
  ProtobufCBinaryData adapter_id;
  /*
   * [18];
   */
  char *pim_id;
  /*
   * [9];
   */
  char *spm_model;
  /*
   * [10];
   */
  char *spm_serial;
  /*
   * [18];
   */
  char *silent_mode;
  /*
   * ;
   */
  int32_t contrast;
  /*
   * [9];
   */
  char *emv_version;
};
#define IMP731__IDENT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&imp731__ident__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, {0,NULL}, {0,NULL}, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0, (char *)protobuf_c_empty_string }


struct  _Imp731__Status
{
  ProtobufCMessage base;
  int32_t tv;
  int32_t i_ie;
  int32_t e_ie;
  int32_t peep;
  int32_t phi;
  int32_t plow;
  int32_t br;
  int32_t fio2;
  int32_t trigger;
  int32_t nonop_alarm;
  int32_t op_alarm;
  int32_t advisory_alarm;
  int32_t s_source;
  int32_t s_type;
  int32_t pga_temp;
  int32_t p_o2_tank;
  int32_t p_ambient;
  int32_t p_mode;
  int32_t mode;
  int32_t ie_ratio;
  int32_t bpm_high;
  int32_t bpm_low;
  int32_t tv_high;
  int32_t tv_low;
  int32_t p_support;
  int32_t p_target;
  int32_t rise_tm;
  int32_t max_insp_tm;
  int32_t pct_peak_flow;
};
#define IMP731__STATUS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&imp731__status__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }


struct  _Imp731__Breath
{
  ProtobufCMessage base;
  int32_t tv;
  int32_t i_ie;
  int32_t e_ie;
  int32_t peep;
  int32_t pip;
  int32_t bpm;
  int32_t mv;
  int32_t rpm;
  int32_t pend;
  int32_t pmean;
  int32_t ppeak;
  int32_t mgmpo2;
  int32_t mgmpo2min;
  int32_t mgmpo2flow;
  int32_t mgmcompflow;
  int32_t leak;
  int32_t airway_baseline;
  int32_t failed_autocal;
  int32_t failed_cycles;
  int32_t baseline_noise;
  int32_t pga_paw_offset;
  int32_t pga_o2_offset;
  int32_t pga_flow_offset;
  int32_t o2_mv;
  int32_t plat;
};
#define IMP731__BREATH__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&imp731__breath__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }


struct  _Imp731__Sensors
{
  ProtobufCMessage base;
  size_t n_w0;
  int32_t *w0;
  size_t n_w1;
  int32_t *w1;
  size_t n_w2;
  int32_t *w2;
  size_t n_w3;
  int32_t *w3;
};
#define IMP731__SENSORS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&imp731__sensors__descriptor) \
    , 0,NULL, 0,NULL, 0,NULL, 0,NULL }


/* Imp731__Ident methods */
void   imp731__ident__init
                     (Imp731__Ident         *message);
size_t imp731__ident__get_packed_size
                     (const Imp731__Ident   *message);
size_t imp731__ident__pack
                     (const Imp731__Ident   *message,
                      uint8_t             *out);
size_t imp731__ident__pack_to_buffer
                     (const Imp731__Ident   *message,
                      ProtobufCBuffer     *buffer);
Imp731__Ident *
       imp731__ident__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   imp731__ident__free_unpacked
                     (Imp731__Ident *message,
                      ProtobufCAllocator *allocator);
/* Imp731__Status methods */
void   imp731__status__init
                     (Imp731__Status         *message);
size_t imp731__status__get_packed_size
                     (const Imp731__Status   *message);
size_t imp731__status__pack
                     (const Imp731__Status   *message,
                      uint8_t             *out);
size_t imp731__status__pack_to_buffer
                     (const Imp731__Status   *message,
                      ProtobufCBuffer     *buffer);
Imp731__Status *
       imp731__status__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   imp731__status__free_unpacked
                     (Imp731__Status *message,
                      ProtobufCAllocator *allocator);
/* Imp731__Breath methods */
void   imp731__breath__init
                     (Imp731__Breath         *message);
size_t imp731__breath__get_packed_size
                     (const Imp731__Breath   *message);
size_t imp731__breath__pack
                     (const Imp731__Breath   *message,
                      uint8_t             *out);
size_t imp731__breath__pack_to_buffer
                     (const Imp731__Breath   *message,
                      ProtobufCBuffer     *buffer);
Imp731__Breath *
       imp731__breath__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   imp731__breath__free_unpacked
                     (Imp731__Breath *message,
                      ProtobufCAllocator *allocator);
/* Imp731__Sensors methods */
void   imp731__sensors__init
                     (Imp731__Sensors         *message);
size_t imp731__sensors__get_packed_size
                     (const Imp731__Sensors   *message);
size_t imp731__sensors__pack
                     (const Imp731__Sensors   *message,
                      uint8_t             *out);
size_t imp731__sensors__pack_to_buffer
                     (const Imp731__Sensors   *message,
                      ProtobufCBuffer     *buffer);
Imp731__Sensors *
       imp731__sensors__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   imp731__sensors__free_unpacked
                     (Imp731__Sensors *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Imp731__Ident_Closure)
                 (const Imp731__Ident *message,
                  void *closure_data);
typedef void (*Imp731__Status_Closure)
                 (const Imp731__Status *message,
                  void *closure_data);
typedef void (*Imp731__Breath_Closure)
                 (const Imp731__Breath *message,
                  void *closure_data);
typedef void (*Imp731__Sensors_Closure)
                 (const Imp731__Sensors *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor imp731__ident__descriptor;
extern const ProtobufCMessageDescriptor imp731__status__descriptor;
extern const ProtobufCMessageDescriptor imp731__breath__descriptor;
extern const ProtobufCMessageDescriptor imp731__sensors__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_model_2fimp731_2eproto__INCLUDED */
