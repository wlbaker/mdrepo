/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: model/ht70.proto */

#ifndef PROTOBUF_C_model_2fht70_2eproto__INCLUDED
#define PROTOBUF_C_model_2fht70_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003000 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _Ht70__Ident Ht70__Ident;
typedef struct _Ht70__Status Ht70__Status;
typedef struct _Ht70__Breath Ht70__Breath;
typedef struct _Ht70__Alarms Ht70__Alarms;
typedef struct _Ht70__Sensors Ht70__Sensors;


/* --- enums --- */


/* --- messages --- */

struct  _Ht70__Ident
{
  ProtobufCMessage base;
  /*
   *[9];
   */
  char *model;
  /*
   * [10];
   */
  char *serial_no;
  /*
   * [18];
   */
  ProtobufCBinaryData cpu_id;
  /*
   * [18];
   */
  ProtobufCBinaryData adapter_id;
  /*
   * [18];
   */
  char *pim_id;
  /*
   * [9];
   */
  char *spm_model;
  /*
   * [10];
   */
  char *spm_serial;
};
#define HT70__IDENT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ht70__ident__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, {0,NULL}, {0,NULL}, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


struct  _Ht70__Status
{
  ProtobufCMessage base;
  int32_t mode;
  int32_t mvolprhi;
  int32_t mvolprlo;
  int32_t ppawprhi;
  int32_t ppawprlo;
  int32_t rateprhi;
  int32_t apintvl;
  int32_t fio2prhi;
  int32_t fio2prlo;
  int32_t alvol;
  int32_t tvolprcn;
  int32_t ppawprcn;
  int32_t ti;
  int32_t rateprcn;
  int32_t trig;
  int32_t psprcn;
  int32_t peepprcn;
  int32_t pflow;
  int32_t flowtrig;
  int32_t slope;
  int32_t psethresh;
  int32_t psmaxti;
  int32_t wave;
  int32_t biasflow;
  int32_t niv;
  int32_t nmpr;
  int32_t pcvmode;
};
#define HT70__STATUS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ht70__status__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }


struct  _Ht70__Breath
{
  ProtobufCMessage base;
  int32_t tvol;
  int32_t mvol;
  int32_t rate;
  int32_t ppaw;
  int32_t map;
  int32_t peep;
  int32_t fio2;
  int32_t pflow;
  int32_t i2e;
  int32_t o2cyltime;
  int32_t battime;
};
#define HT70__BREATH__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ht70__breath__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }


struct  _Ht70__Alarms
{
  ProtobufCMessage base;
  int32_t sysfault;
  int32_t battfail;
  int32_t pwrfail;
  int32_t occlusionsust;
  int32_t prox;
  int32_t ppawlo;
  int32_t occlusion;
  int32_t apnea;
  int32_t mvollo;
  int32_t mvolhi;
  int32_t pcvnr;
  int32_t fio2lo;
  int32_t peeplo;
  int32_t ppawhi;
  int32_t battlo;
  int32_t extbattlo;
  int32_t vtehi;
  int32_t fio2hi;
  int32_t peephi;
  int32_t batton;
  int32_t battery;
  int32_t ratehi;
  int32_t fio2sensor;
  int32_t backup;
  int32_t nopwr;
};
#define HT70__ALARMS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ht70__alarms__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }


struct  _Ht70__Sensors
{
  ProtobufCMessage base;
  /*
   * FIXME: this should be CHAR size
   */
  /*
   * [50]...50hz
   */
  size_t n_pawwave;
  int32_t *pawwave;
  /*
   * [50]...50hz
   */
  size_t n_flowwave;
  int32_t *flowwave;
};
#define HT70__SENSORS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ht70__sensors__descriptor) \
    , 0,NULL, 0,NULL }


/* Ht70__Ident methods */
void   ht70__ident__init
                     (Ht70__Ident         *message);
size_t ht70__ident__get_packed_size
                     (const Ht70__Ident   *message);
size_t ht70__ident__pack
                     (const Ht70__Ident   *message,
                      uint8_t             *out);
size_t ht70__ident__pack_to_buffer
                     (const Ht70__Ident   *message,
                      ProtobufCBuffer     *buffer);
Ht70__Ident *
       ht70__ident__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ht70__ident__free_unpacked
                     (Ht70__Ident *message,
                      ProtobufCAllocator *allocator);
/* Ht70__Status methods */
void   ht70__status__init
                     (Ht70__Status         *message);
size_t ht70__status__get_packed_size
                     (const Ht70__Status   *message);
size_t ht70__status__pack
                     (const Ht70__Status   *message,
                      uint8_t             *out);
size_t ht70__status__pack_to_buffer
                     (const Ht70__Status   *message,
                      ProtobufCBuffer     *buffer);
Ht70__Status *
       ht70__status__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ht70__status__free_unpacked
                     (Ht70__Status *message,
                      ProtobufCAllocator *allocator);
/* Ht70__Breath methods */
void   ht70__breath__init
                     (Ht70__Breath         *message);
size_t ht70__breath__get_packed_size
                     (const Ht70__Breath   *message);
size_t ht70__breath__pack
                     (const Ht70__Breath   *message,
                      uint8_t             *out);
size_t ht70__breath__pack_to_buffer
                     (const Ht70__Breath   *message,
                      ProtobufCBuffer     *buffer);
Ht70__Breath *
       ht70__breath__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ht70__breath__free_unpacked
                     (Ht70__Breath *message,
                      ProtobufCAllocator *allocator);
/* Ht70__Alarms methods */
void   ht70__alarms__init
                     (Ht70__Alarms         *message);
size_t ht70__alarms__get_packed_size
                     (const Ht70__Alarms   *message);
size_t ht70__alarms__pack
                     (const Ht70__Alarms   *message,
                      uint8_t             *out);
size_t ht70__alarms__pack_to_buffer
                     (const Ht70__Alarms   *message,
                      ProtobufCBuffer     *buffer);
Ht70__Alarms *
       ht70__alarms__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ht70__alarms__free_unpacked
                     (Ht70__Alarms *message,
                      ProtobufCAllocator *allocator);
/* Ht70__Sensors methods */
void   ht70__sensors__init
                     (Ht70__Sensors         *message);
size_t ht70__sensors__get_packed_size
                     (const Ht70__Sensors   *message);
size_t ht70__sensors__pack
                     (const Ht70__Sensors   *message,
                      uint8_t             *out);
size_t ht70__sensors__pack_to_buffer
                     (const Ht70__Sensors   *message,
                      ProtobufCBuffer     *buffer);
Ht70__Sensors *
       ht70__sensors__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ht70__sensors__free_unpacked
                     (Ht70__Sensors *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Ht70__Ident_Closure)
                 (const Ht70__Ident *message,
                  void *closure_data);
typedef void (*Ht70__Status_Closure)
                 (const Ht70__Status *message,
                  void *closure_data);
typedef void (*Ht70__Breath_Closure)
                 (const Ht70__Breath *message,
                  void *closure_data);
typedef void (*Ht70__Alarms_Closure)
                 (const Ht70__Alarms *message,
                  void *closure_data);
typedef void (*Ht70__Sensors_Closure)
                 (const Ht70__Sensors *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor ht70__ident__descriptor;
extern const ProtobufCMessageDescriptor ht70__status__descriptor;
extern const ProtobufCMessageDescriptor ht70__breath__descriptor;
extern const ProtobufCMessageDescriptor ht70__alarms__descriptor;
extern const ProtobufCMessageDescriptor ht70__sensors__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_model_2fht70_2eproto__INCLUDED */
