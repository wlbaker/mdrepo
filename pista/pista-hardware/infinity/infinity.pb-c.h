/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: infinity.proto */

#ifndef PROTOBUF_C_infinity_2eproto__INCLUDED
#define PROTOBUF_C_infinity_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1002001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _Infinity__Ident Infinity__Ident;
typedef struct _Infinity__InfMeasurements Infinity__InfMeasurements;
typedef struct _Infinity__Sensors Infinity__Sensors;


/* --- enums --- */


/* --- messages --- */

struct  _Infinity__Ident
{
  ProtobufCMessage base;
  /*
   *[9];
   */
  char *model;
  /*
   * [10];
   */
  char *serial_no;
  /*
   * [18];
   */
  protobuf_c_boolean has_cpu_id;
  ProtobufCBinaryData cpu_id;
  /*
   * [18];
   */
  protobuf_c_boolean has_adapter_id;
  ProtobufCBinaryData adapter_id;
  /*
   * [18];
   */
  char *pim_id;
  /*
   * [9];
   */
  char *spm_model;
  /*
   * [10];
   */
  char *spm_serial;
  /*
   * [18];
   */
  char *silent_mode;
  /*
   * ;
   */
  protobuf_c_boolean has_contrast;
  int32_t contrast;
  /*
   * [9];
   */
  char *emv_version;
};
#define INFINITY__IDENT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&infinity__ident__descriptor) \
    , NULL, NULL, 0,{0,NULL}, 0,{0,NULL}, NULL, NULL, NULL, NULL, 0,0, NULL }


struct  _Infinity__InfMeasurements
{
  ProtobufCMessage base;
  protobuf_c_boolean has_nibp_sys;
  int32_t nibp_sys;
  protobuf_c_boolean has_nibp_dia;
  int32_t nibp_dia;
  protobuf_c_boolean has_nibp_mean;
  int32_t nibp_mean;
  protobuf_c_boolean has_spo2_hr;
  int32_t spo2_hr;
  protobuf_c_boolean has_cvp_mean;
  int32_t cvp_mean;
  protobuf_c_boolean has_pa_pwp;
  int32_t pa_pwp;
  protobuf_c_boolean has_pa_mean;
  int32_t pa_mean;
  protobuf_c_boolean has_pa_sys;
  int32_t pa_sys;
  protobuf_c_boolean has_pa_dia;
  int32_t pa_dia;
  protobuf_c_boolean has_art_mean;
  int32_t art_mean;
  protobuf_c_boolean has_art_sys;
  int32_t art_sys;
  protobuf_c_boolean has_art_dia;
  int32_t art_dia;
  protobuf_c_boolean has_art_pwp;
  int32_t art_pwp;
  protobuf_c_boolean has_art_hr;
  int32_t art_hr;
  protobuf_c_boolean has_ecg_pp;
  int32_t ecg_pp;
  protobuf_c_boolean has_ecg_arr;
  int32_t ecg_arr;
  protobuf_c_boolean has_ecg_pvc;
  int32_t ecg_pvc;
  protobuf_c_boolean has_ecg_hr;
  int32_t ecg_hr;
  protobuf_c_boolean has_spo2_sat;
  int32_t spo2_sat;
  protobuf_c_boolean has_spo2_pr;
  int32_t spo2_pr;
  protobuf_c_boolean has_art_pr;
  int32_t art_pr;
  protobuf_c_boolean has_tbasic_a;
  int32_t tbasic_a;
  protobuf_c_boolean has_tbasic_b;
  int32_t tbasic_b;
  protobuf_c_boolean has_tbasic_delta;
  int32_t tbasic_delta;
  protobuf_c_boolean has_temp1_a;
  int32_t temp1_a;
  protobuf_c_boolean has_temp1_b;
  int32_t temp1_b;
  protobuf_c_boolean has_gp1_sys;
  int32_t gp1_sys;
  protobuf_c_boolean has_gp1_dia;
  int32_t gp1_dia;
  protobuf_c_boolean has_gp1_mean;
  int32_t gp1_mean;
  protobuf_c_boolean has_gp2_sys;
  int32_t gp2_sys;
  protobuf_c_boolean has_gp2_dia;
  int32_t gp2_dia;
  protobuf_c_boolean has_gp2_mean;
  int32_t gp2_mean;
};
#define INFINITY__INF_MEASUREMENTS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&infinity__inf_measurements__descriptor) \
    , 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


struct  _Infinity__Sensors
{
  ProtobufCMessage base;
  size_t n_ecg0;
  int32_t *ecg0;
  size_t n_ecg1;
  int32_t *ecg1;
  size_t n_ecg2;
  int32_t *ecg2;
  size_t n_ecg3;
  int32_t *ecg3;
  size_t n_abp;
  int32_t *abp;
  size_t n_pa;
  int32_t *pa;
};
#define INFINITY__SENSORS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&infinity__sensors__descriptor) \
    , 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL }


/* Infinity__Ident methods */
void   infinity__ident__init
                     (Infinity__Ident         *message);
size_t infinity__ident__get_packed_size
                     (const Infinity__Ident   *message);
size_t infinity__ident__pack
                     (const Infinity__Ident   *message,
                      uint8_t             *out);
size_t infinity__ident__pack_to_buffer
                     (const Infinity__Ident   *message,
                      ProtobufCBuffer     *buffer);
Infinity__Ident *
       infinity__ident__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   infinity__ident__free_unpacked
                     (Infinity__Ident *message,
                      ProtobufCAllocator *allocator);
/* Infinity__InfMeasurements methods */
void   infinity__inf_measurements__init
                     (Infinity__InfMeasurements         *message);
size_t infinity__inf_measurements__get_packed_size
                     (const Infinity__InfMeasurements   *message);
size_t infinity__inf_measurements__pack
                     (const Infinity__InfMeasurements   *message,
                      uint8_t             *out);
size_t infinity__inf_measurements__pack_to_buffer
                     (const Infinity__InfMeasurements   *message,
                      ProtobufCBuffer     *buffer);
Infinity__InfMeasurements *
       infinity__inf_measurements__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   infinity__inf_measurements__free_unpacked
                     (Infinity__InfMeasurements *message,
                      ProtobufCAllocator *allocator);
/* Infinity__Sensors methods */
void   infinity__sensors__init
                     (Infinity__Sensors         *message);
size_t infinity__sensors__get_packed_size
                     (const Infinity__Sensors   *message);
size_t infinity__sensors__pack
                     (const Infinity__Sensors   *message,
                      uint8_t             *out);
size_t infinity__sensors__pack_to_buffer
                     (const Infinity__Sensors   *message,
                      ProtobufCBuffer     *buffer);
Infinity__Sensors *
       infinity__sensors__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   infinity__sensors__free_unpacked
                     (Infinity__Sensors *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Infinity__Ident_Closure)
                 (const Infinity__Ident *message,
                  void *closure_data);
typedef void (*Infinity__InfMeasurements_Closure)
                 (const Infinity__InfMeasurements *message,
                  void *closure_data);
typedef void (*Infinity__Sensors_Closure)
                 (const Infinity__Sensors *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor infinity__ident__descriptor;
extern const ProtobufCMessageDescriptor infinity__inf_measurements__descriptor;
extern const ProtobufCMessageDescriptor infinity__sensors__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_infinity_2eproto__INCLUDED */
