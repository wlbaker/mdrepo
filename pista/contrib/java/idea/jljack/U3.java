/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package idea.jljack;

public class U3 implements U3Constants {
  public static void normalChecksum(SWIGTYPE_p_unsigned_char b, int n) {
    U3JNI.normalChecksum(SWIGTYPE_p_unsigned_char.getCPtr(b), n);
  }

  public static void extendedChecksum(SWIGTYPE_p_unsigned_char b, int n) {
    U3JNI.extendedChecksum(SWIGTYPE_p_unsigned_char.getCPtr(b), n);
  }

  public static short normalChecksum8(SWIGTYPE_p_unsigned_char b, int n) {
    return U3JNI.normalChecksum8(SWIGTYPE_p_unsigned_char.getCPtr(b), n);
  }

  public static int extendedChecksum16(SWIGTYPE_p_unsigned_char b, int n) {
    return U3JNI.extendedChecksum16(SWIGTYPE_p_unsigned_char.getCPtr(b), n);
  }

  public static short extendedChecksum8(SWIGTYPE_p_unsigned_char b) {
    return U3JNI.extendedChecksum8(SWIGTYPE_p_unsigned_char.getCPtr(b));
  }

  public static int getTickCount() {
    return U3JNI.getTickCount();
  }

  public static int getTdacCalibrationInfo(SWIGTYPE_p_HANDLE hDevice, U3_TDAC_CALIBRATION_INFORMATION caliInfo, short DIOAPinNum) {
    return U3JNI.getTdacCalibrationInfo(SWIGTYPE_p_HANDLE.getCPtr(hDevice), U3_TDAC_CALIBRATION_INFORMATION.getCPtr(caliInfo), caliInfo, DIOAPinNum);
  }

  public static double FPuint8ArrayToFPDouble(SWIGTYPE_p_unsigned_char buffer, int startIndex) {
    return U3JNI.FPuint8ArrayToFPDouble(SWIGTYPE_p_unsigned_char.getCPtr(buffer), startIndex);
  }

  public static int isCalibrationInfoValid(U3_CALIBRATION_INFORMATION caliInfo) {
    return U3JNI.isCalibrationInfoValid(U3_CALIBRATION_INFORMATION.getCPtr(caliInfo), caliInfo);
  }

  public static int isTdacCalibrationInfoValid(U3_TDAC_CALIBRATION_INFORMATION caliInfo) {
    return U3JNI.isTdacCalibrationInfoValid(U3_TDAC_CALIBRATION_INFORMATION.getCPtr(caliInfo), caliInfo);
  }

  public static int getAinVoltCalibrated(U3_CALIBRATION_INFORMATION caliInfo, int dac1Enabled, short negChannel, int bytesVolt, SWIGTYPE_p_double analogVolt) {
    return U3JNI.getAinVoltCalibrated(U3_CALIBRATION_INFORMATION.getCPtr(caliInfo), caliInfo, dac1Enabled, negChannel, bytesVolt, SWIGTYPE_p_double.getCPtr(analogVolt));
  }

  public static int getAinVoltCalibrated_hw130(U3_CALIBRATION_INFORMATION caliInfo, short positiveChannel, short negChannel, int bytesVolt, SWIGTYPE_p_double analogVolt) {
    return U3JNI.getAinVoltCalibrated_hw130(U3_CALIBRATION_INFORMATION.getCPtr(caliInfo), caliInfo, positiveChannel, negChannel, bytesVolt, SWIGTYPE_p_double.getCPtr(analogVolt));
  }

  public static int getDacBinVoltCalibrated(U3_CALIBRATION_INFORMATION caliInfo, int dacNumber, double analogVolt, SWIGTYPE_p_unsigned_char bytesVolt) {
    return U3JNI.getDacBinVoltCalibrated(U3_CALIBRATION_INFORMATION.getCPtr(caliInfo), caliInfo, dacNumber, analogVolt, SWIGTYPE_p_unsigned_char.getCPtr(bytesVolt));
  }

  public static int getDacBinVoltCalibrated8Bit(U3_CALIBRATION_INFORMATION caliInfo, int dacNumber, double analogVolt, SWIGTYPE_p_unsigned_char bytesVolt8) {
    return U3JNI.getDacBinVoltCalibrated8Bit(U3_CALIBRATION_INFORMATION.getCPtr(caliInfo), caliInfo, dacNumber, analogVolt, SWIGTYPE_p_unsigned_char.getCPtr(bytesVolt8));
  }

  public static int getDacBinVoltCalibrated16Bit(U3_CALIBRATION_INFORMATION caliInfo, int dacNumber, double analogVolt, SWIGTYPE_p_unsigned_short bytesVolt16) {
    return U3JNI.getDacBinVoltCalibrated16Bit(U3_CALIBRATION_INFORMATION.getCPtr(caliInfo), caliInfo, dacNumber, analogVolt, SWIGTYPE_p_unsigned_short.getCPtr(bytesVolt16));
  }

  public static int getTdacBinVoltCalibrated(U3_TDAC_CALIBRATION_INFORMATION caliInfo, int dacNumber, double analogVolt, SWIGTYPE_p_unsigned_short bytesVolt) {
    return U3JNI.getTdacBinVoltCalibrated(U3_TDAC_CALIBRATION_INFORMATION.getCPtr(caliInfo), caliInfo, dacNumber, analogVolt, SWIGTYPE_p_unsigned_short.getCPtr(bytesVolt));
  }

  public static int getTempKCalibrated(U3_CALIBRATION_INFORMATION caliInfo, long bytesTemp, SWIGTYPE_p_double kelvinTemp) {
    return U3JNI.getTempKCalibrated(U3_CALIBRATION_INFORMATION.getCPtr(caliInfo), caliInfo, bytesTemp, SWIGTYPE_p_double.getCPtr(kelvinTemp));
  }

  public static int getAinVoltUncalibrated(int dac1Enabled, short negChannel, int bytesVolt, SWIGTYPE_p_double analogVolt) {
    return U3JNI.getAinVoltUncalibrated(dac1Enabled, negChannel, bytesVolt, SWIGTYPE_p_double.getCPtr(analogVolt));
  }

  public static int getAinVoltUncalibrated_hw130(int highVoltage, short positiveChannel, short negChannel, int bytesVolt, SWIGTYPE_p_double analogVolt) {
    return U3JNI.getAinVoltUncalibrated_hw130(highVoltage, positiveChannel, negChannel, bytesVolt, SWIGTYPE_p_double.getCPtr(analogVolt));
  }

  public static int getDacBinVoltUncalibrated(int dacNumber, double analogVolt, SWIGTYPE_p_unsigned_char bytesVolt) {
    return U3JNI.getDacBinVoltUncalibrated(dacNumber, analogVolt, SWIGTYPE_p_unsigned_char.getCPtr(bytesVolt));
  }

  public static int getDacBinVoltUncalibrated8Bit(int dacNumber, double analogVolt, SWIGTYPE_p_unsigned_char bytesVolt8) {
    return U3JNI.getDacBinVoltUncalibrated8Bit(dacNumber, analogVolt, SWIGTYPE_p_unsigned_char.getCPtr(bytesVolt8));
  }

  public static int getDacBinVoltUncalibrated16Bit(int dacNumber, double analogVolt, SWIGTYPE_p_unsigned_short bytesVolt16) {
    return U3JNI.getDacBinVoltUncalibrated16Bit(dacNumber, analogVolt, SWIGTYPE_p_unsigned_short.getCPtr(bytesVolt16));
  }

  public static int getTempKUncalibrated(int bytesTemp, SWIGTYPE_p_double kelvinTemp) {
    return U3JNI.getTempKUncalibrated(bytesTemp, SWIGTYPE_p_double.getCPtr(kelvinTemp));
  }

  public static int I2C(SWIGTYPE_p_HANDLE hDevice, short I2COptions, short SpeedAdjust, short SDAPinNum, short SCLPinNum, short Address, short NumI2CBytesToSend, short NumI2CBytesToReceive, SWIGTYPE_p_unsigned_char I2CBytesCommand, SWIGTYPE_p_unsigned_char Errorcode, SWIGTYPE_p_unsigned_char AckArray, SWIGTYPE_p_unsigned_char I2CBytesResponse) {
    return U3JNI.I2C(SWIGTYPE_p_HANDLE.getCPtr(hDevice), I2COptions, SpeedAdjust, SDAPinNum, SCLPinNum, Address, NumI2CBytesToSend, NumI2CBytesToReceive, SWIGTYPE_p_unsigned_char.getCPtr(I2CBytesCommand), SWIGTYPE_p_unsigned_char.getCPtr(Errorcode), SWIGTYPE_p_unsigned_char.getCPtr(AckArray), SWIGTYPE_p_unsigned_char.getCPtr(I2CBytesResponse));
  }

  public static int eAIN(SWIGTYPE_p_HANDLE Handle, U3_CALIBRATION_INFORMATION CalibrationInfo, int ConfigIO, SWIGTYPE_p_long DAC1Enable, int ChannelP, int ChannelN, SWIGTYPE_p_double Voltage, int Range, int Resolution, int Settling, int Binary, int Reserved1, int Reserved2) {
    return U3JNI.eAIN(SWIGTYPE_p_HANDLE.getCPtr(Handle), U3_CALIBRATION_INFORMATION.getCPtr(CalibrationInfo), CalibrationInfo, ConfigIO, SWIGTYPE_p_long.getCPtr(DAC1Enable), ChannelP, ChannelN, SWIGTYPE_p_double.getCPtr(Voltage), Range, Resolution, Settling, Binary, Reserved1, Reserved2);
  }

  public static int eDAC(SWIGTYPE_p_HANDLE Handle, U3_CALIBRATION_INFORMATION CalibrationInfo, int ConfigIO, int Channel, double Voltage, int Binary, int Reserved1, int Reserved2) {
    return U3JNI.eDAC(SWIGTYPE_p_HANDLE.getCPtr(Handle), U3_CALIBRATION_INFORMATION.getCPtr(CalibrationInfo), CalibrationInfo, ConfigIO, Channel, Voltage, Binary, Reserved1, Reserved2);
  }

  public static int eDI(SWIGTYPE_p_HANDLE Handle, int ConfigIO, int Channel, SWIGTYPE_p_long State) {
    return U3JNI.eDI(SWIGTYPE_p_HANDLE.getCPtr(Handle), ConfigIO, Channel, SWIGTYPE_p_long.getCPtr(State));
  }

  public static int eDO(SWIGTYPE_p_HANDLE Handle, int ConfigIO, int Channel, int State) {
    return U3JNI.eDO(SWIGTYPE_p_HANDLE.getCPtr(Handle), ConfigIO, Channel, State);
  }

  public static int eTCConfig(SWIGTYPE_p_HANDLE Handle, SWIGTYPE_p_long aEnableTimers, SWIGTYPE_p_long aEnableCounters, int TCPinOffset, int TimerClockBaseIndex, int TimerClockDivisor, SWIGTYPE_p_long aTimerModes, SWIGTYPE_p_double aTimerValues, int Reserved1, int Reserved2) {
    return U3JNI.eTCConfig(SWIGTYPE_p_HANDLE.getCPtr(Handle), SWIGTYPE_p_long.getCPtr(aEnableTimers), SWIGTYPE_p_long.getCPtr(aEnableCounters), TCPinOffset, TimerClockBaseIndex, TimerClockDivisor, SWIGTYPE_p_long.getCPtr(aTimerModes), SWIGTYPE_p_double.getCPtr(aTimerValues), Reserved1, Reserved2);
  }

  public static int eTCValues(SWIGTYPE_p_HANDLE Handle, SWIGTYPE_p_long aReadTimers, SWIGTYPE_p_long aUpdateResetTimers, SWIGTYPE_p_long aReadCounters, SWIGTYPE_p_long aResetCounters, SWIGTYPE_p_double aTimerValues, SWIGTYPE_p_double aCounterValues, int Reserved1, int Reserved2) {
    return U3JNI.eTCValues(SWIGTYPE_p_HANDLE.getCPtr(Handle), SWIGTYPE_p_long.getCPtr(aReadTimers), SWIGTYPE_p_long.getCPtr(aUpdateResetTimers), SWIGTYPE_p_long.getCPtr(aReadCounters), SWIGTYPE_p_long.getCPtr(aResetCounters), SWIGTYPE_p_double.getCPtr(aTimerValues), SWIGTYPE_p_double.getCPtr(aCounterValues), Reserved1, Reserved2);
  }

  public static int ehConfigIO(SWIGTYPE_p_HANDLE hDevice, short inWriteMask, short inTimerCounterConfig, short inDAC1Enable, short inFIOAnalog, short inEIOAnalog, SWIGTYPE_p_unsigned_char outTimerCounterConfig, SWIGTYPE_p_unsigned_char outDAC1Enable, SWIGTYPE_p_unsigned_char outFIOAnalog, SWIGTYPE_p_unsigned_char outEIOAnalog) {
    return U3JNI.ehConfigIO(SWIGTYPE_p_HANDLE.getCPtr(hDevice), inWriteMask, inTimerCounterConfig, inDAC1Enable, inFIOAnalog, inEIOAnalog, SWIGTYPE_p_unsigned_char.getCPtr(outTimerCounterConfig), SWIGTYPE_p_unsigned_char.getCPtr(outDAC1Enable), SWIGTYPE_p_unsigned_char.getCPtr(outFIOAnalog), SWIGTYPE_p_unsigned_char.getCPtr(outEIOAnalog));
  }

  public static int ehConfigTimerClock(SWIGTYPE_p_HANDLE hDevice, short inTimerClockConfig, short inTimerClockDivisor, SWIGTYPE_p_unsigned_char outTimerClockConfig, SWIGTYPE_p_unsigned_char outTimerClockDivisor) {
    return U3JNI.ehConfigTimerClock(SWIGTYPE_p_HANDLE.getCPtr(hDevice), inTimerClockConfig, inTimerClockDivisor, SWIGTYPE_p_unsigned_char.getCPtr(outTimerClockConfig), SWIGTYPE_p_unsigned_char.getCPtr(outTimerClockDivisor));
  }

  public static int ehFeedback(SWIGTYPE_p_HANDLE hDevice, SWIGTYPE_p_unsigned_char inIOTypesDataBuff, int inIOTypesDataSize, SWIGTYPE_p_unsigned_char outErrorcode, SWIGTYPE_p_unsigned_char outErrorFrame, SWIGTYPE_p_unsigned_char outDataBuff, int outDataSize) {
    return U3JNI.ehFeedback(SWIGTYPE_p_HANDLE.getCPtr(hDevice), SWIGTYPE_p_unsigned_char.getCPtr(inIOTypesDataBuff), inIOTypesDataSize, SWIGTYPE_p_unsigned_char.getCPtr(outErrorcode), SWIGTYPE_p_unsigned_char.getCPtr(outErrorFrame), SWIGTYPE_p_unsigned_char.getCPtr(outDataBuff), outDataSize);
  }

  public static void U3_CDM_init(int hz, int reads_per_sample, int pkt_ms, int fio, int eio, U3_C_DATA_MODEL cdm) {
    U3JNI.U3_CDM_init(hz, reads_per_sample, pkt_ms, fio, eio, U3_C_DATA_MODEL.getCPtr(cdm), cdm);
  }

  public static SWIGTYPE_p_HANDLE U3_openUSBConnection(int localID) {
    return new SWIGTYPE_p_HANDLE(U3JNI.U3_openUSBConnection(localID), true);
  }

  public static void U3_closeUSBConnection(SWIGTYPE_p_HANDLE hDevice) {
    U3JNI.U3_closeUSBConnection(SWIGTYPE_p_HANDLE.getCPtr(hDevice));
  }

  public static int U3_getCalibrationInfo(SWIGTYPE_p_HANDLE hDevice, U3_CALIBRATION_INFORMATION caliInfo) {
    return U3JNI.U3_getCalibrationInfo(SWIGTYPE_p_HANDLE.getCPtr(hDevice), U3_CALIBRATION_INFORMATION.getCPtr(caliInfo), caliInfo);
  }

  public static int U3_configIO(SWIGTYPE_p_HANDLE hDevice, int fio, int eio) {
    return U3JNI.U3_configIO(SWIGTYPE_p_HANDLE.getCPtr(hDevice), fio, eio);
  }

  public static int U3_streamConfig(SWIGTYPE_p_HANDLE hDevice, U3_C_DATA_MODEL cdm) {
    return U3JNI.U3_streamConfig(SWIGTYPE_p_HANDLE.getCPtr(hDevice), U3_C_DATA_MODEL.getCPtr(cdm), cdm);
  }

  public static int U3_streamStart(SWIGTYPE_p_HANDLE hDevice) {
    return U3JNI.U3_streamStart(SWIGTYPE_p_HANDLE.getCPtr(hDevice));
  }

  public static int U3_streamData(SWIGTYPE_p_HANDLE hDevice, U3_CALIBRATION_INFORMATION caliInfo, U3_C_DATA_MODEL cdm) {
    return U3JNI.U3_streamData(SWIGTYPE_p_HANDLE.getCPtr(hDevice), U3_CALIBRATION_INFORMATION.getCPtr(caliInfo), caliInfo, U3_C_DATA_MODEL.getCPtr(cdm), cdm);
  }

  public static int U3_streamStop(SWIGTYPE_p_HANDLE hDevice) {
    return U3JNI.U3_streamStop(SWIGTYPE_p_HANDLE.getCPtr(hDevice));
  }

  public static void c_unbuf() {
    U3JNI.c_unbuf();
  }

  public static double[] overwrite(U3_C_DATA_MODEL model, int idx, double[] OVERWRITE_DAR, int len) {
    return U3JNI.overwrite__SWIG_0(U3_C_DATA_MODEL.getCPtr(model), model, idx, OVERWRITE_DAR, len);
}

  public static float[] overwrite(U3_C_DATA_MODEL model, int idx, float[] OVERWRITE_FAR, int len) {
    return U3JNI.overwrite__SWIG_1(U3_C_DATA_MODEL.getCPtr(model), model, idx, OVERWRITE_FAR, len);
}

}
