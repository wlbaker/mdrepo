README.txt
ICE hello world program for Linux/Win, using RTI DDS
December 2017
wayne@docboxinc.com
----------

This provides information about an example DocBox DDS pub/sub C++ application.
ice_hello_world is a non-GUI terminal app intended to illustrate use of
elements of the DocBox integrated clinical environment (ICE) data information
model (DIM).

The app requires an install of RTI Connext DDS Professional
[http://www.rti.com/]. Check the RTI website for free downloadable Connext
trial version. RTI provides libraries for a variety of toolchains, including
Intel/Windows/Visual Studio and Linux/Gnu.

The projects (MSVS, CMake) expect a normal, out-of-the-box install of RTI DDS,
and NDDSHOME environment variable set.


MSVS C++
--------
You may build the app as Visual Studio 2015 Windows app. Other VS should work.
The VS project contained in this package requires 64-bit RTI libraries. You
must manally compile the ICE IDL files. A batch file is provided
(idl\_dim_idlgen.bat).


Linux/Gnu
----------
You may build the app for a Linux/g++ platform. A cmake file is provided to
build a 64-bit app.

To use the CMake build system...

cmake -DCMAKE_MODULE_PATH=.
make

The CMakeLists.txt will create a Makefile that will generate appropriate sources from IDL, compile and link the executable.


Project directory structure
----------
ice_hello_world
    bin
    idl
    obj
    src
    src_dds
    vs2015

bin:      MSVS executables.

idl:      The idl directory contains ICE IDL files, which serve as input to the
DDS code generator rtiddsgen.exe. The directory also contains Windows batch
files to invoke the code generator.

obj:      MSVS intermediate build files.

src:      C++ source files

src_dds:  C++ source files, generated by the RTI code generator rtiddsgen, are
output to the src_dds directory. IDL files serve as input to rtiddsgen.

vs2015:   MSVS C++ 2015 project files.


To run
----------
-- Ensure the NDDSHOME environment variable is set (see RTI DDS install
   documentation).
-- Create two terminal windows. One each for the for the app's pub/sub modes
-- Set current directory to the example program install directory,
   ice_hello_world.
-- Ensure a copy of file USER_QOS_PROFILES.xml is in the current directory.
-- Run the program. First, in one terminal window run the application as a
   subscriber (run_sub.bat). Then, in the other terminal window run as a
   publisher (run_pub.bat).
-- The publish app periodically writes DDS data samples. The subscribe app
   reads the published samples. For each sample written or read, the app 
   writes to the monitor information about the data. The apps run until the
   escape is pressed. Errors are trapped and information posted to the monitor.
