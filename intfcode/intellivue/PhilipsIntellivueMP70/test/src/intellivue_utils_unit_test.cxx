/**
 * @file intellivue_utils_unit_test.cxx
 *
 * @brief Defines a unit test class for IntellivueUtils class.
 *
 * @author M Szwaja
 */
//=============================================================================
#include "intellivue_utils_unit_test.h"
#include <log4cplus/loggingmacros.h>
#include <log4cplus/configurator.h>
#include <climits>
#include "Test/Catch/catch.hpp"
#include "UnitTestReturnCodes.h"
#include "intellivue_utils.h"
#include "PhilipsIntellivueMP70ReturnCodes.h"
#include "x73_nomenclature_medical_scada.h"

static const uint16_t kUnicodeDelta = 0x0394;
static const uint16_t kUnicodeSubscriptTwo = 0x2082;
static const char kAsciiUnknown = '!';
static const char kAsciiSubscriptCapitalE = 'E';
static const char kAsciiSubscriptCapitalL = 'L';
static const char kAsciiVWithADotAbove = 'V';
static const char kAsciiDelta = 'd';
static const char kAsciiSubscript2 = '2';
static const char kAsciiStar = '*';

static log4cplus::Logger root_logger = log4cplus::Logger::getRoot();



static const std::vector<std::pair<intellivue::TextId, std::string>> kTextIdToStringVector
{
  {NLS_NOM_EEG_PWR_SPEC_ALPHA_REL_LEFT, "NLS_NOM_EEG_PWR_SPEC_ALPHA_REL_LEFT"},
  {NLS_NOM_EEG_PWR_SPEC_ALPHA_REL_RIGHT, "NLS_NOM_EEG_PWR_SPEC_ALPHA_REL_RIGHT"},
  {NLS_NOM_EEG_PWR_SPEC_BETA_REL_LEFT, "NLS_NOM_EEG_PWR_SPEC_BETA_REL_LEFT"},
  {NLS_NOM_EEG_PWR_SPEC_BETA_REL_RIGHT, "NLS_NOM_EEG_PWR_SPEC_BETA_REL_RIGHT"},
  {NLS_NOM_EEG_PWR_SPEC_DELTA_REL_LEFT, "NLS_NOM_EEG_PWR_SPEC_DELTA_REL_LEFT"},
  {NLS_NOM_EEG_PWR_SPEC_DELTA_REL_RIGHT, "NLS_NOM_EEG_PWR_SPEC_DELTA_REL_RIGHT"},
  {NLS_NOM_EEG_PWR_SPEC_THETA_REL_LEFT, "NLS_NOM_EEG_PWR_SPEC_THETA_REL_LEFT"},
  {NLS_NOM_EEG_PWR_SPEC_THETA_REL_RIGHT, "NLS_NOM_EEG_PWR_SPEC_THETA_REL_RIGHT"},
  {NLS_NOM_CONC_PROT_SER, "NLS_NOM_CONC_PROT_SER"},
  {NLS_NOM_CONC_PRO_URINE, "NLS_NOM_CONC_PRO_URINE"},
  {NLS_NOM_SAT_O2_GEN_1, "NLS_NOM_SAT_O2_GEN_1"},
  {NLS_VUELINK_FLX1_NPS_TEXT_NUM1, "NLS_VUELINK_FLX1_NPS_TEXT_NUM1"},
  {NLS_NOM_RATIO_IE, "NLS_NOM_RATIO_IE"},
  {NLS_NOM_SETT_RATIO_IE, "NLS_NOM_SETT_RATIO_IE"},
  {NLS_VUELINK_FLX1_NPS_TEXT_NUM10, "NLS_VUELINK_FLX1_NPS_TEXT_NUM10"},
  {NLS_VUELINK_FLX1_NPS_TEXT_NUM11, "NLS_VUELINK_FLX1_NPS_TEXT_NUM11"},
  {NLS_VUELINK_FLX1_NPS_TEXT_NUM12, "NLS_VUELINK_FLX1_NPS_TEXT_NUM12"},
  {NLS_VUELINK_FLX1_NPS_TEXT_NUM13, "NLS_VUELINK_FLX1_NPS_TEXT_NUM13"},
  {NLS_VUELINK_FLX1_NPS_TEXT_NUM14, "NLS_VUELINK_FLX1_NPS_TEXT_NUM14"},
  {NLS_VUELINK_FLX1_NPS_TEXT_NUM15, "NLS_VUELINK_FLX1_NPS_TEXT_NUM15"},
  {NLS_VUELINK_FLX1_NPS_TEXT_NUM16, "NLS_VUELINK_FLX1_NPS_TEXT_NUM16"},
  {NLS_VUELINK_FLX1_NPS_TEXT_NUM17, "NLS_VUELINK_FLX1_NPS_TEXT_NUM17"},
  {NLS_VUELINK_FLX1_NPS_TEXT_NUM18, "NLS_VUELINK_FLX1_NPS_TEXT_NUM18"},
  {NLS_VUELINK_FLX1_NPS_TEXT_NUM19, "NLS_VUELINK_FLX1_NPS_TEXT_NUM19"},
  {NLS_NOM_SAT_O2_GEN_2, "NLS_NOM_SAT_O2_GEN_2"},
  {NLS_VUELINK_FLX1_NPS_TEXT_NUM2, "NLS_VUELINK_FLX1_NPS_TEXT_NUM2"},
  {NLS_VUELINK_FLX1_NPS_TEXT_NUM20, "NLS_VUELINK_FLX1_NPS_TEXT_NUM20"},
  {NLS_VUELINK_FLX1_NPS_TEXT_NUM21, "NLS_VUELINK_FLX1_NPS_TEXT_NUM21"},
  {NLS_VUELINK_FLX1_NPS_TEXT_NUM22, "NLS_VUELINK_FLX1_NPS_TEXT_NUM22"},
  {NLS_VUELINK_FLX1_NPS_TEXT_NUM23, "NLS_VUELINK_FLX1_NPS_TEXT_NUM23"},
  {NLS_VUELINK_FLX1_NPS_TEXT_NUM24, "NLS_VUELINK_FLX1_NPS_TEXT_NUM24"},
  {NLS_NOM_SAT_O2_GEN_3, "NLS_NOM_SAT_O2_GEN_3"},
  {NLS_VUELINK_FLX1_NPS_TEXT_NUM3, "NLS_VUELINK_FLX1_NPS_TEXT_NUM3"},
  {NLS_NOM_SAT_O2_GEN_4, "NLS_NOM_SAT_O2_GEN_4"},
  {NLS_VUELINK_FLX1_NPS_TEXT_NUM4, "NLS_VUELINK_FLX1_NPS_TEXT_NUM4"},
  {NLS_VUELINK_FLX1_NPS_TEXT_NUM5, "NLS_VUELINK_FLX1_NPS_TEXT_NUM5"},
  {NLS_VUELINK_FLX1_NPS_TEXT_NUM6, "NLS_VUELINK_FLX1_NPS_TEXT_NUM6"},
  {NLS_VUELINK_FLX1_NPS_TEXT_NUM7, "NLS_VUELINK_FLX1_NPS_TEXT_NUM7"},
  {NLS_VUELINK_FLX1_NPS_TEXT_NUM8, "NLS_VUELINK_FLX1_NPS_TEXT_NUM8"},
  {NLS_VUELINK_FLX1_NPS_TEXT_NUM9, "NLS_VUELINK_FLX1_NPS_TEXT_NUM9"},
  {NLS_NOM_OUTPUT_CARD_INDEX_ACCEL, "NLS_NOM_OUTPUT_CARD_INDEX_ACCEL"},
  {NLS_NOM_TIME_PD_ACT, "NLS_NOM_TIME_PD_ACT"},
  {NLS_NOM_RATIO_TIME_PD_PTT, "NLS_NOM_RATIO_TIME_PD_PTT"},
  {NLS_NOM_AGE, "NLS_NOM_AGE"},
  {NLS_NOM_CONC_PO2_ART_ADJ, "NLS_NOM_CONC_PO2_ART_ADJ"},
  {NLS_NOM_CONC_PO2_CAP_ADJ, "NLS_NOM_CONC_PO2_CAP_ADJ"},
  {NLS_NOM_CONC_PH_GEN_ADJ, "NLS_NOM_CONC_PH_GEN_ADJ"},
  {NLS_NOM_CONC_PH_ART_ADJ, "NLS_NOM_CONC_PH_ART_ADJ"},
  {NLS_NOM_CONC_PH_CAP_ADJ, "NLS_NOM_CONC_PH_CAP_ADJ"},
  {NLS_NOM_CONC_PH_VEN_ADJ, "NLS_NOM_CONC_PH_VEN_ADJ"},
  {NLS_NOM_CONC_PO2_GEN_ADJ, "NLS_NOM_CONC_PO2_GEN_ADJ"},
  {NLS_NOM_CONC_PO2_VEN_ADJ, "NLS_NOM_CONC_PO2_VEN_ADJ"},
  {NLS_NOM_TEMP_AIR_INCUB, "NLS_NOM_TEMP_AIR_INCUB"},
  {NLS_NOM_VENT_CONC_AWAY_CO2_INSP, "NLS_NOM_VENT_CONC_AWAY_CO2_INSP"},
  {NLS_NOM_VENT_FLOW_INSP, "NLS_NOM_VENT_FLOW_INSP"},
  {NLS_NOM_CONC_AWAY_SUM_MAC, "NLS_NOM_CONC_AWAY_SUM_MAC"},
  {NLS_NOM_VOL_MINUTE_AWAY, "NLS_NOM_VOL_MINUTE_AWAY"},
  {NLS_NOM_PRESS_AWAY_MIN, "NLS_NOM_PRESS_AWAY_MIN"},
  {NLS_NOM_PRESS_AWAY, "NLS_NOM_PRESS_AWAY"},
  {NLS_NOM_PRESS_AWAY_INSP, "NLS_NOM_PRESS_AWAY_INSP"},
  {NLS_NOM_AWAY_RESP_RATE, "NLS_NOM_AWAY_RESP_RATE"},
  {NLS_NOM_VENT_RESP_RATE, "NLS_NOM_VENT_RESP_RATE"},
  {NLS_NOM_TEMP_AWAY, "NLS_NOM_TEMP_AWAY"},
  {NLS_NOM_EEG_PWR_SPEC_ALPHA_ABS_LEFT, "NLS_NOM_EEG_PWR_SPEC_ALPHA_ABS_LEFT"},
  {NLS_NOM_EEG_PWR_SPEC_ALPHA_ABS_RIGHT, "NLS_NOM_EEG_PWR_SPEC_ALPHA_ABS_RIGHT"},
  {NLS_NOM_SETT_VENT_CONC_AWAY_O2_LIMIT_HI, "NLS_NOM_SETT_VENT_CONC_AWAY_O2_LIMIT_HI"},
  {NLS_NOM_SETT_VENT_VOL_MINUTE_AWAY_LIMIT_HI, "NLS_NOM_SETT_VENT_VOL_MINUTE_AWAY_LIMIT_HI"},
  {NLS_NOM_SETT_VENT_PRESS_AWAY_LIMIT_HI, "NLS_NOM_SETT_VENT_PRESS_AWAY_LIMIT_HI"},
  {NLS_NOM_SETT_VENT_VOL_TIDAL_LIMIT_HI, "NLS_NOM_SETT_VENT_VOL_TIDAL_LIMIT_HI"},
  {NLS_NOM_SETT_VENT_VOL_MINUTE_AWAY_LIMIT_LO, "NLS_NOM_SETT_VENT_VOL_MINUTE_AWAY_LIMIT_LO"},
  {NLS_NOM_SETT_VENT_CONC_AWAY_O2_LIMIT_LO, "NLS_NOM_SETT_VENT_CONC_AWAY_O2_LIMIT_LO"},
  {NLS_NOM_VENT_PRESS_AWAY_END_EXP_POS_LIMIT_LO, "NLS_NOM_VENT_PRESS_AWAY_END_EXP_POS_LIMIT_LO"},
  {NLS_NOM_SETT_VENT_VOL_TIDAL_LIMIT_LO, "NLS_NOM_SETT_VENT_VOL_TIDAL_LIMIT_LO"},
  {NLS_NOM_SETT_VENT_PRESS_AWAY_SUST_LIMIT_HI, "NLS_NOM_SETT_VENT_PRESS_AWAY_SUST_LIMIT_HI"},
  {NLS_NOM_CONC_ALB_SER, "NLS_NOM_CONC_ALB_SER"},
  {NLS_NOM_ELEC_EVOK_POTL_CRTX_ACOUSTIC_AAI, "NLS_NOM_ELEC_EVOK_POTL_CRTX_ACOUSTIC_AAI"},
  {NLS_NOM_CONC_AP, "NLS_NOM_CONC_AP"},
  {NLS_NOM_CONC_ALPHA_AMYLASE, "NLS_NOM_CONC_ALPHA_AMYLASE"},
  {NLS_NOM_SAT_DIFF_O2_ART_ALV, "NLS_NOM_SAT_DIFF_O2_ART_ALV"},
  {NLS_NOM_VENT_VOL_LUNG_ALV, "NLS_NOM_VENT_VOL_LUNG_ALV"},
  {NLS_NOM_CONC_ALP, "NLS_NOM_CONC_ALP"},
  {NLS_NOM_TEMP_AMBIENT, "NLS_NOM_TEMP_AMBIENT"},
  {NLS_NOM_TIME_PD_APNEA, "NLS_NOM_TIME_PD_APNEA"},
  {NLS_NOM_TIME_PD_aPTT_PE, "NLS_NOM_TIME_PD_aPTT_PE"},
  {NLS_NOM_TIME_PD_aPTT_WB, "NLS_NOM_TIME_PD_aPTT_WB"},
  {NLS_NOM_TEMP_ART, "NLS_NOM_TEMP_ART"},
  {NLS_NOM_PRESS_BLD_ART_ABP, "NLS_NOM_PRESS_BLD_ART_ABP"},
  {NLS_NOM_PRESS_BLD_ART, "NLS_NOM_PRESS_BLD_ART"},
  {NLS_NOM_PRESS_BLD_AORT, "NLS_NOM_PRESS_BLD_AORT"},
  {NLS_NOM_PULS_OXIM_SAT_O2, "NLS_NOM_PULS_OXIM_SAT_O2"},
  {NLS_NOM_CONC_HB_O2_ART, "NLS_NOM_CONC_HB_O2_ART"},
  {NLS_NOM_CONC_DIFF_HB_O2_ATR_VEN, "NLS_NOM_CONC_DIFF_HB_O2_ATR_VEN"},
  {NLS_NOM_CONC_AST, "NLS_NOM_CONC_AST"},
  {NLS_NOM_FLOW_PUMP_HEART_LUNG_AUX, "NLS_NOM_FLOW_PUMP_HEART_LUNG_AUX"},
  {NLS_NOM_VOL_DELIV_PUMP_HEART_LUNG_AUX, "NLS_NOM_VOL_DELIV_PUMP_HEART_LUNG_AUX"},
  {NLS_NOM_TIME_PD_PUMP_HEART_LUNG_AUX_SINCE_STOP, "NLS_NOM_TIME_PD_PUMP_HEART_LUNG_AUX_SINCE_STOP"},
  {NLS_NOM_TIME_PD_PUMP_HEART_LUNG_AUX_SINCE_START, "NLS_NOM_TIME_PD_PUMP_HEART_LUNG_AUX_SINCE_START"},
  {NLS_NOM_TIME_PD_PLEGIA_PUMP_HEART_LUNG_AUX, "NLS_NOM_TIME_PD_PLEGIA_PUMP_HEART_LUNG_AUX"},
  {NLS_NOM_VOL_DELIV_TOTAL_PUMP_HEART_LUNG_AUX, "NLS_NOM_VOL_DELIV_TOTAL_PUMP_HEART_LUNG_AUX"},
  {NLS_NOM_BASE_EXCESS_BLD_ART_CALC, "NLS_NOM_BASE_EXCESS_BLD_ART_CALC"},
  {NLS_NOM_PRESS_AIR_AMBIENT, "NLS_NOM_PRESS_AIR_AMBIENT"},
  {NLS_NOM_BASE_EXCESS_BLD_ART, "NLS_NOM_BASE_EXCESS_BLD_ART"},
  {NLS_NOM_CONC_BASE_EXCESS_ECF, "NLS_NOM_CONC_BASE_EXCESS_ECF"},
  {NLS_NOM_EEG_PWR_SPEC_BETA_ABS_LEFT, "NLS_NOM_EEG_PWR_SPEC_BETA_ABS_LEFT"},
  {NLS_NOM_EEG_PWR_SPEC_BETA_ABS_RIGHT, "NLS_NOM_EEG_PWR_SPEC_BETA_ABS_RIGHT"},
  {NLS_NOM_EEG_BISPECTRAL_INDEX, "NLS_NOM_EEG_BISPECTRAL_INDEX"},
  {NLS_NOM_PRESS_BLD_DIFF, "NLS_NOM_PRESS_BLD_DIFF"},
  {NLS_NOM_PRESS_BLD_DIFF_GEN_1, "NLS_NOM_PRESS_BLD_DIFF_GEN_1"},
  {NLS_NOM_PRESS_BLD_DIFF_GEN_2, "NLS_NOM_PRESS_BLD_DIFF_GEN_2"},
  {NLS_NOM_CONC_BLD_UREA_NITROGEN, "NLS_NOM_CONC_BLD_UREA_NITROGEN"},
  {NLS_NOM_AREA_BODY_SURFACE, "NLS_NOM_AREA_BODY_SURFACE"},
  {NLS_NOM_PRESS_BLD_ART_BRACHIAL, "NLS_NOM_PRESS_BLD_ART_BRACHIAL"},
  {NLS_NOM_AREA_BODY_SURFACE_ACTUAL_BOYD, "NLS_NOM_AREA_BODY_SURFACE_ACTUAL_BOYD"},
  {NLS_NOM_AREA_BODY_SURFACE_ACTUAL_DUBOIS, "NLS_NOM_AREA_BODY_SURFACE_ACTUAL_DUBOIS"},
  {NLS_NOM_ECG_TIME_PD_QT_BASELINE, "NLS_NOM_ECG_TIME_PD_QT_BASELINE"},
  {NLS_NOM_RATIO_BUN_CREA, "NLS_NOM_RATIO_BUN_CREA"},
  {NLS_NOM_EEG_BURST_SUPPRN_INDEX, "NLS_NOM_EEG_BURST_SUPPRN_INDEX"},
  {NLS_NOM_CONC_CA_SER, "NLS_NOM_CONC_CA_SER"},
  {NLS_NOM_CONC_AN_GAP_CALC, "NLS_NOM_CONC_AN_GAP_CALC"},
  {NLS_NOM_CONC_BASE_EXCESS_ECF_CALC, "NLS_NOM_CONC_BASE_EXCESS_ECF_CALC"},
  {NLS_NOM_CONC_HCO3_GEN_CALC, "NLS_NOM_CONC_HCO3_GEN_CALC"},
  {NLS_NOM_CONC_HB_ART_CALC, "NLS_NOM_CONC_HB_ART_CALC"},
  {NLS_NOM_SAT_O2_ART_CALC, "NLS_NOM_SAT_O2_ART_CALC"},
  {NLS_NOM_SAT_O2_CAP_CALC, "NLS_NOM_SAT_O2_CAP_CALC"},
  {NLS_NOM_SAT_O2_CALC, "NLS_NOM_SAT_O2_CALC"},
  {NLS_NOM_SAT_O2_VEN_CALC, "NLS_NOM_SAT_O2_VEN_CALC"},
  {NLS_NOM_CONC_CO2_TOT_CALC, "NLS_NOM_CONC_CO2_TOT_CALC"},
  {NLS_NOM_CONC_CA_URINE, "NLS_NOM_CONC_CA_URINE"},
  {NLS_NOM_CONC_HB_CO_GEN, "NLS_NOM_CONC_HB_CO_GEN"},
  {NLS_NOM_ECG_CARD_BEAT_RATE_BTB, "NLS_NOM_ECG_CARD_BEAT_RATE_BTB"},
  {NLS_NOM_BNP, "NLS_NOM_BNP"},
  {NLS_NOM_CARD_FUNC_INDEX, "NLS_NOM_CARD_FUNC_INDEX"},
  {NLS_NOM_OUTPUT_CARD_INDEX, "NLS_NOM_OUTPUT_CARD_INDEX"},
  {NLS_NOM_OUTPUT_CARD, "NLS_NOM_OUTPUT_CARD"},
  {NLS_NOM_CARDIAC_TROPONIN_I, "NLS_NOM_CARDIAC_TROPONIN_I"},
  {NLS_NOM_CARDIO_PULMONARY_BYPASS_MODE, "NLS_NOM_CARDIO_PULMONARY_BYPASS_MODE"},
  {NLS_NOM_SAT_O2_VEN_CENT, "NLS_NOM_SAT_O2_VEN_CENT"},
  {NLS_NOM_PRESS_BLD_VEN_CENT, "NLS_NOM_PRESS_BLD_VEN_CENT"},
  {NLS_NOM_PRESS_CEREB_PERF, "NLS_NOM_PRESS_CEREB_PERF"},
  {NLS_NOM_TEMP_CEREBRAL, "NLS_NOM_TEMP_CEREBRAL"},
  {NLS_NOM_CONC_CHLORIDE_GEN, "NLS_NOM_CONC_CHLORIDE_GEN"},
  {NLS_NOM_CONC_CHOLESTEROL, "NLS_NOM_CONC_CHOLESTEROL"},
  {NLS_NOM_CONC_CHE, "NLS_NOM_CONC_CHE"},
  {NLS_NOM_CONC_CHLOR_SER, "NLS_NOM_CONC_CHLOR_SER"},
  {NLS_NOM_CONC_CHLOR_URINE, "NLS_NOM_CONC_CHLOR_URINE"},
  {NLS_NOM_AWAY_CO2, "NLS_NOM_AWAY_CO2"},
  {NLS_NOM_FLOW_CO2_PROD_RESP, "NLS_NOM_FLOW_CO2_PROD_RESP"},
  {NLS_NOM_FLOW_CO2_PROD_RESP_TIDAL, "NLS_NOM_FLOW_CO2_PROD_RESP_TIDAL"},
  {NLS_NOM_TIME_PD_COAGULATION, "NLS_NOM_TIME_PD_COAGULATION"},
  {NLS_NOM_CONC_PCO2_ART_ADJ, "NLS_NOM_CONC_PCO2_ART_ADJ"},
  {NLS_NOM_CONC_PCO2_GEN_ADJ, "NLS_NOM_CONC_PCO2_GEN_ADJ"},
  {NLS_NOM_CONC_PCO2_CAP_ADJ, "NLS_NOM_CONC_PCO2_CAP_ADJ"},
  {NLS_NOM_CONC_PCO2_VEN_ADJ, "NLS_NOM_CONC_PCO2_VEN_ADJ"},
  {NLS_NOM_OUTPUT_CARD_CTS, "NLS_NOM_OUTPUT_CARD_CTS"},
  {NLS_NOM_OUTPUT_CARD_INDEX_CTS, "NLS_NOM_OUTPUT_CARD_INDEX_CTS"},
  {NLS_NOM_PRESS_AWAY_CTS_POS, "NLS_NOM_PRESS_AWAY_CTS_POS"},
  {NLS_NOM_TEMP_CORE, "NLS_NOM_TEMP_CORE"},
  {NLS_NOM_TEMP_CORE_GEN_1, "NLS_NOM_TEMP_CORE_GEN_1"},
  {NLS_NOM_TEMP_CORE_GEN_2, "NLS_NOM_TEMP_CORE_GEN_2"},
  {NLS_NOM_AWAY_CORR_COEF, "NLS_NOM_AWAY_CORR_COEF"},
  {NLS_NOM_COMPL_LUNG_PAV, "NLS_NOM_COMPL_LUNG_PAV"},
  {NLS_NOM_VOL_DELIV_PUMP_HEART_LUNG_CARDIOPLEGIA_MAIN, "NLS_NOM_VOL_DELIV_PUMP_HEART_LUNG_CARDIOPLEGIA_MAIN"},
  {NLS_NOM_TIME_PD_PUMP_HEART_LUNG_CARDIOPLEGIA_MAIN_SINCE_STOP, "NLS_NOM_TIME_PD_PUMP_HEART_LUNG_CARDIOPLEGIA_MAIN_SINCE_STOP"},
  {NLS_NOM_TIME_PD_PUMP_HEART_LUNG_CARDIOPLEGIA_MAIN_SINCE_START, "NLS_NOM_TIME_PD_PUMP_HEART_LUNG_CARDIOPLEGIA_MAIN_SINCE_START"},
  {NLS_NOM_TIME_PD_PLEGIA_PUMP_HEART_LUNG_CARDIOPLEGIA_MAIN, "NLS_NOM_TIME_PD_PLEGIA_PUMP_HEART_LUNG_CARDIOPLEGIA_MAIN"},
  {NLS_NOM_VOL_DELIV_TOTAL_PUMP_HEART_LUNG_CARDIOPLEGIA_MAIN, "NLS_NOM_VOL_DELIV_TOTAL_PUMP_HEART_LUNG_CARDIOPLEGIA_MAIN"},
  {NLS_NOM_CONC_CRP, "NLS_NOM_CONC_CRP"},
  {NLS_NOM_CONC_CREA_KIN_MM, "NLS_NOM_CONC_CREA_KIN_MM"},
  {NLS_NOM_CONC_CREA_KIN_MB, "NLS_NOM_CONC_CREA_KIN_MB"},
  {NLS_NOM_CONC_CREA_KIN_SER, "NLS_NOM_CONC_CREA_KIN_SER"},
  {NLS_NOM_CONC_CREA, "NLS_NOM_CONC_CREA"},
  {NLS_NOM_CONC_CREA_CLR, "NLS_NOM_CONC_CREA_CLR"},
  {NLS_NOM_VOL_DELIV_PUMP_HEART_LUNG_CARDIOPLEGIA_SLAVE, "NLS_NOM_VOL_DELIV_PUMP_HEART_LUNG_CARDIOPLEGIA_SLAVE"},
  {NLS_NOM_CEREB_STATE_INDEX, "NLS_NOM_CEREB_STATE_INDEX"},
  {NLS_NOM_TIME_PD_PUMP_HEART_LUNG_CARDIOPLEGIA_SLAVE_SINCE_STOP, "NLS_NOM_TIME_PD_PUMP_HEART_LUNG_CARDIOPLEGIA_SLAVE_SINCE_STOP"},
  {NLS_NOM_TIME_PD_PUMP_HEART_LUNG_CARDIOPLEGIA_SLAVE_SINCE_START, "NLS_NOM_TIME_PD_PUMP_HEART_LUNG_CARDIOPLEGIA_SLAVE_SINCE_START"},
  {NLS_NOM_TIME_PD_PLEGIA_PUMP_HEART_LUNG_CARDIOPLEGIA_SLAVE, "NLS_NOM_TIME_PD_PLEGIA_PUMP_HEART_LUNG_CARDIOPLEGIA_SLAVE"},
  {NLS_NOM_VOL_DELIV_TOTAL_PUMP_HEART_LUNG_CARDIOPLEGIA_SLAVE, "NLS_NOM_VOL_DELIV_TOTAL_PUMP_HEART_LUNG_CARDIOPLEGIA_SLAVE"},
  {NLS_NOM_VOL_URINE_COL, "NLS_NOM_VOL_URINE_COL"},
  {NLS_NOM_FLOW_URINE_PREV_24HR, "NLS_NOM_FLOW_URINE_PREV_24HR"},
  {NLS_NOM_VENT_VOL_AWAY_DEADSP, "NLS_NOM_VENT_VOL_AWAY_DEADSP"},
  {NLS_NOM_ECG_TIME_PD_QTc_DELTA, "NLS_NOM_ECG_TIME_PD_QTc_DELTA"},
  {NLS_NOM_CARD_BEAT_RATE_EXT, "NLS_NOM_CARD_BEAT_RATE_EXT"},
  {NLS_NOM_FLUID_DENS_URINE, "NLS_NOM_FLUID_DENS_URINE"},
  {NLS_NOM_SETT_TEMP, "NLS_NOM_SETT_TEMP"},
  {NLS_NOM_SAT_DIFF_O2_ART_VEN, "NLS_NOM_SAT_DIFF_O2_ART_VEN"},
  {NLS_NOM_PULS_OXIM_SAT_O2_DIFF, "NLS_NOM_PULS_OXIM_SAT_O2_DIFF"},
  {NLS_NOM_TEMP_DIFF, "NLS_NOM_TEMP_DIFF"},
  {NLS_NOM_CONC_BILI_DIRECT, "NLS_NOM_CONC_BILI_DIRECT"},
  {NLS_NOM_EEG_PWR_SPEC_DELTA_ABS_LEFT, "NLS_NOM_EEG_PWR_SPEC_DELTA_ABS_LEFT"},
  {NLS_NOM_EEG_PWR_SPEC_DELTA_ABS_RIGHT, "NLS_NOM_EEG_PWR_SPEC_DELTA_ABS_RIGHT"},
  {NLS_NOM_VENT_TIME_PD_PPV, "NLS_NOM_VENT_TIME_PD_PPV"},
  {NLS_NOM_COMPL_LUNG_DYN, "NLS_NOM_COMPL_LUNG_DYN"},
  {NLS_NOM_RES_AWAY_DYN, "NLS_NOM_RES_AWAY_DYN"},
  {NLS_NOM_EMG_ELEC_POTL_MUSCL, "NLS_NOM_EMG_ELEC_POTL_MUSCL"},
  {NLS_NOM_VOL_VENT_L_END_DIA, "NLS_NOM_VOL_VENT_L_END_DIA"},
  {NLS_NOM_VOL_VENT_L_END_DIA_INDEX, "NLS_NOM_VOL_VENT_L_END_DIA_INDEX"},
  {NLS_NOM_VOL_VENT_L_END_SYS, "NLS_NOM_VOL_VENT_L_END_SYS"},
  {NLS_NOM_VOL_VENT_L_END_SYS_INDEX, "NLS_NOM_VOL_VENT_L_END_SYS_INDEX"},
  {NLS_NOM_CONC_AWAY_AGENT_ET_SEC, "NLS_NOM_CONC_AWAY_AGENT_ET_SEC"},
  {NLS_NOM_SETT_CONC_AWAY_O2, "NLS_NOM_SETT_CONC_AWAY_O2"},
  {NLS_NOM_ELAS_LUNG_PAV, "NLS_NOM_ELAS_LUNG_PAV"},
  {NLS_NOM_ES_RATE, "NLS_NOM_ES_RATE"},
  {NLS_NOM_TEMP_ESOPH, "NLS_NOM_TEMP_ESOPH"},
  {NLS_NOM_FLOW_AWAY_EXP_MAX, "NLS_NOM_FLOW_AWAY_EXP_MAX"},
  {NLS_NOM_FLOW_AWAY_EXP_ET, "NLS_NOM_FLOW_AWAY_EXP_ET"},
  {NLS_NOM_RES_AWAY_EXP, "NLS_NOM_RES_AWAY_EXP"},
  {NLS_NOM_TIME_PD_EXP, "NLS_NOM_TIME_PD_EXP"},
  {NLS_NOM_VOL_AWAY_EXP_TIDAL, "NLS_NOM_VOL_AWAY_EXP_TIDAL"},
  {NLS_NOM_VOL_LUNG_WATER_EXTRA_VASC, "NLS_NOM_VOL_LUNG_WATER_EXTRA_VASC"},
  {NLS_NOM_VOL_LUNG_WATER_EXTRA_VASC_INDEX, "NLS_NOM_VOL_LUNG_WATER_EXTRA_VASC_INDEX"},
  {NLS_NOM_VOL_THERMO_EXTRA_VASC_INDEX, "NLS_NOM_VOL_THERMO_EXTRA_VASC_INDEX"},
  {NLS_NOM_PRESS_BLD_ART_FEMORAL, "NLS_NOM_PRESS_BLD_ART_FEMORAL"},
  {NLS_NOM_CONC_FE_GEN, "NLS_NOM_CONC_FE_GEN"},
  {NLS_NOM_CONC_HB_FETAL, "NLS_NOM_CONC_HB_FETAL"},
  {NLS_NOM_FRACT_EXCR_NA, "NLS_NOM_FRACT_EXCR_NA"},
  {NLS_NOM_VENT_CONC_AWAY_O2_INSP, "NLS_NOM_VENT_CONC_AWAY_O2_INSP"},
  {NLS_NOM_FREE_WATER_CLR, "NLS_NOM_FREE_WATER_CLR"},
  {NLS_NOM_FLOW_AWAY_DESFL, "NLS_NOM_FLOW_AWAY_DESFL"},
  {NLS_NOM_FLOW_AWAY_ENFL, "NLS_NOM_FLOW_AWAY_ENFL"},
  {NLS_NOM_FLOW_AWAY_HALOTH, "NLS_NOM_FLOW_AWAY_HALOTH"},
  {NLS_NOM_FLOW_AWAY_ISOFL, "NLS_NOM_FLOW_AWAY_ISOFL"},
  {NLS_NOM_FLOW_AWAY_SEVOFL, "NLS_NOM_FLOW_AWAY_SEVOFL"},
  {NLS_NOM_FLOW_AWAY_AGENT, "NLS_NOM_FLOW_AWAY_AGENT"},
  {NLS_NOM_FLOW_AWAY_AIR, "NLS_NOM_FLOW_AWAY_AIR"},
  {NLS_NOM_CONC_GGT, "NLS_NOM_CONC_GGT"},
  {NLS_NOM_CONC_AWAY_AGENT, "NLS_NOM_CONC_AWAY_AGENT"},
  {NLS_GASES_NAMES_CONC_AWAY_AGENT1, "NLS_GASES_NAMES_CONC_AWAY_AGENT1"},
  {NLS_GASES_NAMES_CONC_AWAY_AGENT2, "NLS_GASES_NAMES_CONC_AWAY_AGENT2"},
  {NLS_NOM_CONC_AWAY_DESFL, "NLS_NOM_CONC_AWAY_DESFL"},
  {NLS_NOM_CONC_AWAY_ENFL, "NLS_NOM_CONC_AWAY_ENFL"},
  {NLS_NOM_CONC_AWAY_HALOTH, "NLS_NOM_CONC_AWAY_HALOTH"},
  {NLS_NOM_CONC_AWAY_AGENT_INSP, "NLS_NOM_CONC_AWAY_AGENT_INSP"},
  {NLS_NOM_CONC_AWAY_ISOFL, "NLS_NOM_CONC_AWAY_ISOFL"},
  {NLS_EEG_NAMES_CHAN_FREQ1, "NLS_EEG_NAMES_CHAN_FREQ1"},
  {NLS_EEG_NAMES_CHAN_PCNT1, "NLS_EEG_NAMES_CHAN_PCNT1"},
  {NLS_EEG_NAMES_CHAN_FREQ2, "NLS_EEG_NAMES_CHAN_FREQ2"},
  {NLS_EEG_NAMES_CHAN_PCNT2, "NLS_EEG_NAMES_CHAN_PCNT2"},
  {NLS_NOM_COMPL_LUNG, "NLS_NOM_COMPL_LUNG"},
  {NLS_NOM_CONC_AWAY_N2, "NLS_NOM_CONC_AWAY_N2"},
  {NLS_NOM_CONC_AWAY_N2O, "NLS_NOM_CONC_AWAY_N2O"},
  {NLS_NOM_NUM_CALC_CONST, "NLS_NOM_NUM_CALC_CONST"},
  {NLS_NOM_NUM_CATHETER_CONST, "NLS_NOM_NUM_CATHETER_CONST"},
  {NLS_NOM_CONC_AWAY_O2, "NLS_NOM_CONC_AWAY_O2"},
  {NLS_NOM_PRESS_GEN_1, "NLS_NOM_PRESS_GEN_1"},
  {NLS_NOM_PRESS_GEN_2, "NLS_NOM_PRESS_GEN_2"},
  {NLS_NOM_PRESS_GEN_3, "NLS_NOM_PRESS_GEN_3"},
  {NLS_NOM_PRESS_GEN_4, "NLS_NOM_PRESS_GEN_4"},
  {NLS_NOM_PRESS_GEN_5, "NLS_NOM_PRESS_GEN_5"},
  {NLS_NOM_PRESS_GEN_6, "NLS_NOM_PRESS_GEN_6"},
  {NLS_NOM_PRESS_GEN_7, "NLS_NOM_PRESS_GEN_7"},
  {NLS_NOM_PRESS_GEN_8, "NLS_NOM_PRESS_GEN_8"},
  {NLS_NOM_CONC_AWAY_SEVOFL, "NLS_NOM_CONC_AWAY_SEVOFL"},
  {NLS_NOM_TEMP_GEN_1, "NLS_NOM_TEMP_GEN_1"},
  {NLS_NOM_TEMP_GEN_2, "NLS_NOM_TEMP_GEN_2"},
  {NLS_NOM_TEMP_GEN_3, "NLS_NOM_TEMP_GEN_3"},
  {NLS_NOM_TEMP_GEN_4, "NLS_NOM_TEMP_GEN_4"},
  {NLS_NOM_GAS_TCUT, "NLS_NOM_GAS_TCUT"},
  {NLS_NOM_AGE_GEST, "NLS_NOM_AGE_GEST"},
  {NLS_NOM_SCORE_GLAS_COMA, "NLS_NOM_SCORE_GLAS_COMA"},
  {NLS_NOM_FRACT_EJECT, "NLS_NOM_FRACT_EJECT"},
  {NLS_NOM_VOL_GLOBAL_END_DIA, "NLS_NOM_VOL_GLOBAL_END_DIA"},
  {NLS_NOM_VOL_GLOBAL_END_DIA_INDEX, "NLS_NOM_VOL_GLOBAL_END_DIA_INDEX"},
  {NLS_NOM_CONC_GLO_SER, "NLS_NOM_CONC_GLO_SER"},
  {NLS_NOM_CONC_GLU_GEN, "NLS_NOM_CONC_GLU_GEN"},
  {NLS_NOM_CONC_GLU_SER, "NLS_NOM_CONC_GLU_SER"},
  {NLS_NOM_CONC_GLU_URINE, "NLS_NOM_CONC_GLU_URINE"},
  {NLS_NOM_CONC_GOT, "NLS_NOM_CONC_GOT"},
  {NLS_NOM_CONC_GPT, "NLS_NOM_CONC_GPT"},
  {NLS_NOM_CONC_HCT_GEN, "NLS_NOM_CONC_HCT_GEN"},
  {NLS_NOM_CIRCUM_HEAD, "NLS_NOM_CIRCUM_HEAD"},
  {NLS_NOM_CARD_CONTRACT_HEATHER_INDEX, "NLS_NOM_CARD_CONTRACT_HEATHER_INDEX"},
  {NLS_NOM_ECG_CARD_BEAT_RATE, "NLS_NOM_ECG_CARD_BEAT_RATE"},
  {NLS_NOM_HEATING_PWR_TCUT_SENSOR, "NLS_NOM_HEATING_PWR_TCUT_SENSOR"},
  {NLS_NOM_CONC_HB_URINE, "NLS_NOM_CONC_HB_URINE"},
  {NLS_NOM_CONC_HB_ART, "NLS_NOM_CONC_HB_ART"},
  {NLS_NOM_CONC_HDL, "NLS_NOM_CONC_HDL"},
  {NLS_NOM_VENT_VOL_TIDAL_HFV, "NLS_NOM_VENT_VOL_TIDAL_HFV"},
  {NLS_NOM_COEF_GAS_TRAN, "NLS_NOM_COEF_GAS_TRAN"},
  {NLS_NOM_VENT_AMPL_HFV, "NLS_NOM_VENT_AMPL_HFV"},
  {NLS_NOM_FLOW_PUMP_HEART_LUNG_MAIN, "NLS_NOM_FLOW_PUMP_HEART_LUNG_MAIN"},
  {NLS_NOM_HUMID, "NLS_NOM_HUMID"},
  {NLS_NOM_CONC_HCO3_GEN, "NLS_NOM_CONC_HCO3_GEN"},
  {NLS_NOM_GRAD_PRESS_BLD_AORT_POS_MAX, "NLS_NOM_GRAD_PRESS_BLD_AORT_POS_MAX"},
  {NLS_NOM_TEMP_AXIL_INFRARED, "NLS_NOM_TEMP_AXIL_INFRARED"},
  {NLS_NOM_TEMP_CORE_INFRARED, "NLS_NOM_TEMP_CORE_INFRARED"},
  {NLS_NOM_TEMP_ORAL_INFRARED, "NLS_NOM_TEMP_ORAL_INFRARED"},
  {NLS_NOM_TEMP_RECT_INFRARED, "NLS_NOM_TEMP_RECT_INFRARED"},
  {NLS_NOM_TEMP_TYMP_INFRARED, "NLS_NOM_TEMP_TYMP_INFRARED"},
  {NLS_NOM_VOL_INFUS_ACTUAL_TOTAL, "NLS_NOM_VOL_INFUS_ACTUAL_TOTAL"},
  {NLS_NOM_TEMP_INJ, "NLS_NOM_TEMP_INJ"},
  {NLS_NOM_VOL_INJ, "NLS_NOM_VOL_INJ"},
  {NLS_NOM_PT_INTL_NORM_RATIO, "NLS_NOM_PT_INTL_NORM_RATIO"},
  {NLS_NOM_FLOW_AWAY_INSP_MAX, "NLS_NOM_FLOW_AWAY_INSP_MAX"},
  {NLS_NOM_RES_AWAY_INSP, "NLS_NOM_RES_AWAY_INSP"},
  {NLS_NOM_VENT_CONC_AWAY_AGENT_DELTA, "NLS_NOM_VENT_CONC_AWAY_AGENT_DELTA"},
  {NLS_NOM_VENT_CONC_AWAY_DESFL_DELTA, "NLS_NOM_VENT_CONC_AWAY_DESFL_DELTA"},
  {NLS_NOM_VENT_CONC_AWAY_ENFL_DELTA, "NLS_NOM_VENT_CONC_AWAY_ENFL_DELTA"},
  {NLS_NOM_VENT_CONC_AWAY_HALOTH_DELTA, "NLS_NOM_VENT_CONC_AWAY_HALOTH_DELTA"},
  {NLS_NOM_VENT_CONC_AWAY_ISOFL_DELTA, "NLS_NOM_VENT_CONC_AWAY_ISOFL_DELTA"},
  {NLS_NOM_VENT_CONC_AWAY_N2O_DELTA, "NLS_NOM_VENT_CONC_AWAY_N2O_DELTA"},
  {NLS_NOM_VENT_CONC_AWAY_SEVOFL_DELTA, "NLS_NOM_VENT_CONC_AWAY_SEVOFL_DELTA"},
  {NLS_NOM_VOL_MINUTE_AWAY_INSP_HFV, "NLS_NOM_VOL_MINUTE_AWAY_INSP_HFV"},
  {NLS_NOM_VENT_VOL_AWAY_INSP_TIDAL_HFV, "NLS_NOM_VENT_VOL_AWAY_INSP_TIDAL_HFV"},
  {NLS_NOM_CONC_AWAY_AGENT_INSP_SEC, "NLS_NOM_CONC_AWAY_AGENT_INSP_SEC"},
  {NLS_NOM_VOL_AWAY_INSP_TIDAL, "NLS_NOM_VOL_AWAY_INSP_TIDAL"},
  {NLS_NOM_VENT_MODE_MAND_INTERMIT, "NLS_NOM_VENT_MODE_MAND_INTERMIT"},
  {NLS_NOM_PRESS_INTRA_CRAN, "NLS_NOM_PRESS_INTRA_CRAN"},
  {NLS_NOM_PRESS_INTRA_CRAN_1, "NLS_NOM_PRESS_INTRA_CRAN_1"},
  {NLS_NOM_PRESS_INTRA_CRAN_2, "NLS_NOM_PRESS_INTRA_CRAN_2"},
  {NLS_NOM_VOL_BLD_INTRA_THOR, "NLS_NOM_VOL_BLD_INTRA_THOR"},
  {NLS_NOM_VOL_BLD_INTRA_THOR_INDEX, "NLS_NOM_VOL_BLD_INTRA_THOR_INDEX"},
  {NLS_NOM_PRESS_INTRA_UTERAL, "NLS_NOM_PRESS_INTRA_UTERAL"},
  {NLS_NOM_PRESS_AWAY_END_EXP_POS_INTRINSIC, "NLS_NOM_PRESS_AWAY_END_EXP_POS_INTRINSIC"},
  {NLS_NOM_CONC_CA_GEN, "NLS_NOM_CONC_CA_GEN"},
  {NLS_NOM_CONC_CA_GEN_NORM, "NLS_NOM_CONC_CA_GEN_NORM"},
  {NLS_NOM_CONC_MG_ION, "NLS_NOM_CONC_MG_ION"},
  {NLS_NOM_CONC_K_GEN, "NLS_NOM_CONC_K_GEN"},
  {NLS_NOM_CONC_K_SER, "NLS_NOM_CONC_K_SER"},
  {NLS_NOM_TIME_PD_KAOLIN_CEPHALINE, "NLS_NOM_TIME_PD_KAOLIN_CEPHALINE"},
  {NLS_NOM_PULS_OXIM_SAT_O2_ART_LEFT, "NLS_NOM_PULS_OXIM_SAT_O2_ART_LEFT"},
  {NLS_NOM_SAT_O2_LEFT, "NLS_NOM_SAT_O2_LEFT"},
  {NLS_NOM_PULS_OXIM_PERF_REL_LEFT, "NLS_NOM_PULS_OXIM_PERF_REL_LEFT"},
  {NLS_NOM_CONC_LDH, "NLS_NOM_CONC_LDH"},
  {NLS_NOM_CONC_LACT, "NLS_NOM_CONC_LACT"},
  {NLS_NOM_VENT_VOL_LEAK, "NLS_NOM_VENT_VOL_LEAK"},
  {NLS_NOM_PRESS_BLD_ATR_LEFT, "NLS_NOM_PRESS_BLD_ATR_LEFT"},
  {NLS_NOM_WK_CARD_LEFT, "NLS_NOM_WK_CARD_LEFT"},
  {NLS_NOM_WK_CARD_LEFT_INDEX, "NLS_NOM_WK_CARD_LEFT_INDEX"},
  {NLS_NOM_WK_LV_STROKE, "NLS_NOM_WK_LV_STROKE"},
  {NLS_NOM_WK_LV_STROKE_INDEX, "NLS_NOM_WK_LV_STROKE_INDEX"},
  {NLS_NOM_BIRTH_LENGTH, "NLS_NOM_BIRTH_LENGTH"},
  {NLS_NOM_INTENS_LIGHT, "NLS_NOM_INTENS_LIGHT"},
  {NLS_NOM_VOL_LVL_LIQUID_BOTTLE_AGENT, "NLS_NOM_VOL_LVL_LIQUID_BOTTLE_AGENT"},
  {NLS_NOM_VOL_LVL_LIQUID_BOTTLE_DESFL, "NLS_NOM_VOL_LVL_LIQUID_BOTTLE_DESFL"},
  {NLS_NOM_VOL_LVL_LIQUID_BOTTLE_ENFL, "NLS_NOM_VOL_LVL_LIQUID_BOTTLE_ENFL"},
  {NLS_NOM_VOL_LVL_LIQUID_BOTTLE_HALOTH, "NLS_NOM_VOL_LVL_LIQUID_BOTTLE_HALOTH"},
  {NLS_NOM_VOL_LVL_LIQUID_BOTTLE_ISOFL, "NLS_NOM_VOL_LVL_LIQUID_BOTTLE_ISOFL"},
  {NLS_NOM_VOL_LVL_LIQUID_BOTTLE_SEVOFL, "NLS_NOM_VOL_LVL_LIQUID_BOTTLE_SEVOFL"},
  {NLS_NOM_CONC_LDL, "NLS_NOM_CONC_LDL"},
  {NLS_NOM_VENT_VOL_LUNG_TRAPD, "NLS_NOM_VENT_VOL_LUNG_TRAPD"},
  {NLS_NOM_CONC_MG_SER, "NLS_NOM_CONC_MG_SER"},
  {NLS_NOM_VENT_VOL_MINUTE_AWAY_MAND, "NLS_NOM_VENT_VOL_MINUTE_AWAY_MAND"},
  {NLS_NOM_VENT_RESP_RATE_MAND, "NLS_NOM_VENT_RESP_RATE_MAND"},
  {NLS_NOM_VENT_VOL_TIDAL_MAND, "NLS_NOM_VENT_VOL_TIDAL_MAND"},
  {NLS_NOM_VENT_PRESS_AWAY_INSP_MAX, "NLS_NOM_VENT_PRESS_AWAY_INSP_MAX"},
  {NLS_NOM_EEG_FREQ_PWR_SPEC_CRTX_DOM_MEAN_LEFT, "NLS_NOM_EEG_FREQ_PWR_SPEC_CRTX_DOM_MEAN_LEFT"},
  {NLS_NOM_EEG_FREQ_PWR_SPEC_CRTX_DOM_MEAN_RIGHT, "NLS_NOM_EEG_FREQ_PWR_SPEC_CRTX_DOM_MEAN_RIGHT"},
  {NLS_NOM_PRESS_AWAY_INSP_MEAN, "NLS_NOM_PRESS_AWAY_INSP_MEAN"},
  {NLS_NOM_CONC_HB_CORP_MEAN, "NLS_NOM_CONC_HB_CORP_MEAN"},
  {NLS_NOM_HB_CORP_MEAN, "NLS_NOM_HB_CORP_MEAN"},
  {NLS_NOM_VOL_CORP_MEAN, "NLS_NOM_VOL_CORP_MEAN"},
  {NLS_NOM_EEG_FREQ_PWR_SPEC_CRTX_DOM_MEAN, "NLS_NOM_EEG_FREQ_PWR_SPEC_CRTX_DOM_MEAN"},
  {NLS_NOM_CONC_HB_MET_GEN, "NLS_NOM_CONC_HB_MET_GEN"},
  {NLS_NOM_CONC_AWAY_MAC, "NLS_NOM_CONC_AWAY_MAC"},
  {NLS_NOM_SAT_O2_VEN, "NLS_NOM_SAT_O2_VEN"},
  {NLS_NOM_EEG_FREQ_PWR_SPEC_CRTX_MEDIAN_LEFT, "NLS_NOM_EEG_FREQ_PWR_SPEC_CRTX_MEDIAN_LEFT"},
  {NLS_NOM_EEG_FREQ_PWR_SPEC_CRTX_MEDIAN_RIGHT, "NLS_NOM_EEG_FREQ_PWR_SPEC_CRTX_MEDIAN_RIGHT"},
  {NLS_NOM_FLOW_AWAY_N2O, "NLS_NOM_FLOW_AWAY_N2O"},
  {NLS_NOM_TEMP_NASOPH, "NLS_NOM_TEMP_NASOPH"},
  {NLS_NOM_CONC_NA_GEN, "NLS_NOM_CONC_NA_GEN"},
  {NLS_NOM_CONC_NA_SERUM, "NLS_NOM_CONC_NA_SERUM"},
  {NLS_NOM_CONC_NA_URINE, "NLS_NOM_CONC_NA_URINE"},
  {NLS_NOM_PRESS_AWAY_NEG_MAX, "NLS_NOM_PRESS_AWAY_NEG_MAX"},
  {NLS_NOM_NSLOSS, "NLS_NOM_NSLOSS"},
  {NLS_NOM_PRESS_BLD_NONINV, "NLS_NOM_PRESS_BLD_NONINV"},
  {NLS_NOM_VENT_CONC_AWAY_O2_CIRCUIT, "NLS_NOM_VENT_CONC_AWAY_O2_CIRCUIT"},
  {NLS_NOM_SAT_O2, "NLS_NOM_SAT_O2"},
  {NLS_NOM_SAT_O2_TISSUE, "NLS_NOM_SAT_O2_TISSUE"},
  {NLS_NOM_VENT_PRESS_OCCL, "NLS_NOM_VENT_PRESS_OCCL"},
  {NLS_NOM_CREA_OSM, "NLS_NOM_CREA_OSM"},
  {NLS_NOM_C20_PER_C_INDEX, "NLS_NOM_C20_PER_C_INDEX"},
  {NLS_NOM_PULS_OXIM_SAT_O2_PRE_DUCTAL, "NLS_NOM_PULS_OXIM_SAT_O2_PRE_DUCTAL"},
  {NLS_NOM_PULS_OXIM_SAT_O2_POST_DUCTAL, "NLS_NOM_PULS_OXIM_SAT_O2_POST_DUCTAL"},
  {NLS_NOM_SAT_O2_DELIVER, "NLS_NOM_SAT_O2_DELIVER"},
  {NLS_NOM_SAT_O2_DELIVER_INDEX, "NLS_NOM_SAT_O2_DELIVER_INDEX"},
  {NLS_NOM_FLOW_AWAY_O2, "NLS_NOM_FLOW_AWAY_O2"},
  {NLS_NOM_SAT_O2_CONSUMP_INDEX, "NLS_NOM_SAT_O2_CONSUMP_INDEX"},
  {NLS_NOM_SAT_O2_CONSUMP, "NLS_NOM_SAT_O2_CONSUMP"},
  {NLS_NOM_EXTRACT_O2_INDEX, "NLS_NOM_EXTRACT_O2_INDEX"},
  {NLS_NOM_RATIO_SAT_O2_CONSUMP_DELIVER, "NLS_NOM_RATIO_SAT_O2_CONSUMP_DELIVER"},
  {NLS_NOM_SAT_O2_ART, "NLS_NOM_SAT_O2_ART"},
  {NLS_NOM_RATIO_PaO2_FIO2, "NLS_NOM_RATIO_PaO2_FIO2"},
  {NLS_NOM_VENT_ACTIVE, "NLS_NOM_VENT_ACTIVE"},
  {NLS_NOM_CONC_PCO2_GEN, "NLS_NOM_CONC_PCO2_GEN"},
  {NLS_NOM_CONC_PCO2_CAP, "NLS_NOM_CONC_PCO2_CAP"},
  {NLS_NOM_CONC_PCO2_VEN, "NLS_NOM_CONC_PCO2_VEN"},
  {NLS_NOM_CONC_PO2_ART, "NLS_NOM_CONC_PO2_ART"},
  {NLS_NOM_CONC_PO2_CAP, "NLS_NOM_CONC_PO2_CAP"},
  {NLS_NOM_VENT_AWAY_CO2_EXP, "NLS_NOM_VENT_AWAY_CO2_EXP"},
  {NLS_NOM_CONC_PO2_VEN, "NLS_NOM_CONC_PO2_VEN"},
  {NLS_NOM_CONC_PO2_GEN, "NLS_NOM_CONC_PO2_GEN"},
  {NLS_NOM_CONC_PCO2_ART, "NLS_NOM_CONC_PCO2_ART"},
  {NLS_NOM_TIME_PD_PTT, "NLS_NOM_TIME_PD_PTT"},
  {NLS_NOM_PAT_HEIGHT, "NLS_NOM_PAT_HEIGHT"},
  {NLS_NOM_TEMP_BODY, "NLS_NOM_TEMP_BODY"},
  {NLS_NOM_PAT_WEIGHT, "NLS_NOM_PAT_WEIGHT"},
  {NLS_NOM_TIME_PD_PT_PE, "NLS_NOM_TIME_PD_PT_PE"},
  {NLS_NOM_EEG_FREQ_PWR_SPEC_CRTX_PEAK, "NLS_NOM_EEG_FREQ_PWR_SPEC_CRTX_PEAK"},
  {NLS_NOM_RATIO_ART_VEN_SHUNT, "NLS_NOM_RATIO_ART_VEN_SHUNT"},
  {NLS_NOM_PULS_OXIM_PERF_REL, "NLS_NOM_PULS_OXIM_PERF_REL"},
  {NLS_NOM_CONC_PH_ART, "NLS_NOM_CONC_PH_ART"},
  {NLS_NOM_CONC_PH_GEN, "NLS_NOM_CONC_PH_GEN"},
  {NLS_NOM_CONC_PH_VEN, "NLS_NOM_CONC_PH_VEN"},
  {NLS_NOM_CONC_PH_CAP, "NLS_NOM_CONC_PH_CAP"},
  {NLS_NOM_CONC_PH_URINE, "NLS_NOM_CONC_PH_URINE"},
  {NLS_NOM_CONC_P_SER, "NLS_NOM_CONC_P_SER"},
  {NLS_NOM_PLASMA_OSM, "NLS_NOM_PLASMA_OSM"},
  {NLS_NOM_PRESS_RESP_PLAT, "NLS_NOM_PRESS_RESP_PLAT"},
  {NLS_NOM_TIME_PD_RESP_PLAT, "NLS_NOM_TIME_PD_RESP_PLAT"},
  {NLS_NOM_PLTS_CNT, "NLS_NOM_PLTS_CNT"},
  {NLS_NOM_FLOW_PUMP_HEART_LUNG_CARDIOPLEGIA_MAIN, "NLS_NOM_FLOW_PUMP_HEART_LUNG_CARDIOPLEGIA_MAIN"},
  {NLS_NOM_PULS_OXIM_PLETH_GAIN, "NLS_NOM_PULS_OXIM_PLETH_GAIN"},
  {NLS_NOM_VENT_PRESS_AWAY_END_EXP_POS, "NLS_NOM_VENT_PRESS_AWAY_END_EXP_POS"},
  {NLS_NOM_PRESS_AWAY_INSP_MAX, "NLS_NOM_PRESS_AWAY_INSP_MAX"},
  {NLS_NOM_PTC_CNT, "NLS_NOM_PTC_CNT"},
  {NLS_NOM_HEATING_PWR_INCUBATOR, "NLS_NOM_HEATING_PWR_INCUBATOR"},
  {NLS_NOM_EEG_FREQ_PWR_SPEC_CRTX_PEAK_LEFT, "NLS_NOM_EEG_FREQ_PWR_SPEC_CRTX_PEAK_LEFT"},
  {NLS_NOM_EEG_FREQ_PWR_SPEC_CRTX_PEAK_RIGHT, "NLS_NOM_EEG_FREQ_PWR_SPEC_CRTX_PEAK_RIGHT"},
  {NLS_NOM_TEMP_AXIL_PRED, "NLS_NOM_TEMP_AXIL_PRED"},
  {NLS_NOM_TEMP_ORAL_PRED, "NLS_NOM_TEMP_ORAL_PRED"},
  {NLS_NOM_TEMP_RECT_PRED, "NLS_NOM_TEMP_RECT_PRED"},
  {NLS_NOM_ECG_V_P_C_CNT, "NLS_NOM_ECG_V_P_C_CNT"},
  {NLS_NOM_VENT_PRESS_AWAY_PV, "NLS_NOM_VENT_PRESS_AWAY_PV"},
  {NLS_NOM_CONC_PCT, "NLS_NOM_CONC_PCT"},
  {NLS_NOM_TIME_PD_PT, "NLS_NOM_TIME_PD_PT"},
  {NLS_NOM_RATIO_TIME_PD_PT, "NLS_NOM_RATIO_TIME_PD_PT"},
  {NLS_NOM_PRESS_BLD_ART_PULM, "NLS_NOM_PRESS_BLD_ART_PULM"},
  {NLS_NOM_PRESS_BLD_ART_PULM_WEDGE, "NLS_NOM_PRESS_BLD_ART_PULM_WEDGE"},
  {NLS_NOM_PERM_VASC_PULM_INDEX, "NLS_NOM_PERM_VASC_PULM_INDEX"},
  {NLS_NOM_RES_VASC_PULM, "NLS_NOM_RES_VASC_PULM"},
  {NLS_NOM_RES_VASC_PULM_INDEX, "NLS_NOM_RES_VASC_PULM_INDEX"},
  {NLS_PRESS_NAMES_PULSE_FROM_ABP, "NLS_PRESS_NAMES_PULSE_FROM_ABP"},
  {NLS_PRESS_NAMES_PULSE_FROM_AO, "NLS_PRESS_NAMES_PULSE_FROM_AO"},
  {NLS_PRESS_NAMES_PULSE_FROM_ART, "NLS_PRESS_NAMES_PULSE_FROM_ART"},
  {NLS_PRESS_NAMES_PULSE_FROM_BAP, "NLS_PRESS_NAMES_PULSE_FROM_BAP"},
  {NLS_PRESS_NAMES_PULSE_FROM_CVP, "NLS_PRESS_NAMES_PULSE_FROM_CVP"},
  {NLS_PRESS_NAMES_PULSE_FROM_FAP, "NLS_PRESS_NAMES_PULSE_FROM_FAP"},
  {NLS_PRESS_NAMES_PULSE_FROM_IC1, "NLS_PRESS_NAMES_PULSE_FROM_IC1"},
  {NLS_PRESS_NAMES_PULSE_FROM_IC2, "NLS_PRESS_NAMES_PULSE_FROM_IC2"},
  {NLS_PRESS_NAMES_PULSE_FROM_ICP, "NLS_PRESS_NAMES_PULSE_FROM_ICP"},
  {NLS_PRESS_NAMES_PULSE_FROM_LAP, "NLS_PRESS_NAMES_PULSE_FROM_LAP"},
  {NLS_PRESS_NAMES_PULSE_FROM_P1, "NLS_PRESS_NAMES_PULSE_FROM_P1"},
  {NLS_PRESS_NAMES_PULSE_FROM_P2, "NLS_PRESS_NAMES_PULSE_FROM_P2"},
  {NLS_PRESS_NAMES_PULSE_FROM_P3, "NLS_PRESS_NAMES_PULSE_FROM_P3"},
  {NLS_PRESS_NAMES_PULSE_FROM_P4, "NLS_PRESS_NAMES_PULSE_FROM_P4"},
  {NLS_PRESS_NAMES_PULSE_FROM_PAP, "NLS_PRESS_NAMES_PULSE_FROM_PAP"},
  {NLS_PRESS_NAMES_PULSE_FROM_RAP, "NLS_PRESS_NAMES_PULSE_FROM_RAP"},
  {NLS_PRESS_NAMES_PULSE_FROM_UAP, "NLS_PRESS_NAMES_PULSE_FROM_UAP"},
  {NLS_PRESS_NAMES_PULSE_FROM_P, "NLS_PRESS_NAMES_PULSE_FROM_P"},
  {NLS_PRESS_NAMES_PULSE_FROM_UVP, "NLS_PRESS_NAMES_PULSE_FROM_UVP"},
  {NLS_NOM_PRESS_BLD_NONINV_PULS_RATE, "NLS_NOM_PRESS_BLD_NONINV_PULS_RATE"},
  {NLS_NOM_PULS_OXIM_PULS_RATE_TELE, "NLS_NOM_PULS_OXIM_PULS_RATE_TELE"},
  {NLS_NOM_PULS_PRESS_VAR, "NLS_NOM_PULS_PRESS_VAR"},
  {NLS_NOM_PULS_RATE, "NLS_NOM_PULS_RATE"},
  {NLS_NOM_PULS_OXIM_PULS_RATE, "NLS_NOM_PULS_OXIM_PULS_RATE"},
  {NLS_SPO2_NAMES_PULS_OXIM_PULS_RATE_LEFT, "NLS_SPO2_NAMES_PULS_OXIM_PULS_RATE_LEFT"},
  {NLS_SPO2_NAMES_PULS_OXIM_PULS_RATE_POST_DUCTAL, "NLS_SPO2_NAMES_PULS_OXIM_PULS_RATE_POST_DUCTAL"},
  {NLS_SPO2_NAMES_PULS_OXIM_PULS_RATE_PRE_DUCTAL, "NLS_SPO2_NAMES_PULS_OXIM_PULS_RATE_PRE_DUCTAL"},
  {NLS_SPO2_NAMES_PULS_OXIM_PULS_RATE_RIGHT, "NLS_SPO2_NAMES_PULS_OXIM_PULS_RATE_RIGHT"},
  {NLS_NOM_TIME_PD_PUPIL_REACT_LEFT, "NLS_NOM_TIME_PD_PUPIL_REACT_LEFT"},
  {NLS_NOM_TIME_PD_PUPIL_REACT_RIGHT, "NLS_NOM_TIME_PD_PUPIL_REACT_RIGHT"},
  {NLS_NOM_ECG_TIME_PD_QT_GL, "NLS_NOM_ECG_TIME_PD_QT_GL"},
  {NLS_NOM_ECG_TIME_PD_QT_BASELINE_HEART_RATE, "NLS_NOM_ECG_TIME_PD_QT_BASELINE_HEART_RATE"},
  {NLS_NOM_ECG_TIME_PD_QT_HEART_RATE, "NLS_NOM_ECG_TIME_PD_QT_HEART_RATE"},
  {NLS_NOM_ECG_TIME_PD_QTc, "NLS_NOM_ECG_TIME_PD_QTc"},
  {NLS_NOM_PULS_OXIM_SAT_O2_ART_RIGHT, "NLS_NOM_PULS_OXIM_SAT_O2_ART_RIGHT"},
  {NLS_NOM_SAT_O2_RIGHT, "NLS_NOM_SAT_O2_RIGHT"},
  {NLS_NOM_PULS_OXIM_PERF_REL_RIGHT, "NLS_NOM_PULS_OXIM_PERF_REL_RIGHT"},
  {NLS_NOM_BREATH_RAPID_SHALLOW_INDEX, "NLS_NOM_BREATH_RAPID_SHALLOW_INDEX"},
  {NLS_NOM_RATIO_AWAY_RATE_VOL_AWAY, "NLS_NOM_RATIO_AWAY_RATE_VOL_AWAY"},
  {NLS_NOM_RATIO_CONC_BLD_UREA_NITROGEN_CREA_CALC, "NLS_NOM_RATIO_CONC_BLD_UREA_NITROGEN_CREA_CALC"},
  {NLS_NOM_RATIO_AWAY_DEADSP_TIDAL, "NLS_NOM_RATIO_AWAY_DEADSP_TIDAL"},
  {NLS_NOM_RATIO_CONC_URINE_CREA_CALC, "NLS_NOM_RATIO_CONC_URINE_CREA_CALC"},
  {NLS_NOM_TEMP_RECT, "NLS_NOM_TEMP_RECT"},
  {NLS_NOM_RB_CNT, "NLS_NOM_RB_CNT"},
  {NLS_NOM_VENT_CONC_AWAY_O2_DELTA, "NLS_NOM_VENT_CONC_AWAY_O2_DELTA"},
  {NLS_NOM_VENT_VOL_AWAY_DEADSP_REL, "NLS_NOM_VENT_VOL_AWAY_DEADSP_REL"},
  {NLS_NOM_PULS_OXIM_PERF_REL_PRE_DUCTAL, "NLS_NOM_PULS_OXIM_PERF_REL_PRE_DUCTAL"},
  {NLS_NOM_PULS_OXIM_PERF_REL_POST_DUCTAL, "NLS_NOM_PULS_OXIM_PERF_REL_POST_DUCTAL"},
  {NLS_NOM_TIME_PD_EVOK_REMAIN, "NLS_NOM_TIME_PD_EVOK_REMAIN"},
  {NLS_NOM_VENT_PRESS_RESP_PLAT, "NLS_NOM_VENT_PRESS_RESP_PLAT"},
  {NLS_NOM_RESP_RATE, "NLS_NOM_RESP_RATE"},
  {NLS_NOM_AWAY_RESP_RATE_SPIRO, "NLS_NOM_AWAY_RESP_RATE_SPIRO"},
  {NLS_NOM_RET_CNT, "NLS_NOM_RET_CNT"},
  {NLS_NOM_PRESS_BLD_ATR_RIGHT, "NLS_NOM_PRESS_BLD_ATR_RIGHT"},
  {NLS_NOM_WK_CARD_RIGHT, "NLS_NOM_WK_CARD_RIGHT"},
  {NLS_NOM_WK_CARD_RIGHT_INDEX, "NLS_NOM_WK_CARD_RIGHT_INDEX"},
  {NLS_NOM_RIGHT_HEART_FRACT_EJECT, "NLS_NOM_RIGHT_HEART_FRACT_EJECT"},
  {NLS_NOM_WK_RV_STROKE, "NLS_NOM_WK_RV_STROKE"},
  {NLS_NOM_WK_RV_STROKE_INDEX, "NLS_NOM_WK_RV_STROKE_INDEX"},
  {NLS_NOM_SHUNT_RIGHT_LEFT, "NLS_NOM_SHUNT_RIGHT_LEFT"},
  {NLS_NOM_VENT_TIME_PD_RAMP, "NLS_NOM_VENT_TIME_PD_RAMP"},
  {NLS_NOM_RES_AWAY_PAV, "NLS_NOM_RES_AWAY_PAV"},
  {NLS_NOM_BREATH_RAPID_SHALLOW_INDEX_NORM, "NLS_NOM_BREATH_RAPID_SHALLOW_INDEX_NORM"},
  {NLS_NOM_RES_AWAY_EXP_TOTAL, "NLS_NOM_RES_AWAY_EXP_TOTAL"},
  {NLS_NOM_EEG_ELEC_POTL_CRTX_GAIN_LEFT, "NLS_NOM_EEG_ELEC_POTL_CRTX_GAIN_LEFT"},
  {NLS_NOM_EEG_ELEC_POTL_CRTX_GAIN_RIGHT, "NLS_NOM_EEG_ELEC_POTL_CRTX_GAIN_RIGHT"},
  {NLS_NOM_EEG_FREQ_PWR_SPEC_CRTX_SPECTRAL_EDGE_LEFT, "NLS_NOM_EEG_FREQ_PWR_SPEC_CRTX_SPECTRAL_EDGE_LEFT"},
  {NLS_NOM_EEG_FREQ_PWR_SPEC_CRTX_SPECTRAL_EDGE_RIGHT, "NLS_NOM_EEG_FREQ_PWR_SPEC_CRTX_SPECTRAL_EDGE_RIGHT"},
  {NLS_NOM_TEMP_TCUT_SENSOR, "NLS_NOM_TEMP_TCUT_SENSOR"},
  {NLS_NOM_CONC_CREA_SER, "NLS_NOM_CONC_CREA_SER"},
  {NLS_NOM_UREA_SER, "NLS_NOM_UREA_SER"},
  {NLS_NOM_SETT_VENT_RESP_RATE, "NLS_NOM_SETT_VENT_RESP_RATE"},
  {NLS_NOM_SETT_AWAY_RESP_RATE, "NLS_NOM_SETT_AWAY_RESP_RATE"},
  {NLS_NOM_SETT_VENT_TIME_PD_RAMP_AL, "NLS_NOM_SETT_VENT_TIME_PD_RAMP_AL"},
  {NLS_NOM_SETT_VENT_CONC_AWAY_O2_INSP_APNEA, "NLS_NOM_SETT_VENT_CONC_AWAY_O2_INSP_APNEA"},
  {NLS_NOM_SETT_FLOW_AWAY_INSP_APNEA, "NLS_NOM_SETT_FLOW_AWAY_INSP_APNEA"},
  {NLS_NOM_SETT_VENT_PRESS_AWAY_PV_APNEA, "NLS_NOM_SETT_VENT_PRESS_AWAY_PV_APNEA"},
  {NLS_NOM_SETT_RATIO_IE_EXP_PV_APNEA, "NLS_NOM_SETT_RATIO_IE_EXP_PV_APNEA"},
  {NLS_NOM_SETT_VENT_PRESS_AWAY_MAX_PV_APNEA, "NLS_NOM_SETT_VENT_PRESS_AWAY_MAX_PV_APNEA"},
  {NLS_NOM_SETT_RATIO_IE_INSP_PV_APNEA, "NLS_NOM_SETT_RATIO_IE_INSP_PV_APNEA"},
  {NLS_NOM_SETT_VENT_TIME_PD_INSP_PV_APNEA, "NLS_NOM_SETT_VENT_TIME_PD_INSP_PV_APNEA"},
  {NLS_NOM_SETT_VENT_CONC_AWAY_O2_INSP_PV_APNEA, "NLS_NOM_SETT_VENT_CONC_AWAY_O2_INSP_PV_APNEA"},
  {NLS_NOM_SETT_VENT_RESP_RATE_PV_APNEA, "NLS_NOM_SETT_VENT_RESP_RATE_PV_APNEA"},
  {NLS_NOM_SETT_AWAY_RESP_RATE_APNEA, "NLS_NOM_SETT_AWAY_RESP_RATE_APNEA"},
  {NLS_NOM_SETT_VOL_AWAY_TIDAL_APNEA, "NLS_NOM_SETT_VOL_AWAY_TIDAL_APNEA"},
  {NLS_NOM_SETT_APNEA_ALARM_DELAY, "NLS_NOM_SETT_APNEA_ALARM_DELAY"},
  {NLS_NOM_SETT_VOL_AWAY_TIDAL_APPLIED, "NLS_NOM_SETT_VOL_AWAY_TIDAL_APPLIED"},
  {NLS_NOM_SETT_SENS_LEVEL, "NLS_NOM_SETT_SENS_LEVEL"},
  {NLS_NOM_SETT_VENT_AWAY_FLOW_BACKGROUND, "NLS_NOM_SETT_VENT_AWAY_FLOW_BACKGROUND"},
  {NLS_NOM_SETT_PRESS_AWAY_CTS_POS, "NLS_NOM_SETT_PRESS_AWAY_CTS_POS"},
  {NLS_NOM_SETT_VENT_MODE_MAND_CTS_ONOFF, "NLS_NOM_SETT_VENT_MODE_MAND_CTS_ONOFF"},
  {NLS_NOM_SETT_TIME_PD_MSMT, "NLS_NOM_SETT_TIME_PD_MSMT"},
  {NLS_NOM_SETT_VENT_MODE_SIGH, "NLS_NOM_SETT_VENT_MODE_SIGH"},
  {NLS_NOM_SETT_VENT_TIME_PD_EXP, "NLS_NOM_SETT_VENT_TIME_PD_EXP"},
  {NLS_NOM_SETT_FLOW_AWAY_EXP, "NLS_NOM_SETT_FLOW_AWAY_EXP"},
  {NLS_NOM_SETT_VENT_FLOW, "NLS_NOM_SETT_VENT_FLOW"},
  {NLS_NOM_SETT_VENT_FLOW_AWAY_ASSIST, "NLS_NOM_SETT_VENT_FLOW_AWAY_ASSIST"},
  {NLS_NOM_SETT_VENT_FLOW_INSP_TRIG, "NLS_NOM_SETT_VENT_FLOW_INSP_TRIG"},
  {NLS_NOM_SETT_VENT_AWAY_FLOW_BASE, "NLS_NOM_SETT_VENT_AWAY_FLOW_BASE"},
  {NLS_NOM_SETT_VENT_AWAY_FLOW_SENSE, "NLS_NOM_SETT_VENT_AWAY_FLOW_SENSE"},
  {NLS_NOM_SETT_FLOW_AWAY_N2O, "NLS_NOM_SETT_FLOW_AWAY_N2O"},
  {NLS_NOM_SETT_FLOW_AWAY_O2, "NLS_NOM_SETT_FLOW_AWAY_O2"},
  {NLS_NOM_SETT_VENT_O2_PROBE_POSN, "NLS_NOM_SETT_VENT_O2_PROBE_POSN"},
  {NLS_NOM_SETT_VENT_GAS_PROBE_POSN, "NLS_NOM_SETT_VENT_GAS_PROBE_POSN"},
  {NLS_NOM_SETT_HFV_AMPL, "NLS_NOM_SETT_HFV_AMPL"},
  {NLS_NOM_SETT_AWAY_RESP_RATE_HFV, "NLS_NOM_SETT_AWAY_RESP_RATE_HFV"},
  {NLS_NOM_SETT_FLOW_AWAY_HFV, "NLS_NOM_SETT_FLOW_AWAY_HFV"},
  {NLS_NOM_SETT_FLOW_FLUID_PUMP, "NLS_NOM_SETT_FLOW_FLUID_PUMP"},
  {NLS_NOM_SETT_FLOW_AWAY_INSP, "NLS_NOM_SETT_FLOW_AWAY_INSP"},
  {NLS_NOM_SETT_VENT_TIME_PD_INSP, "NLS_NOM_SETT_VENT_TIME_PD_INSP"},
  {NLS_NOM_SETT_VENT_CONC_AWAY_O2_INSP, "NLS_NOM_SETT_VENT_CONC_AWAY_O2_INSP"},
  {NLS_NOM_SETT_VOL_AWAY_INSP_TIDAL, "NLS_NOM_SETT_VOL_AWAY_INSP_TIDAL"},
  {NLS_NOM_SETT_PRESS_AWAY_MIN, "NLS_NOM_SETT_PRESS_AWAY_MIN"},
  {NLS_NOM_SETT_PRESS_AWAY_INSP_MAX_LIMIT_LO, "NLS_NOM_SETT_PRESS_AWAY_INSP_MAX_LIMIT_LO"},
  {NLS_NOM_SETT_VENT_VOL_MINUTE_AWAY_MAND, "NLS_NOM_SETT_VENT_VOL_MINUTE_AWAY_MAND"},
  {NLS_NOM_SETT_VENT_PRESS_AWAY_INSP_MAX, "NLS_NOM_SETT_VENT_PRESS_AWAY_INSP_MAX"},
  {NLS_NOM_SETT_VOL_MINUTE_AWAY, "NLS_NOM_SETT_VOL_MINUTE_AWAY"},
  {NLS_NOM_SETT_VOL_MINUTE_ALARM_DELAY, "NLS_NOM_SETT_VOL_MINUTE_ALARM_DELAY"},
  {NLS_NOM_SETT_VENT_SIGH_MULT_RATE, "NLS_NOM_SETT_VENT_SIGH_MULT_RATE"},
  {NLS_NOM_SETT_VENT_O2_CAL_MODE, "NLS_NOM_SETT_VENT_O2_CAL_MODE"},
  {NLS_NOM_SETT_VENT_ANALY_CONC_GAS_O2_MODE, "NLS_NOM_SETT_VENT_ANALY_CONC_GAS_O2_MODE"},
  {NLS_NOM_SETT_VENT_RESP_RATE_LIMIT_HI_PANT, "NLS_NOM_SETT_VENT_RESP_RATE_LIMIT_HI_PANT"},
  {NLS_NOM_SETT_VENT_TIME_PD_EXP_APRV, "NLS_NOM_SETT_VENT_TIME_PD_EXP_APRV"},
  {NLS_NOM_SETT_VENT_TIME_PD_INSP_APRV, "NLS_NOM_SETT_VENT_TIME_PD_INSP_APRV"},
  {NLS_NOM_SETT_VENT_PRESS_AWAY_EXP_APRV, "NLS_NOM_SETT_VENT_PRESS_AWAY_EXP_APRV"},
  {NLS_NOM_SETT_VENT_PRESS_AWAY_INSP_APRV, "NLS_NOM_SETT_VENT_PRESS_AWAY_INSP_APRV"},
  {NLS_NOM_SETT_FLOW_AWAY_INSP_MAX, "NLS_NOM_SETT_FLOW_AWAY_INSP_MAX"},
  {NLS_NOM_SETT_VENT_PRESS_AWAY_END_EXP_POS, "NLS_NOM_SETT_VENT_PRESS_AWAY_END_EXP_POS"},
  {NLS_NOM_SETT_TIME_PD_RESP_PLAT, "NLS_NOM_SETT_TIME_PD_RESP_PLAT"},
  {NLS_NOM_SETT_PRESS_AWAY_INSP_MAX, "NLS_NOM_SETT_PRESS_AWAY_INSP_MAX"},
  {NLS_NOM_SETT_URINE_BAL_PD, "NLS_NOM_SETT_URINE_BAL_PD"},
  {NLS_NOM_SETT_EVOK_CHARGE, "NLS_NOM_SETT_EVOK_CHARGE"},
  {NLS_NOM_SETT_EVOK_CURR, "NLS_NOM_SETT_EVOK_CURR"},
  {NLS_NOM_SETT_TIME_PD_EVOK, "NLS_NOM_SETT_TIME_PD_EVOK"},
  {NLS_NOM_SETT_TIME_PD_TRAIN_OF_FOUR, "NLS_NOM_SETT_TIME_PD_TRAIN_OF_FOUR"},
  {NLS_NOM_SETT_VENT_AWAY_PRESS_RATE_INCREASE, "NLS_NOM_SETT_VENT_AWAY_PRESS_RATE_INCREASE"},
  {NLS_NOM_SETT_VENT_PRESS_AWAY_END_EXP_POS_INTERMIT, "NLS_NOM_SETT_VENT_PRESS_AWAY_END_EXP_POS_INTERMIT"},
  {NLS_NOM_SETT_VENT_PRESS_AWAY_PV, "NLS_NOM_SETT_VENT_PRESS_AWAY_PV"},
  {NLS_NOM_SETT_PRESS_AWAY_INSP, "NLS_NOM_SETT_PRESS_AWAY_INSP"},
  {NLS_NOM_SETT_RATIO_IE_EXP_PV, "NLS_NOM_SETT_RATIO_IE_EXP_PV"},
  {NLS_NOM_SETT_RATIO_IE_INSP_PV, "NLS_NOM_SETT_RATIO_IE_INSP_PV"},
  {NLS_NOM_SETT_VENT_TIME_PD_INSP_PV, "NLS_NOM_SETT_VENT_TIME_PD_INSP_PV"},
  {NLS_NOM_SETT_VENT_SIGH_RATE, "NLS_NOM_SETT_VENT_SIGH_RATE"},
  {NLS_NOM_SETT_VENT_VOL_TIDAL_SIGH, "NLS_NOM_SETT_VENT_VOL_TIDAL_SIGH"},
  {NLS_NOM_SETT_VENT_O2_SUCTION_MODE, "NLS_NOM_SETT_VENT_O2_SUCTION_MODE"},
  {NLS_NOM_SETT_VENT_MODE_SYNC_MAND_INTERMIT, "NLS_NOM_SETT_VENT_MODE_SYNC_MAND_INTERMIT"},
  {NLS_NOM_SETT_VOL_AWAY_TIDAL, "NLS_NOM_SETT_VOL_AWAY_TIDAL"},
  {NLS_NOM_SETT_FLOW_AWAY_AIR, "NLS_NOM_SETT_FLOW_AWAY_AIR"},
  {NLS_NOM_SETT_FLOW_AWAY_TOT, "NLS_NOM_SETT_FLOW_AWAY_TOT"},
  {NLS_NOM_SETT_VENT_VOL_LUNG_TRAPD, "NLS_NOM_SETT_VENT_VOL_LUNG_TRAPD"},
  {NLS_NOM_SETT_CONC_AWAY_DESFL, "NLS_NOM_SETT_CONC_AWAY_DESFL"},
  {NLS_NOM_SETT_CONC_AWAY_ENFL, "NLS_NOM_SETT_CONC_AWAY_ENFL"},
  {NLS_NOM_SETT_CONC_AWAY_HALOTH, "NLS_NOM_SETT_CONC_AWAY_HALOTH"},
  {NLS_NOM_SETT_CONC_AWAY_ISOFL, "NLS_NOM_SETT_CONC_AWAY_ISOFL"},
  {NLS_NOM_SETT_CONC_AWAY_SEVOFL, "NLS_NOM_SETT_CONC_AWAY_SEVOFL"},
  {NLS_NOM_SETT_FLOW_AWAY_AGENT, "NLS_NOM_SETT_FLOW_AWAY_AGENT"},
  {NLS_NOM_SETT_VENT_RESP_RATE_MODE_MAND_INTERMITT, "NLS_NOM_SETT_VENT_RESP_RATE_MODE_MAND_INTERMITT"},
  {NLS_NOM_SETT_VENT_RESP_RATE_MODE_PPV_INTERMIT_PAP, "NLS_NOM_SETT_VENT_RESP_RATE_MODE_PPV_INTERMIT_PAP"},
  {NLS_NOM_SETT_VENT_VOL_AWAY_ASSIST, "NLS_NOM_SETT_VENT_VOL_AWAY_ASSIST"},
  {NLS_NOM_SETT_VENT_VOL_LIMIT_AL_HI_ONOFF, "NLS_NOM_SETT_VENT_VOL_LIMIT_AL_HI_ONOFF"},
  {NLS_NOM_EEG_BIS_SIG_QUAL_INDEX, "NLS_NOM_EEG_BIS_SIG_QUAL_INDEX"},
  {NLS_NOM_SNR, "NLS_NOM_SNR"},
  {NLS_NOM_TIME_TCUT_SENSOR, "NLS_NOM_TIME_TCUT_SENSOR"},
  {NLS_NOM_TEMP_SKIN, "NLS_NOM_TEMP_SKIN"},
  {NLS_NOM_FLOW_PUMP_HEART_LUNG_SLAVE, "NLS_NOM_FLOW_PUMP_HEART_LUNG_SLAVE"},
  {NLS_NOM_EEG_FREQ_PWR_SPEC_CRTX_SPECTRAL_EDGE, "NLS_NOM_EEG_FREQ_PWR_SPEC_CRTX_SPECTRAL_EDGE"},
  {NLS_NOM_FLOW_PUMP_HEART_LUNG_CARDIOPLEGIA_SLAVE, "NLS_NOM_FLOW_PUMP_HEART_LUNG_CARDIOPLEGIA_SLAVE"},
  {NLS_NOM_PULS_OXIM_SAT_O2_TELE, "NLS_NOM_PULS_OXIM_SAT_O2_TELE"},
  {NLS_NOM_VOL_AWAY_EXP_TIDAL_SPONT, "NLS_NOM_VOL_AWAY_EXP_TIDAL_SPONT"},
  {NLS_NOM_AWAY_RESP_RATE_SPONT, "NLS_NOM_AWAY_RESP_RATE_SPONT"},
  {NLS_NOM_TIME_PD_INSP, "NLS_NOM_TIME_PD_INSP"},
  {NLS_NOM_VENT_VOL_MINUTE_AWAY_SPONT, "NLS_NOM_VENT_VOL_MINUTE_AWAY_SPONT"},
  {NLS_NOM_FLOW_AWAY_MAX_SPONT, "NLS_NOM_FLOW_AWAY_MAX_SPONT"},
  {NLS_NOM_RESP_RATE_SPONT, "NLS_NOM_RESP_RATE_SPONT"},
  {NLS_NOM_VENT_VOL_TIDAL_SPONT, "NLS_NOM_VENT_VOL_TIDAL_SPONT"},
  {NLS_NOM_ECG_AMPL_ST, "NLS_NOM_ECG_AMPL_ST"},
  {NLS_NOM_ECG_AMPL_ST_INDEX, "NLS_NOM_ECG_AMPL_ST_INDEX"},
  {NLS_NOM_ECG_AMPL_ST_BASELINE_AVF, "NLS_NOM_ECG_AMPL_ST_BASELINE_AVF"},
  {NLS_NOM_ECG_AMPL_ST_BASELINE_AVL, "NLS_NOM_ECG_AMPL_ST_BASELINE_AVL"},
  {NLS_NOM_ECG_AMPL_ST_BASELINE_AVR, "NLS_NOM_ECG_AMPL_ST_BASELINE_AVR"},
  {NLS_NOM_ECG_AMPL_ST_BASELINE_I, "NLS_NOM_ECG_AMPL_ST_BASELINE_I"},
  {NLS_NOM_ECG_AMPL_ST_BASELINE_II, "NLS_NOM_ECG_AMPL_ST_BASELINE_II"},
  {NLS_NOM_ECG_AMPL_ST_BASELINE_III, "NLS_NOM_ECG_AMPL_ST_BASELINE_III"},
  {NLS_NOM_ECG_AMPL_ST_BASELINE_V1, "NLS_NOM_ECG_AMPL_ST_BASELINE_V1"},
  {NLS_NOM_ECG_AMPL_ST_BASELINE_V2, "NLS_NOM_ECG_AMPL_ST_BASELINE_V2"},
  {NLS_NOM_ECG_AMPL_ST_BASELINE_V3, "NLS_NOM_ECG_AMPL_ST_BASELINE_V3"},
  {NLS_NOM_ECG_AMPL_ST_BASELINE_V4, "NLS_NOM_ECG_AMPL_ST_BASELINE_V4"},
  {NLS_NOM_ECG_AMPL_ST_BASELINE_V5, "NLS_NOM_ECG_AMPL_ST_BASELINE_V5"},
  {NLS_NOM_ECG_AMPL_ST_BASELINE_V6, "NLS_NOM_ECG_AMPL_ST_BASELINE_V6"},
  {NLS_NOM_COMPL_LUNG_STATIC, "NLS_NOM_COMPL_LUNG_STATIC"},
  {NLS_NOM_RES_AWAY, "NLS_NOM_RES_AWAY"},
  {NLS_NOM_VOL_BLD_STROKE_INDEX, "NLS_NOM_VOL_BLD_STROKE_INDEX"},
  {NLS_NOM_VOL_BLD_STROKE, "NLS_NOM_VOL_BLD_STROKE"},
  {NLS_NOM_VOL_BLD_STROKE_VAR, "NLS_NOM_VOL_BLD_STROKE_VAR"},
  {NLS_NOM_SCORE_EYE_SUBSC_GLAS_COMA, "NLS_NOM_SCORE_EYE_SUBSC_GLAS_COMA"},
  {NLS_NOM_SCORE_MOTOR_SUBSC_GLAS_COMA, "NLS_NOM_SCORE_MOTOR_SUBSC_GLAS_COMA"},
  {NLS_NOM_SCORE_SUBSC_VERBAL_GLAS_COMA, "NLS_NOM_SCORE_SUBSC_VERBAL_GLAS_COMA"},
  {NLS_NOM_FLOW_PUMP_HEART_LUNG_SUCTION, "NLS_NOM_FLOW_PUMP_HEART_LUNG_SUCTION"},
  {NLS_NOM_EEG_RATIO_SUPPRN, "NLS_NOM_EEG_RATIO_SUPPRN"},
  {NLS_NOM_RESP_BREATH_ASSIST_CNT, "NLS_NOM_RESP_BREATH_ASSIST_CNT"},
  {NLS_NOM_RES_VASC_SYS, "NLS_NOM_RES_VASC_SYS"},
  {NLS_NOM_RES_VASC_SYS_INDEX, "NLS_NOM_RES_VASC_SYS_INDEX"},
  {NLS_NOM_PULS_OXIM_PERF_REL_TELE, "NLS_NOM_PULS_OXIM_PERF_REL_TELE"},
  {NLS_NOM_TEMP_BLD, "NLS_NOM_TEMP_BLD"},
  {NLS_NOM_TEMP_INFRARED, "NLS_NOM_TEMP_INFRARED"},
  {NLS_NOM_TEMP_VESICAL, "NLS_NOM_TEMP_VESICAL"},
  {NLS_NOM_EEG_PWR_SPEC_THETA_ABS_LEFT, "NLS_NOM_EEG_PWR_SPEC_THETA_ABS_LEFT"},
  {NLS_NOM_EEG_PWR_SPEC_THETA_ABS_RIGHT, "NLS_NOM_EEG_PWR_SPEC_THETA_ABS_RIGHT"},
  {NLS_NOM_VOL_FLUID_THORAC, "NLS_NOM_VOL_FLUID_THORAC"},
  {NLS_NOM_VOL_FLUID_THORAC_INDEX, "NLS_NOM_VOL_FLUID_THORAC_INDEX"},
  {NLS_NOM_TIME_PD_THROMBIN, "NLS_NOM_TIME_PD_THROMBIN"},
  {NLS_NOM_TIME_PD_THROMBOPLAS, "NLS_NOM_TIME_PD_THROMBOPLAS"},
  {NLS_NOM_VOL_AWAY_TIDAL, "NLS_NOM_VOL_AWAY_TIDAL"},
  {NLS_NOM_VOL_AWAY_TIDAL_PSV, "NLS_NOM_VOL_AWAY_TIDAL_PSV"},
  {NLS_NOM_AWAY_TC, "NLS_NOM_AWAY_TC"},
  {NLS_NOM_TIME_PD_FROM_LAST_MSMT, "NLS_NOM_TIME_PD_FROM_LAST_MSMT"},
  {NLS_NOM_RATIO_INSP_TOTAL_BREATH_SPONT, "NLS_NOM_RATIO_INSP_TOTAL_BREATH_SPONT"},
  {NLS_NOM_CONC_BILI_TOT, "NLS_NOM_CONC_BILI_TOT"},
  {NLS_NOM_FLOW_AWAY_TOT, "NLS_NOM_FLOW_AWAY_TOT"},
  {NLS_NOM_CONC_tCA_SER, "NLS_NOM_CONC_tCA_SER"},
  {NLS_NOM_CONC_CO2_TOT, "NLS_NOM_CONC_CO2_TOT"},
  {NLS_NOM_EEG_PWR_SPEC_TOT, "NLS_NOM_EEG_PWR_SPEC_TOT"},
  {NLS_EEG_NAMES_CHAN_TP1, "NLS_EEG_NAMES_CHAN_TP1"},
  {NLS_EEG_NAMES_CHAN_TP2, "NLS_EEG_NAMES_CHAN_TP2"},
  {NLS_NOM_CONC_PROT_TOT, "NLS_NOM_CONC_PROT_TOT"},
  {NLS_NOM_VOL_URINE_BAL_PD_INSTANT, "NLS_NOM_VOL_URINE_BAL_PD_INSTANT"},
  {NLS_NOM_EEG_PWR_SPEC_TOT_LEFT, "NLS_NOM_EEG_PWR_SPEC_TOT_LEFT"},
  {NLS_NOM_EEG_PWR_SPEC_TOT_RIGHT, "NLS_NOM_EEG_PWR_SPEC_TOT_RIGHT"},
  {NLS_NOM_VENT_PRESS_AWAY_END_EXP_POS_TOTAL, "NLS_NOM_VENT_PRESS_AWAY_END_EXP_POS_TOTAL"},
  {NLS_NOM_TRAIN_OF_FOUR_CNT, "NLS_NOM_TRAIN_OF_FOUR_CNT"},
  {NLS_NOM_RATIO_TRAIN_OF_FOUR, "NLS_NOM_RATIO_TRAIN_OF_FOUR"},
  {NLS_NOM_TRAIN_OF_FOUR_1, "NLS_NOM_TRAIN_OF_FOUR_1"},
  {NLS_NOM_TRAIN_OF_FOUR_2, "NLS_NOM_TRAIN_OF_FOUR_2"},
  {NLS_NOM_TRAIN_OF_FOUR_3, "NLS_NOM_TRAIN_OF_FOUR_3"},
  {NLS_NOM_TRAIN_OF_FOUR_4, "NLS_NOM_TRAIN_OF_FOUR_4"},
  {NLS_NOM_CO2_TCUT, "NLS_NOM_CO2_TCUT"},
  {NLS_NOM_O2_TCUT, "NLS_NOM_O2_TCUT"},
  {NLS_NOM_IMPED_TTHOR, "NLS_NOM_IMPED_TTHOR"},
  {NLS_NOM_CONC_TGL, "NLS_NOM_CONC_TGL"},
  {NLS_NOM_TWITCH_AMPL, "NLS_NOM_TWITCH_AMPL"},
  {NLS_NOM_TEMP_TYMP, "NLS_NOM_TEMP_TYMP"},
  {NLS_NOM_PRESS_BLD_ART_UMB, "NLS_NOM_PRESS_BLD_ART_UMB"},
  {NLS_NOM_PRESS_BLD_VEN_UMB, "NLS_NOM_PRESS_BLD_VEN_UMB"},
  {NLS_NOM_PRESS_BLD, "NLS_NOM_PRESS_BLD"},
  {NLS_NOM_TEMP, "NLS_NOM_TEMP"},
  {NLS_NOM_CONC_UREA_GEN, "NLS_NOM_CONC_UREA_GEN"},
  {NLS_NOM_FLOW_URINE_INSTANT, "NLS_NOM_FLOW_URINE_INSTANT"},
  {NLS_NOM_VOL_URINE_SHIFT, "NLS_NOM_VOL_URINE_SHIFT"},
  {NLS_NOM_CONC_K_URINE_EXCR, "NLS_NOM_CONC_K_URINE_EXCR"},
  {NLS_NOM_CONC_CREA_URINE, "NLS_NOM_CONC_CREA_URINE"},
  {NLS_NOM_CONC_OSM_URINE, "NLS_NOM_CONC_OSM_URINE"},
  {NLS_NOM_RATIO_URINE_SER_OSM, "NLS_NOM_RATIO_URINE_SER_OSM"},
  {NLS_NOM_CONC_K_URINE, "NLS_NOM_CONC_K_URINE"},
  {NLS_NOM_RATIO_CONC_URINE_CREA_SER, "NLS_NOM_RATIO_CONC_URINE_CREA_SER"},
  {NLS_NOM_CONC_NA_EXCR, "NLS_NOM_CONC_NA_EXCR"},
  {NLS_NOM_RATIO_CONC_URINE_NA_K, "NLS_NOM_RATIO_CONC_URINE_NA_K"},
  {NLS_NOM_CONC_UREA_URINE, "NLS_NOM_CONC_UREA_URINE"},
  {NLS_NOM_VOL_URINE_BAL_PD, "NLS_NOM_VOL_URINE_BAL_PD"},
  {NLS_NOM_CONC_HB_O2_VEN, "NLS_NOM_CONC_HB_O2_VEN"},
  {NLS_NOM_TEMP_VEN, "NLS_NOM_TEMP_VEN"},
  {NLS_NOM_VENT_FLOW_RATIO_PERF_ALV_INDEX, "NLS_NOM_VENT_FLOW_RATIO_PERF_ALV_INDEX"},
  {NLS_NOM_CAPAC_VITAL, "NLS_NOM_CAPAC_VITAL"},
  {NLS_NOM_TIME_PD_PT_WB, "NLS_NOM_TIME_PD_PT_WB"},
  {NLS_NOM_WEIGHT_URINE_COL, "NLS_NOM_WEIGHT_URINE_COL"},
  {NLS_NOM_WB_CNT, "NLS_NOM_WB_CNT"},
};

IntellivueUtilsUnitTest::IntellivueUtilsUnitTest() { }

IntellivueUtilsUnitTest::~IntellivueUtilsUnitTest() { }

DicesRcUnitTest IntellivueUtilsUnitTest::RunTests()
{
  static const char* sfn = "IntellivueUtilsUnitTest::RunTests() ";
  DicesRcUnitTest status = DicesRcUnitTest::OK;

  SECTION("IsValidSetResultAttribute()")
  {
    DicesRcUnitTest test_status = IsValidSetResultAttribute();
    if (test_status != DicesRcUnitTest::OK) status = test_status;
  }

  SECTION("IsValidMDSCreateEventReportAttribute()")
  {
    DicesRcUnitTest test_status = IsValidMDSCreateEventReportAttribute();
    if (test_status != DicesRcUnitTest::OK) status = test_status;
  }

  SECTION("IsValidAssociationResponseAttribute()")
  {
    DicesRcUnitTest test_status = IsValidAssociationResponseAttribute();
    if (test_status != DicesRcUnitTest::OK) status = test_status;
  }

  SECTION("IsValidConnectIndicationAttribute()")
  {
    DicesRcUnitTest test_status = IsValidConnectIndicationAttribute();
    if (test_status != DicesRcUnitTest::OK) status = test_status;
  }

  SECTION("IsValidAttribute()")
  {
    DicesRcUnitTest test_status = IsValidAttribute();
    if (test_status != DicesRcUnitTest::OK) status = test_status;
  }

  SECTION("ParseAttribute()")
  {
    DicesRcUnitTest test_status = ParseAttribute();
    if (test_status != DicesRcUnitTest::OK) status = test_status;
  }

  SECTION("DeleteAttribute()")
  {
    DicesRcUnitTest test_status = DeleteAttribute();
    if (test_status != DicesRcUnitTest::OK) status = test_status;
  }

  SECTION("Convert16BitUnicodeToAscii()")
  {
    DicesRcUnitTest test_status = Convert16BitUnicodeToAscii();
    if (test_status != DicesRcUnitTest::OK) status = test_status;
  }

  SECTION("ConvertIntellivueColorToDicesColor()")
  {
    DicesRcUnitTest test_status = ConvertIntellivueColorToDicesColor();
    if (test_status != DicesRcUnitTest::OK) status = test_status;
  }

  SECTION("ConvertIntellivueMetricCategoryToDicesMetricCategory()")
  {
    DicesRcUnitTest test_status =
      ConvertIntellivueMetricCategoryToDicesMetricCategory();
    if (test_status != DicesRcUnitTest::OK) status = test_status;
  }

  SECTION("ConvertIntellivueMetricAccessToDicesMetricAccess()")
  {
    DicesRcUnitTest test_status =
      ConvertIntellivueMetricAccessToDicesMetricAccess();
    if (test_status != DicesRcUnitTest::OK) status = test_status;
  }

  SECTION("ConvertIntellivueAbsoluteTimeToDicesTimespec()")
  {
    DicesRcUnitTest test_status =
      ConvertIntellivueAbsoluteTimeToDicesTimespec();
    if (test_status != DicesRcUnitTest::OK) status = test_status;
  }

  SECTION("ConvertIntellivueRelativeTimeToDicesDuration()")
  {
    DicesRcUnitTest test_status =
      ConvertIntellivueRelativeTimeToDicesDuration();
    if (test_status != DicesRcUnitTest::OK) status = test_status;
  }

  SECTION("ConvertIntellivueNomPartitionToDicesNomPartition()")
  {
    DicesRcUnitTest test_status =
      ConvertIntellivueNomPartitionToDicesNomPartition();
    if (test_status != DicesRcUnitTest::OK) status = test_status;
  }

  SECTION("ConvertIntellivueMeasurementStatusToDicesMeasurementStatus()")
  {
    DicesRcUnitTest test_status =
      ConvertIntellivueMeasurementStatusToDicesMeasurementStatus();
    if (test_status != DicesRcUnitTest::OK) status = test_status;
  }

  SECTION("ConvertIntellivueMDSStatusToDicesMDSStatus()")
  {
    DicesRcUnitTest test_status = ConvertIntellivueMDSStatusToDicesMDSStatus();
    if (test_status != DicesRcUnitTest::OK) status = test_status;
  }

  SECTION("ConvertIntellivueProdSpecTypeToDicesProdSpecType()")
  {
    DicesRcUnitTest test_status =
      ConvertIntellivueProdSpecTypeToDicesProdSpecType();
    if (test_status != DicesRcUnitTest::OK) status = test_status;
  }

  SECTION("ConvertIntellivueProdSpecTypeToDicesProdSpecType()")
  {
    DicesRcUnitTest test_status =
      ConvertIntellivueProdSpecTypeToDicesProdSpecType();
    if (test_status != DicesRcUnitTest::OK) status = test_status;
  }

  SECTION("ConvertIntellivueLineFrequencyToDicesLineFrequency()")
  {
    DicesRcUnitTest test_status =
      ConvertIntellivueLineFrequencyToDicesLineFrequency();
    if (test_status != DicesRcUnitTest::OK) status = test_status;
  }

  SECTION("ConvertIntellivueFloatTypeToDicesFloatType()")
  {
    DicesRcUnitTest test_status = ConvertIntellivueFloatTypeToDicesFloatType();
    if (test_status != DicesRcUnitTest::OK) status = test_status;
  }

  SECTION("ConvertIntellivuePatDemoStateToDicesPatAdmitState()")
  {
    DicesRcUnitTest test_status =
      ConvertIntellivuePatDemoStateToDicesPatAdmitState();
    if (test_status != DicesRcUnitTest::OK) status = test_status;
  }

  SECTION("ConvertIntellivuePatientTypeToDicesPatientType()")
  {
    DicesRcUnitTest test_status =
      ConvertIntellivuePatientTypeToDicesPatientType();
    if (test_status != DicesRcUnitTest::OK) status = test_status;
  }

  SECTION("ConvertIntellivuePatientSexToDicesPatientSex()")
  {
    DicesRcUnitTest test_status =
      ConvertIntellivuePatientSexToDicesPatientSex();
    if (test_status != DicesRcUnitTest::OK) status = test_status;
  }

  SECTION("ConvertIntellivueTextIdToVMOLabelString()")
  {
    DicesRcUnitTest test_status = ConvertIntellivueTextIdToVMOLabelString();
    if (test_status != DicesRcUnitTest::OK) status = test_status;
  }

  SECTION("ConvertIntellivueTextIdStringToTextId()")
  {
    DicesRcUnitTest test_status = ConvertIntellivueTextIdStringToTextId();
    if (test_status != DicesRcUnitTest::OK) status = test_status;
  }

  SECTION("TranslateIntellivePhysioIdToDicesMetricId()")
  {
    DicesRcUnitTest test_status = TranslateIntellivePhysioIdToDicesMetricId();
    if (test_status != DicesRcUnitTest::OK) status = test_status;
  }
  return status;
}

DicesRcUnitTest IntellivueUtilsUnitTest::IsValidSetResultAttribute()
{
  static const char* sfn = "IntellivueUtilsUnitTest::"
    "IsValidSetResultAttribute() ";

  DicesRcPhilipsIntellivueMP70 status = DicesRcPhilipsIntellivueMP70::OK;
  const intellivue::OIDType kvalid_attr_id = NOM_ATTR_POLL_RTSA_PRIO_LIST;
  const intellivue::OIDType kinvalid_attr_id = 0;
  bool is_valid = false;

  // Check null pointer function argument
  status = IntellivueUtils::IsValidSetResultAttribute(kvalid_attr_id, nullptr);
  CHECK(status == DicesRcPhilipsIntellivueMP70::
    NULL_POINTER_FUNCTION_ARGUMENT_FAILURE);

  // Check invalid attribute
  status = IntellivueUtils::IsValidSetResultAttribute(
    kinvalid_attr_id,
    &is_valid);
  CHECK(status == DicesRcPhilipsIntellivueMP70::OK);
  CHECK(is_valid == false);

  // Check valid attribute
  status = IntellivueUtils::IsValidSetResultAttribute(
    kvalid_attr_id,
    &is_valid);
  CHECK(status == DicesRcPhilipsIntellivueMP70::OK);
  CHECK(is_valid == true);

  return DicesRcUnitTest::OK;
}

DicesRcUnitTest IntellivueUtilsUnitTest::IsValidMDSCreateEventReportAttribute()
{
  static const char* sfn = "IntellivueUtilsUnitTest::"
    "IsValidMDSCreateEventReportAttribute() ";
  DicesRcPhilipsIntellivueMP70 status = DicesRcPhilipsIntellivueMP70::OK;
  const int kvalid_attr_id_arr_size = 18;
  const intellivue::OIDType kvalid_attr_id[kvalid_attr_id_arr_size] = {
    NOM_ATTR_ID_HANDLE,
    NOM_ATTR_SYS_TYPE,
    NOM_ATTR_ID_MODEL,
    NOM_ATTR_SYS_ID,
    NOM_ATTR_NOM_VERS,
    NOM_ATTR_LOCALIZN,
    NOM_ATTR_SYS_SPECN,
    NOM_ATTR_MDS_GEN_INFO,
    NOM_ATTR_ID_PROD_SPECN,
    NOM_ATTR_VMS_MDS_STAT,
    NOM_ATTR_ID_BED_LABEL,
    NOM_ATTR_MODE_OP,
    NOM_ATTR_AREA_APPL,
    NOM_ATTR_TIME_ABS,
    NOM_ATTR_TIME_REL,
    NOM_ATTR_ALTITUDE,
    NOM_ATTR_LINE_FREQ,
    NOM_ATTR_ID_ASSOC_NO
  };
  const intellivue::OIDType kinvalid_attr_id = 0;
  bool is_valid = false;

  // Check null pointer function argument
  status = IntellivueUtils::IsValidMDSCreateEventReportAttribute(
    kvalid_attr_id[0],
    nullptr);
  CHECK(status == DicesRcPhilipsIntellivueMP70::
    NULL_POINTER_FUNCTION_ARGUMENT_FAILURE);

  // Check invalid attribute
  status = IntellivueUtils::IsValidMDSCreateEventReportAttribute(
    kinvalid_attr_id,
    &is_valid);
  CHECK(status == DicesRcPhilipsIntellivueMP70::OK);
  CHECK(is_valid == false);

  // Check valid attribute
  for (int ix = 0; ix < kvalid_attr_id_arr_size; ix++)
  {
    status = IntellivueUtils::IsValidMDSCreateEventReportAttribute(
      kvalid_attr_id[ix],
      &is_valid);
    CHECK(status == DicesRcPhilipsIntellivueMP70::OK);
    CHECK(is_valid == true);
  }

  return DicesRcUnitTest::OK;
}

DicesRcUnitTest IntellivueUtilsUnitTest::IsValidAssociationResponseAttribute()
{
  static const char* sfn = "IntellivueUtilsUnitTest::"
    "IsValidAssociationResponseAttribute() ";
  DicesRcPhilipsIntellivueMP70 status = DicesRcPhilipsIntellivueMP70::OK;
  const int kvalid_attr_id_arr_size = 2;
  const intellivue::OIDType kvalid_attr_id[kvalid_attr_id_arr_size] = {
    NOM_POLL_PROFILE_SUPPORT,
    NOM_ATTR_POLL_PROFILE_EXT
  };
  const intellivue::OIDType kinvalid_attr_id = 0;
  bool is_valid = false;

  // Check null pointer function argument
  status = IntellivueUtils::IsValidAssociationResponseAttribute(
    kvalid_attr_id[0],
    nullptr);
  CHECK(status == DicesRcPhilipsIntellivueMP70::
    NULL_POINTER_FUNCTION_ARGUMENT_FAILURE);

  // Check invalid attribute
  status = IntellivueUtils::IsValidAssociationResponseAttribute(
    kinvalid_attr_id,
    &is_valid);
  CHECK(status == DicesRcPhilipsIntellivueMP70::OK);
  CHECK(is_valid == false);

  // Check valid attribute
  for (int ix = 0; ix < kvalid_attr_id_arr_size; ix++)
  {
    status = IntellivueUtils::IsValidAssociationResponseAttribute(
      kvalid_attr_id[ix],
      &is_valid);
    CHECK(status == DicesRcPhilipsIntellivueMP70::OK);
    CHECK(is_valid == true);
  }

  return DicesRcUnitTest::OK;
}

DicesRcUnitTest IntellivueUtilsUnitTest::IsValidConnectIndicationAttribute()
{
  static const char* sfn = "IntellivueUtilsUnitTest::"
    "IsValidConnectIndicationAttribute() ";
  DicesRcPhilipsIntellivueMP70 status = DicesRcPhilipsIntellivueMP70::OK;
  const int kvalid_attr_id_arr_size = 4;
  const intellivue::OIDType kvalid_attr_id[kvalid_attr_id_arr_size] = {
    NOM_ATTR_SYS_TYPE,
    NOM_ATTR_PCOL_SUPPORT,
    NOM_ATTR_LOCALIZN,
    NOM_ATTR_NET_ADDR_INFO
  };
  const intellivue::OIDType kinvalid_attr_id = 0;
  bool is_valid = false;

  // Check null pointer function argument
  status = IntellivueUtils::IsValidConnectIndicationAttribute(
    kvalid_attr_id[0],
    nullptr);
  CHECK(status == DicesRcPhilipsIntellivueMP70::
    NULL_POINTER_FUNCTION_ARGUMENT_FAILURE);

  // Check invalid attribute
  status = IntellivueUtils::IsValidConnectIndicationAttribute(
    kinvalid_attr_id,
    &is_valid);
  CHECK(status == DicesRcPhilipsIntellivueMP70::OK);
  CHECK(is_valid == false);

  // Check valid attribute
  for (int ix = 0; ix < kvalid_attr_id_arr_size; ix++)
  {
    status = IntellivueUtils::IsValidConnectIndicationAttribute(
      kvalid_attr_id[ix],
      &is_valid);
    CHECK(status == DicesRcPhilipsIntellivueMP70::OK);
    CHECK(is_valid == true);
  }

  return DicesRcUnitTest::OK;
}

DicesRcUnitTest IntellivueUtilsUnitTest::IsValidAttribute()
{
  static const char* sfn = "IntellivueUtilsUnitTest::IsValidAttribute() ";
  DicesRcPhilipsIntellivueMP70 status = DicesRcPhilipsIntellivueMP70::OK;
  const int kcode_size = 6;
  const intellivue::OIDType kcode[kcode_size] = {
    NOM_MOC_VMS_MDS,
    NOM_MOC_PT_DEMOG,
    NOM_MOC_VMO_AL_MON,
    NOM_MOC_VMO_METRIC_NU,
    NOM_MOC_VMO_METRIC_SA_RT,
    NOM_MOC_VMO_METRIC_ENUM
  };
  const int kmds_id_size = 18;
  const intellivue::OIDType kmds_id[kmds_id_size] = {
    NOM_ATTR_ID_HANDLE,
    NOM_ATTR_SYS_TYPE,
    NOM_ATTR_ID_MODEL,
    NOM_ATTR_SYS_ID,
    NOM_ATTR_NOM_VERS,
    NOM_ATTR_LOCALIZN,
    NOM_ATTR_SYS_SPECN,
    NOM_ATTR_MDS_GEN_INFO,
    NOM_ATTR_ID_PROD_SPECN,
    NOM_ATTR_VMS_MDS_STAT,
    NOM_ATTR_ID_BED_LABEL,
    NOM_ATTR_MODE_OP,
    NOM_ATTR_AREA_APPL,
    NOM_ATTR_TIME_ABS,
    NOM_ATTR_TIME_REL,
    NOM_ATTR_ALTITUDE,
    NOM_ATTR_LINE_FREQ,
    NOM_ATTR_ID_ASSOC_NO
  };
  const int kpat_demo_id_size = 16;
  const intellivue::OIDType kpat_demo_id[kpat_demo_id_size] = {
    NOM_ATTR_ID_HANDLE,
    NOM_ATTR_PT_DEMOG_ST,
    NOM_ATTR_PT_TYPE,
    NOM_ATTR_PT_PACED_MODE,
    NOM_ATTR_PT_NAME_GIVEN,
    NOM_ATTR_PT_NAME_FAMILY,
    NOM_ATTR_PT_ID,
    NOM_ATTR_PT_SEX,
    NOM_ATTR_PT_DOB,
    NOM_ATTR_PT_HEIGHT,
    NOM_ATTR_PT_WEIGHT,
    NOM_ATTR_PT_AGE,
    NOM_ATTR_PT_BSA,
    NOM_ATTR_PT_BSA_FORMULA,
    NOM_ATTR_PT_NOTES1,
    NOM_ATTR_PT_NOTES2
  };
  const int kalarm_id_size = 5;
  const intellivue::OIDType kalarm_id[kalarm_id_size] = {
    NOM_ATTR_ID_HANDLE,
    NOM_ATTR_ID_TYPE,
    NOM_ATTR_DEV_AL_COND,
    NOM_ATTR_AL_MON_T_AL_LIST,
    NOM_ATTR_AL_MON_P_AL_LIST
  };
  const int knum_id_size = 12;
  const intellivue::OIDType knum_id[knum_id_size] = {
    NOM_ATTR_ID_HANDLE,
    NOM_ATTR_ID_TYPE,
    NOM_ATTR_NU_VAL_OBS,
    NOM_ATTR_NU_CMPD_VAL_OBS,
    NOM_ATTR_TIME_STAMP_ABS,
    NOM_ATTR_TIME_STAMP_REL,
    NOM_ATTR_ID_LABEL,
    NOM_ATTR_ID_LABEL_STRING,
    NOM_ATTR_DISP_RES,
    NOM_ATTR_COLOR,
    NOM_ATTR_METRIC_SPECN,
    NOM_ATTR_METRIC_MODALITY
  };
  const int krtsa_id_size = 20;
  const intellivue::OIDType krtsa_id[krtsa_id_size] = {
    NOM_ATTR_ID_HANDLE,
    NOM_ATTR_ID_TYPE,
    NOM_ATTR_METRIC_SPECN,
    NOM_ATTR_SA_SPECN,
    NOM_ATTR_SA_FIXED_VAL_SPECN,
    NOM_ATTR_TIME_PD_SAMP,
    NOM_ATTR_ID_LABEL,
    NOM_ATTR_ID_LABEL_STRING,
    NOM_ATTR_METRIC_STAT,
    NOM_ATTR_UNIT_CODE,
    NOM_ATTR_COLOR,
    NOM_ATTR_MODE_MSMT,
    NOM_ATTR_METRIC_INFO_LABEL,
    NOM_ATTR_METRIC_INFO_LABEL_STR,
    NOM_ATTR_SCALE_SPECN_I16,
    NOM_ATTR_SA_RANGE_PHYS_I16,
    NOM_ATTR_GRID_VIS_I16,
    NOM_ATTR_SA_CALIB_I16,
    NOM_ATTR_SA_VAL_OBS,
    NOM_ATTR_SA_CMPD_VAL_OBS
  };
  const int kenum_id_size = 6;
  const intellivue::OIDType kenum_id[kenum_id_size] = {
    NOM_ATTR_ID_HANDLE,
    NOM_ATTR_METRIC_SPECN,
    NOM_ATTR_ID_LABEL,
    NOM_ATTR_ID_LABEL_STRING,
    NOM_ATTR_COLOR,
    NOM_ATTR_VAL_ENUM_OBS
  };

  const intellivue::OIDType kinvalid_code = 0;
  const intellivue::OIDType kinvalid_attr_id = 0;
  bool is_valid = false;

  // Check null pointer function argument
  status = IntellivueUtils::IsValidAttribute(
    NOM_MOC_VMS_MDS,
    kmds_id[0],
    nullptr);
  CHECK(status == DicesRcPhilipsIntellivueMP70::
    NULL_POINTER_FUNCTION_ARGUMENT_FAILURE);

  // Check invalid attribute
  for (int ix = 0; ix < kcode_size; ix++)
  {
    status = IntellivueUtils::IsValidAttribute(
      kcode[ix],
      kinvalid_attr_id,
      &is_valid);
    CHECK(status == DicesRcPhilipsIntellivueMP70::OK);
    CHECK(is_valid == false);
  }

  // Check invalid code
  status = IntellivueUtils::IsValidAttribute(
    kinvalid_code,
    kinvalid_attr_id,
    &is_valid);
  CHECK(status == DicesRcPhilipsIntellivueMP70::OK);
  CHECK(is_valid == false);

  // Check valid attribute
  for (int ix = 0; ix < kmds_id_size; ix++)
  {
    status = IntellivueUtils::IsValidAttribute(
      NOM_MOC_VMS_MDS,
      kmds_id[ix],
      &is_valid);
    CHECK(status == DicesRcPhilipsIntellivueMP70::OK);
    CHECK(is_valid == true);
  }
  for (int ix = 0; ix < kpat_demo_id_size; ix++)
  {
    status = IntellivueUtils::IsValidAttribute(
      NOM_MOC_PT_DEMOG,
      kpat_demo_id[ix],
      &is_valid);
    CHECK(status == DicesRcPhilipsIntellivueMP70::OK);
    CHECK(is_valid == true);
  }
  for (int ix = 0; ix < kalarm_id_size; ix++)
  {
    status = IntellivueUtils::IsValidAttribute(
      NOM_MOC_VMO_AL_MON,
      kalarm_id[ix],
      &is_valid);
    CHECK(status == DicesRcPhilipsIntellivueMP70::OK);
    CHECK(is_valid == true);
  }
  for (int ix = 0; ix < knum_id_size; ix++)
  {
    status = IntellivueUtils::IsValidAttribute(
      NOM_MOC_VMO_METRIC_NU,
      knum_id[ix],
      &is_valid);
    CHECK(status == DicesRcPhilipsIntellivueMP70::OK);
    CHECK(is_valid == true);
  }
  for (int ix = 0; ix < krtsa_id_size; ix++)
  {
    status = IntellivueUtils::IsValidAttribute(
      NOM_MOC_VMO_METRIC_SA_RT,
      krtsa_id[ix],
      &is_valid);
    CHECK(status == DicesRcPhilipsIntellivueMP70::OK);
    CHECK(is_valid == true);
  }
  for (int ix = 0; ix < kenum_id_size; ix++)
  {
    status = IntellivueUtils::IsValidAttribute(
      NOM_MOC_VMO_METRIC_ENUM,
      kenum_id[ix],
      &is_valid);
    CHECK(status == DicesRcPhilipsIntellivueMP70::OK);
    CHECK(is_valid == true);
  }

  return DicesRcUnitTest::OK;
}

DicesRcUnitTest IntellivueUtilsUnitTest::ParseAttribute()
{
  static const char* sfn = "IntellivueUtilsUnitTest::ParseAttribute() ";
  DicesRcPhilipsIntellivueMP70 status = DicesRcPhilipsIntellivueMP70::OK;

  const int buf_len = 4;
  uint8_t buffer[buf_len] = { 0x00, 0x01, 0x00, 0x02 };
  intellivue::AVAType ava_type = { 0 };

  status = IntellivueUtils::ParseAttribute(nullptr, buffer, 0);
  CHECK(status == DicesRcPhilipsIntellivueMP70::
    NULL_POINTER_FUNCTION_ARGUMENT_FAILURE);

  status = IntellivueUtils::ParseAttribute(&ava_type, nullptr, 0);
  CHECK(status == DicesRcPhilipsIntellivueMP70::
    NULL_POINTER_FUNCTION_ARGUMENT_FAILURE);

  status = IntellivueUtils::ParseAttribute(&ava_type, buffer, 0);
  CHECK(status == DicesRcPhilipsIntellivueMP70::OK);

  ava_type.attribute_id = NOM_ATTR_ID_TYPE;
  ava_type.length = buf_len;

  CHECK(ava_type.attribute_val == nullptr);
  status = IntellivueUtils::ParseAttribute(&ava_type, buffer, 0);
  CHECK(status == DicesRcPhilipsIntellivueMP70::OK);
  CHECK(ava_type.attribute_val != nullptr);

  intellivue::TYPE* ptype = reinterpret_cast<intellivue::TYPE*>(
    ava_type.attribute_val);
  REQUIRE(ptype != nullptr);
  CHECK(ptype->partition == 1);
  CHECK(ptype->code == 2);

  status = IntellivueUtils::DeleteAttribute(&ava_type);
  CHECK(status == DicesRcPhilipsIntellivueMP70::OK);
  CHECK(ava_type.attribute_val == nullptr);

  return DicesRcUnitTest::OK;
}

DicesRcUnitTest IntellivueUtilsUnitTest::DeleteAttribute()
{
  static const char* sfn = "IntellivueUtilsUnitTest::DeleteAttribute() ";
  DicesRcPhilipsIntellivueMP70 status = DicesRcPhilipsIntellivueMP70::OK;

  status = IntellivueUtils::DeleteAttribute(nullptr);
  CHECK(status == DicesRcPhilipsIntellivueMP70::
    NULL_POINTER_FUNCTION_ARGUMENT_FAILURE);

  intellivue::AVAType ava_type = { 0 };

  status = IntellivueUtils::DeleteAttribute(&ava_type);
  CHECK(status == DicesRcPhilipsIntellivueMP70::OK);

  ava_type.attribute_id = NOM_ATTR_ID_TYPE;
  ava_type.length = 4;
  ava_type.attribute_val = new (std::nothrow) uint8_t[
    sizeof(intellivue::TYPE)]();
  REQUIRE(ava_type.attribute_val != nullptr);

  status = IntellivueUtils::DeleteAttribute(&ava_type);
  CHECK(status == DicesRcPhilipsIntellivueMP70::OK);
  CHECK(ava_type.attribute_val == nullptr);

  return DicesRcUnitTest::OK;
}

DicesRcUnitTest IntellivueUtilsUnitTest::Convert16BitUnicodeToAscii()
{
  static const char* sfn = "IntellivueUtilsUnitTest::"
    "Convert16BitUnicodeToAscii() ";
  DicesRcPhilipsIntellivueMP70 status = DicesRcPhilipsIntellivueMP70::OK;
  const int16_t ascii_max = 255;
  const int16_t ascii_a = 65;
  const int arr_size = 11;
  const int16_t ktest_chars[arr_size] = {
    static_cast<int16_t>(SUBSCRIPT_CAPITAL_E_CHAR),
    static_cast<int16_t>(SUBSCRIPT_CAPITAL_L_CHAR),
    static_cast<int16_t>(LITER_PER_CHAR),
    static_cast<int16_t>(HYDROGEN_CHAR),
    static_cast<int16_t>(ALARM_STAR_CHAR),
    static_cast<int16_t>(CAPITAL_V_WITH_DOT_ABOVE_CHAR),
    static_cast<int16_t>(ZERO_WIDTH_NO_BREAK_SPACE_CHAR),
    kUnicodeDelta,
    kUnicodeSubscriptTwo,
    ascii_max + 1,
    ascii_a
  };
  const uint8_t ktest_exp_results[arr_size] = {
    kAsciiSubscriptCapitalE,
    kAsciiSubscriptCapitalL,
    kAsciiUnknown,
    kAsciiUnknown,
    kAsciiStar,
    kAsciiVWithADotAbove,
    kAsciiUnknown,
    kAsciiDelta,
    kAsciiSubscript2,
    kAsciiUnknown,
    ascii_a
  };

  status = IntellivueUtils::Convert16BitUnicodeToAscii(0, nullptr);
  CHECK(status == DicesRcPhilipsIntellivueMP70::
    NULL_POINTER_FUNCTION_ARGUMENT_FAILURE);

  uint8_t value = 0;
  for (int ix = 0; ix < arr_size; ix++)
  {
    status = IntellivueUtils::Convert16BitUnicodeToAscii(
      ktest_chars[ix],
      &value);
    CHECK(status == DicesRcPhilipsIntellivueMP70::OK);
    CHECK(value == ktest_exp_results[ix]);
  }

  return DicesRcUnitTest::OK;
}

DicesRcUnitTest IntellivueUtilsUnitTest::
ConvertIntellivueColorToDicesColor()
{
  static const char* sfn = "IntellivueUtilsUnitTest::"
    "ConvertIntellivueColorToDicesColor() ";
  const int karr_size = 13;
  const intellivue::SimpleColour kunknown_value = 10;
  const intellivue::SimpleColour ktest_arr[karr_size] = {
    COL_BLACK,
    COL_PINK,
    COL_LIGHT_RED,
    COL_RED,
    COL_LIGHT_GREEN,
    COL_GREEN,
    COL_ORANGE,
    COL_YELLOW,
    COL_BLUE,
    COL_CYAN,
    COL_WHITE,
    COL_MAGENTA,
    kunknown_value
  };
  const ice::SimpleColor ktest_exp_results[karr_size] = {
    ice::col_black,
    ice::col_red,
    ice::col_red,
    ice::col_red,
    ice::col_green,
    ice::col_green,
    ice::col_yellow,
    ice::col_yellow,
    ice::col_blue,
    ice::col_cyan,
    ice::col_white,
    ice::col_magenta,
    ice::col_black
  };
  DicesRcPhilipsIntellivueMP70 status = DicesRcPhilipsIntellivueMP70::OK;
  ice::SimpleColor value = ice::col_black;

  status = IntellivueUtils::ConvertIntellivueColorToDicesColor(nullptr, 0);
  CHECK(status == DicesRcPhilipsIntellivueMP70::
    NULL_POINTER_FUNCTION_ARGUMENT_FAILURE);

  for (int ix = 0; ix < karr_size; ix++)
  {
    status = IntellivueUtils::ConvertIntellivueColorToDicesColor(
      &value,
      ktest_arr[ix]);
    CHECK(status == DicesRcPhilipsIntellivueMP70::OK);
    CHECK(value == ktest_exp_results[ix]);
  }

  return DicesRcUnitTest::OK;
}

DicesRcUnitTest IntellivueUtilsUnitTest::
ConvertIntellivueMetricCategoryToDicesMetricCategory()
{
  static const char* sfn = "IntellivueUtilsUnitTest::"
    "ConvertIntellivueMetricCategoryToDicesMetricCategory() ";
  const int karr_size = 13;
  const intellivue::MetricCategory kunknown_value = 11;
  const intellivue::MetricCategory ktest_arr[karr_size] = {
    MCAT_UNSPEC,
    AUTO_MEASUREMENT,
    MANUAL_MEASUREMENT,
    AUTO_SETTING,
    MANUAL_SETTING,
    AUTO_CALCULATION,
    MANUAL_CALCULATION,
    AUTO_ADJUST_PAT_TEMP,
    MANUAL_ADJUST_PAT_TEMP,
    AUTO_ALARM_LIMIT_SETTING,
    kunknown_value
  };
  const ice::MetricCategory ktest_exp_results[karr_size] = {
    ice::mcat_unspec,
    ice::auto_measurement,
    ice::manual_measurement,
    ice::auto_setting,
    ice::manual_setting,
    ice::auto_calculation,
    ice::manual_calculation,
    ice::mcat_unspec,
    ice::mcat_unspec,
    ice::mcat_unspec,
    ice::mcat_unspec,
  };
  DicesRcPhilipsIntellivueMP70 status = DicesRcPhilipsIntellivueMP70::OK;
  ice::MetricCategory value = ice::mcat_unspec;

  status = IntellivueUtils::
    ConvertIntellivueMetricCategoryToDicesMetricCategory(nullptr, 0);
  CHECK(status == DicesRcPhilipsIntellivueMP70::
    NULL_POINTER_FUNCTION_ARGUMENT_FAILURE);

  for (int ix = 0; ix < karr_size; ix++)
  {
    status = IntellivueUtils::
      ConvertIntellivueMetricCategoryToDicesMetricCategory(
      &value,
      ktest_arr[ix]);
    CHECK(status == DicesRcPhilipsIntellivueMP70::OK);
    CHECK(value == ktest_exp_results[ix]);
  }

  return DicesRcUnitTest::OK;
}

DicesRcUnitTest IntellivueUtilsUnitTest::
ConvertIntellivueMetricAccessToDicesMetricAccess()
{
  static const char* sfn = "IntellivueUtilsUnitTest::"
    "ConvertIntellivueMetricAccessToDicesMetricAccess() ";
  DicesRcPhilipsIntellivueMP70 status = DicesRcPhilipsIntellivueMP70::OK;
  const int arr_size = 6;
  const intellivue::MetricAccess test_metric_access[arr_size] = {
    0,
    AVAIL_INTERMITTEND,
    UPD_PERIODIC,
    UPD_EPISODIC,
    MSMT_NONCONTINUOUS,
    AVAIL_INTERMITTEND
    | UPD_PERIODIC
    | UPD_EPISODIC
    | MSMT_NONCONTINUOUS
  };
  const ice::MetricAccess test_exp_result[arr_size] = {
    0,
    ice::MetricAccessBits::avail_intermittent,
    ice::MetricAccessBits::upd_periodic,
    ice::MetricAccessBits::upd_episodic,
    ice::MetricAccessBits::msmt_noncontinuous,
    ice::MetricAccessBits::avail_intermittent
    | ice::MetricAccessBits::upd_periodic
    | ice::MetricAccessBits::upd_episodic
    | ice::MetricAccessBits::msmt_noncontinuous
  };
  ice::MetricAccess value = 0;

  status = IntellivueUtils::
    ConvertIntellivueMetricAccessToDicesMetricAccess(nullptr, 0);
  CHECK(status == DicesRcPhilipsIntellivueMP70::
    NULL_POINTER_FUNCTION_ARGUMENT_FAILURE);

  for (int ix = 0; ix < arr_size; ix++)
  {
    status = IntellivueUtils::
      ConvertIntellivueMetricAccessToDicesMetricAccess(&value, test_metric_access[ix]);
    CHECK(status == DicesRcPhilipsIntellivueMP70::OK);
    CHECK(value == test_exp_result[ix]);
  }

  return DicesRcUnitTest::OK;
}

DicesRcUnitTest IntellivueUtilsUnitTest::
ConvertIntellivueAbsoluteTimeToDicesTimespec()
{
  static const char* sfn = "IntellivueUtilsUnitTest::"
    "ConvertIntellivueAbsoluteTimeToDicesTimespec() ";
  DicesRcPhilipsIntellivueMP70 status = DicesRcPhilipsIntellivueMP70::OK;

  status = IntellivueUtils::
    ConvertIntellivueAbsoluteTimeToDicesTimespec(nullptr,{ 0 });
  CHECK(status == DicesRcPhilipsIntellivueMP70::
    NULL_POINTER_FUNCTION_ARGUMENT_FAILURE);

  intellivue::AbsoluteTime test_invalid_time = {
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
  };
  const int arr_size = 2;
  intellivue::AbsoluteTime test_abs_time [arr_size] = {
    {0x20, 0x16, 0x01, 0x18, 0x09, 0x15, 0x30, 0x00 },
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
  };

  ice::Timespec test_exp_result[arr_size] = {
    {1453126530, 0 },
    {-2040424094, 0 }
  };

  for (int ix = 0; ix < arr_size; ix++)
  {
    ice::Timespec dices_time = { 0 };
    status = IntellivueUtils::
      ConvertIntellivueAbsoluteTimeToDicesTimespec(
      &dices_time,
      test_abs_time[ix]);
    CHECK(status == DicesRcPhilipsIntellivueMP70::OK);
    CHECK(dices_time.seconds == test_exp_result[ix].seconds);
    CHECK(dices_time.nanoseconds == test_exp_result[ix].nanoseconds);
  }

  return DicesRcUnitTest::OK;
}

DicesRcUnitTest IntellivueUtilsUnitTest::
ConvertIntellivueRelativeTimeToDicesDuration()
{
  static const char* sfn = "IntellivueUtilsUnitTest::"
    "ConvertIntellivueRelativeTimeToDicesDuration() ";
  DicesRcPhilipsIntellivueMP70 status = DicesRcPhilipsIntellivueMP70::OK;

  status = IntellivueUtils::
    ConvertIntellivueRelativeTimeToDicesDuration(nullptr, 0);
  CHECK(status == DicesRcPhilipsIntellivueMP70::
    NULL_POINTER_FUNCTION_ARGUMENT_FAILURE);

  const int arr_size = 3;
  intellivue::RelativeTime test_rel_time [arr_size] = {
    UINT_MAX,
    0,
    5000,
  };

  ice::Duration test_exp_result[arr_size] = {
    {536870, 911874999 },
    {0, 0 },
    {0, 625000000 }
  };

  for (int ix = 0; ix < arr_size; ix++)
  {
    ice::Duration dices_time = { 0 };
    status = IntellivueUtils::
      ConvertIntellivueRelativeTimeToDicesDuration(
      &dices_time,
      test_rel_time[ix]);
    CHECK(status == DicesRcPhilipsIntellivueMP70::OK);
    CHECK(dices_time.seconds == test_exp_result[ix].seconds);
    CHECK(dices_time.nanoseconds == test_exp_result[ix].nanoseconds);
  }

  return DicesRcUnitTest::OK;
}

DicesRcUnitTest IntellivueUtilsUnitTest::
ConvertIntellivueNomPartitionToDicesNomPartition()
{
  static const char* sfn = "IntellivueUtilsUnitTest::"
    "ConvertIntellivueNomPartitionToDicesNomPartition() ";
  DicesRcPhilipsIntellivueMP70 status = DicesRcPhilipsIntellivueMP70::OK;
  const int arr_size = 7;
  intellivue::NomPartition test_nom_part[arr_size] = {
    NOM_PART_OBJ,
    NOM_PART_SCADA,
    NOM_PART_EVT,
    NOM_PART_DIM,
    NOM_PART_PGRP,
    NOM_PART_INFRASTRUCT,
    0
  };

  ice::NomPartition test_exp_result[arr_size] = {
    ice::NomPartition::nom_part_obj,
    ice::NomPartition::nom_part_metric,
    ice::NomPartition::nom_part_alert,
    ice::NomPartition::nom_part_dim,
    ice::NomPartition::nom_part_pgrp,
    ice::NomPartition::nom_part_infrastruct,
    ice::NomPartition::nom_part_unspec
  };

  status = IntellivueUtils::
    ConvertIntellivueNomPartitionToDicesNomPartition(nullptr, 0);
  CHECK(status == DicesRcPhilipsIntellivueMP70::
    NULL_POINTER_FUNCTION_ARGUMENT_FAILURE);

  ice::NomPartition dices_nom_part = ice::NomPartition::nom_part_unspec;
  for (int ix = 0; ix < arr_size; ix++)
  {
    status = IntellivueUtils::
      ConvertIntellivueNomPartitionToDicesNomPartition(
      &dices_nom_part,
      test_exp_result[ix]);
    CHECK(status == DicesRcPhilipsIntellivueMP70::OK);
    CHECK(dices_nom_part == test_exp_result[ix]);
  }

  return DicesRcUnitTest::OK;
}

DicesRcUnitTest IntellivueUtilsUnitTest::
ConvertIntellivueMeasurementStatusToDicesMeasurementStatus()
{
  static const char* sfn = "IntellivueUtilsUnitTest::"
    "ConvertIntellivueMeasurementStatusToDicesMeasurementStatus() ";
  DicesRcPhilipsIntellivueMP70 status = DicesRcPhilipsIntellivueMP70::OK;
  const int arr_size = 13;
  intellivue::MeasurementState test_nom_part[arr_size] = {
    0,
    INVALID,
    QUESTIONABLE,
    UNAVAILABLE,
    CALIBRATION_ONGOING,
    TEST_DATA,
    DEMO_DATA,
    VALIDATED_DATA,
    EARLY_INDICATION,
    MSMT_ONGOING,
    MSMT_STATE_IN_ALARM,
    MSMT_STATE_AL_INHIBITED,
    INVALID
    | QUESTIONABLE
    | UNAVAILABLE
    | CALIBRATION_ONGOING
    | TEST_DATA
    | DEMO_DATA
    | VALIDATED_DATA
    | EARLY_INDICATION
    | MSMT_ONGOING
    | MSMT_STATE_IN_ALARM
    | MSMT_STATE_AL_INHIBITED
  };

  ice::MeasurementStatus test_exp_result[arr_size] = {
    0,
    ice::MeasurementStatusBits::invalid,
    ice::MeasurementStatusBits::questionable,
    ice::MeasurementStatusBits::not_available,
    ice::MeasurementStatusBits::calibration_ongoing,
    ice::MeasurementStatusBits::test_data,
    ice::MeasurementStatusBits::demo_data,
    ice::MeasurementStatusBits::validated_data,
    ice::MeasurementStatusBits::early_indication,
    ice::MeasurementStatusBits::msmt_ongoing,
    ice::MeasurementStatusBits::msmt_state_in_alarm,
    ice::MeasurementStatusBits::msmt_state_al_inhibited,
    ice::MeasurementStatusBits::invalid
    | ice::MeasurementStatusBits::questionable
    | ice::MeasurementStatusBits::not_available
    | ice::MeasurementStatusBits::calibration_ongoing
    | ice::MeasurementStatusBits::test_data
    | ice::MeasurementStatusBits::demo_data
    | ice::MeasurementStatusBits::validated_data
    | ice::MeasurementStatusBits::early_indication
    | ice::MeasurementStatusBits::msmt_ongoing
    | ice::MeasurementStatusBits::msmt_state_in_alarm
    | ice::MeasurementStatusBits::msmt_state_al_inhibited
  };

  status = IntellivueUtils::
    ConvertIntellivueMeasurementStatusToDicesMeasurementStatus(nullptr, 0);
  CHECK(status == DicesRcPhilipsIntellivueMP70::
    NULL_POINTER_FUNCTION_ARGUMENT_FAILURE);

  ice::MeasurementStatus dices_meas_status = 0;
  for (int ix = 0; ix < arr_size; ix++)
  {
    status = IntellivueUtils::
      ConvertIntellivueMeasurementStatusToDicesMeasurementStatus(
      &dices_meas_status,
      test_nom_part[ix]);
    CHECK(status == DicesRcPhilipsIntellivueMP70::OK);
    CHECK(dices_meas_status == test_exp_result[ix]);
  }

  return DicesRcUnitTest::OK;
}

DicesRcUnitTest IntellivueUtilsUnitTest::
ConvertIntellivueMDSStatusToDicesMDSStatus()
{
  static const char* sfn = "IntellivueUtilsUnitTest::"
    "ConvertIntellivueMDSStatusToDicesMDSStatus() ";
  DicesRcPhilipsIntellivueMP70 status = DicesRcPhilipsIntellivueMP70::OK;
  const int arr_size = 4;
  const intellivue::MDSStatus kunknown_value = 10;
  intellivue::MDSStatus test_values[arr_size] = {
    DISCONNECTED,
    UNASSOCIATED,
    OPERATING,
    kunknown_value
  };
  ice::MDSStatus test_exp_result[arr_size] = {
    ice::MDSStatus::disconnected,
    ice::MDSStatus::unassociated,
    ice::MDSStatus::operating,
    ice::MDSStatus::disconnected
  };

  status = IntellivueUtils::
    ConvertIntellivueMDSStatusToDicesMDSStatus(nullptr, 0);
  CHECK(status == DicesRcPhilipsIntellivueMP70::
    NULL_POINTER_FUNCTION_ARGUMENT_FAILURE);

  ice::MDSStatus dices_value = ice::MDSStatus::disconnected;
  for (int ix = 0; ix < arr_size; ix++)
  {
    status = IntellivueUtils::
      ConvertIntellivueMDSStatusToDicesMDSStatus(
      &dices_value,
      test_values[ix]);
    CHECK(status == DicesRcPhilipsIntellivueMP70::OK);
    CHECK(dices_value == test_exp_result[ix]);
  }

  return DicesRcUnitTest::OK;
}

DicesRcUnitTest IntellivueUtilsUnitTest::
ConvertIntellivueProdSpecTypeToDicesProdSpecType()
{
  static const char* sfn = "IntellivueUtilsUnitTest::"
    "ConvertIntellivueProdSpecTypeToDicesProdSpecType() ";
  DicesRcPhilipsIntellivueMP70 status = DicesRcPhilipsIntellivueMP70::OK;
  const int arr_size = 8;
  const uint16_t kunknown_value = 10;
  const uint16_t test_values[arr_size] = {
    UNSPECIFIED,
    SERIAL_NUMBER,
    PART_NUMBER,
    HW_REVISION,
    SW_REVISION,
    FW_REVISION,
    PROTOCOL_REVISION,
    kunknown_value
  };
  const ice::ProdSpecType test_exp_result[arr_size] = {
    ice::ProdSpecType::unspecified,
    ice::ProdSpecType::serial_number,
    ice::ProdSpecType::part_number,
    ice::ProdSpecType::hw_revision,
    ice::ProdSpecType::sw_revision,
    ice::ProdSpecType::fw_revision,
    ice::ProdSpecType::protocol_revision,
    ice::ProdSpecType::unspecified
  };

  status = IntellivueUtils::
    ConvertIntellivueProdSpecTypeToDicesProdSpecType(nullptr, 0);
  CHECK(status == DicesRcPhilipsIntellivueMP70::
    NULL_POINTER_FUNCTION_ARGUMENT_FAILURE);

  ice::ProdSpecType dices_value = ice::ProdSpecType::unspecified;
  for (int ix = 0; ix < arr_size; ix++)
  {
    status = IntellivueUtils::
      ConvertIntellivueProdSpecTypeToDicesProdSpecType(
      &dices_value,
      test_values[ix]);
    CHECK(status == DicesRcPhilipsIntellivueMP70::OK);
    CHECK(dices_value == test_exp_result[ix]);
  }

  return DicesRcUnitTest::OK;
}

DicesRcUnitTest IntellivueUtilsUnitTest::
ConvertIntellivueLineFrequencyToDicesLineFrequency()
{
  static const char* sfn = "IntellivueUtilsUnitTest::"
    "ConvertIntellivueLineFrequencyToDicesLineFrequency() ";
  DicesRcPhilipsIntellivueMP70 status = DicesRcPhilipsIntellivueMP70::OK;
  const int arr_size = 4;
  const intellivue::LineFrequency test_values[arr_size] = {
    LINE_F_UNSPEC,
    LINE_F_50HZ,
    LINE_F_60HZ,
    10
  };
  const ice::LineFrequency test_exp_result[arr_size] = {
    ice::LineFrequency::line_f_unspec,
    ice::LineFrequency::line_f_50hz,
    ice::LineFrequency::line_f_60hz,
    ice::LineFrequency::line_f_unspec
  };

  status = IntellivueUtils::
    ConvertIntellivueLineFrequencyToDicesLineFrequency(nullptr, 0);
  CHECK(status == DicesRcPhilipsIntellivueMP70::
    NULL_POINTER_FUNCTION_ARGUMENT_FAILURE);

  ice::LineFrequency dices_value = ice::LineFrequency::line_f_unspec;
  for (int ix = 0; ix < arr_size; ix++)
  {
    status = IntellivueUtils::
      ConvertIntellivueLineFrequencyToDicesLineFrequency(
      &dices_value,
      test_values[ix]);
    CHECK(status == DicesRcPhilipsIntellivueMP70::OK);
    CHECK(dices_value == test_exp_result[ix]);
  }

  return DicesRcUnitTest::OK;
}

DicesRcUnitTest IntellivueUtilsUnitTest::
ConvertIntellivueFloatTypeToDicesFloatType()
{
  static const char* sfn = "IntellivueUtilsUnitTest::"
    "ConvertIntellivueFloatTypeToDicesFloatType() ";
  DicesRcPhilipsIntellivueMP70 status = DicesRcPhilipsIntellivueMP70::OK;
  const int arr_size = 8;
  const intellivue::FLOATType test_values[arr_size] = {
    0x7fffff, // nan
    0x800000, // nres
    0x7ffffe, // + inf
    0x800002, // - inf
    0xfd007d00,
    0xff000140,
    0x01000140,
    0x02000020
  };
  const ice::FLOATType test_exp_result[arr_size] = {
    ice::NOT_A_NUMBER,
    -8388608.0,
    8388606.0,
    -8388606.0,
    32.0,
    32.0,
    3200,
    3200
  };

  status = IntellivueUtils::
    ConvertIntellivueFloatTypeToDicesFloatType(nullptr, 0);
  CHECK(status == DicesRcPhilipsIntellivueMP70::
    NULL_POINTER_FUNCTION_ARGUMENT_FAILURE);

  ice::FLOATType dices_value = 0;
  for (int ix = 0; ix < arr_size; ix++)
  {
    status = IntellivueUtils::
      ConvertIntellivueFloatTypeToDicesFloatType(
      &dices_value,
      test_values[ix]);
    CHECK(status == DicesRcPhilipsIntellivueMP70::OK);
    CHECK(dices_value == test_exp_result[ix]);
  }

  return DicesRcUnitTest::OK;
}

DicesRcUnitTest IntellivueUtilsUnitTest::
ConvertIntellivuePatDemoStateToDicesPatAdmitState()
{
  static const char* sfn = "IntellivueUtilsUnitTest::"
    "ConvertIntellivuePatDemoStateToDicesPatAdmitState() ";
  DicesRcPhilipsIntellivueMP70 status = DicesRcPhilipsIntellivueMP70::OK;
  const int arr_size = 5;
  const intellivue::PatDemoState test_values[arr_size] = {
    EMPTY,
    PRE_ADMITTED,
    ADMITTED,
    DISCHARGED,
    10
  };
  const ice::PatAdmitState test_exp_result[arr_size] = {
    ice::PatAdmitState::empty,
    ice::PatAdmitState::pre_admitted,
    ice::PatAdmitState::admitted,
    ice::PatAdmitState::discharged,
    ice::PatAdmitState::empty
  };

  status = IntellivueUtils::
    ConvertIntellivuePatDemoStateToDicesPatAdmitState(nullptr, 0);
  CHECK(status == DicesRcPhilipsIntellivueMP70::
    NULL_POINTER_FUNCTION_ARGUMENT_FAILURE);

  ice::PatAdmitState dices_value = ice::PatAdmitState::empty;
  for (int ix = 0; ix < arr_size; ix++)
  {
    status = IntellivueUtils::
      ConvertIntellivuePatDemoStateToDicesPatAdmitState(
      &dices_value,
      test_values[ix]);
    CHECK(status == DicesRcPhilipsIntellivueMP70::OK);
    CHECK(dices_value == test_exp_result[ix]);
  }
  return DicesRcUnitTest::OK;
}

DicesRcUnitTest IntellivueUtilsUnitTest::
ConvertIntellivuePatientTypeToDicesPatientType()
{
  static const char* sfn = "IntellivueUtilsUnitTest::"
    "ConvertIntellivuePatientTypeToDicesPatientType() ";
  DicesRcPhilipsIntellivueMP70 status = DicesRcPhilipsIntellivueMP70::OK;
  const int arr_size = 5;
  const intellivue::PatientType test_values[arr_size] = {
    PAT_TYPE_UNSPECIFIED,
    ADULT,
    PEDIATRIC,
    NEONATAL,
    10
  };
  const ice::PatientType test_exp_result[arr_size] = {
    ice::PatientType::pt_unspecified,
    ice::PatientType::adult,
    ice::PatientType::pediatric,
    ice::PatientType::neonatal,
    ice::PatientType::pt_unspecified
  };

  status = IntellivueUtils::
    ConvertIntellivuePatientTypeToDicesPatientType(nullptr, 0);
  CHECK(status == DicesRcPhilipsIntellivueMP70::
    NULL_POINTER_FUNCTION_ARGUMENT_FAILURE);

  ice::PatientType dices_value = ice::PatientType::pt_unspecified;
  for (int ix = 0; ix < arr_size; ix++)
  {
    status = IntellivueUtils::
      ConvertIntellivuePatientTypeToDicesPatientType(
      &dices_value,
      test_values[ix]);
    CHECK(status == DicesRcPhilipsIntellivueMP70::OK);
    CHECK(dices_value == test_exp_result[ix]);
  }
  return DicesRcUnitTest::OK;
}

DicesRcUnitTest IntellivueUtilsUnitTest::
ConvertIntellivuePatientSexToDicesPatientSex()
{
  static const char* sfn = "IntellivueUtilsUnitTest::"
    "ConvertIntellivuePatientSexToDicesPatientSex() ";
  DicesRcPhilipsIntellivueMP70 status = DicesRcPhilipsIntellivueMP70::OK;
  const int arr_size = 5;
  const intellivue::PatientSex test_values[arr_size] = {
    SEX_UNKNOWN,
    MALE,
    FEMALE,
    SEX_UNSPECIFIED,
    10
  };
  const ice::PatientSex test_exp_result[arr_size] = {
    ice::sex_unknown,
    ice::sex_male,
    ice::sex_female,
    ice::sex_unspecified,
    ice::sex_unknown
  };

  status = IntellivueUtils::
    ConvertIntellivuePatientSexToDicesPatientSex(nullptr, 0);
  CHECK(status == DicesRcPhilipsIntellivueMP70::
    NULL_POINTER_FUNCTION_ARGUMENT_FAILURE);

  ice::PatientSex dices_value = ice::PatientSex::sex_unknown;
  for (int ix = 0; ix < arr_size; ix++)
  {
    status = IntellivueUtils::
      ConvertIntellivuePatientSexToDicesPatientSex(
      &dices_value,
      test_values[ix]);
    CHECK(status == DicesRcPhilipsIntellivueMP70::OK);
    CHECK(dices_value == test_exp_result[ix]);
  }
  return DicesRcUnitTest::OK;
}

DicesRcUnitTest IntellivueUtilsUnitTest::
  ConvertIntellivueTextIdToVMOLabelString()
{
  // Check nullptr
  CHECK(IntellivueUtils::ConvertIntellivueTextIdToVMOLabelString(nullptr, 0)
    == DicesRcPhilipsIntellivueMP70::NULL_POINTER_FUNCTION_ARGUMENT_FAILURE);

  // Test for all expected sucesses.
  for (int ix = 0; ix < kTextIdToStringVector.size(); ix++)
  {
    std::string return_value;
    CHECK(IntellivueUtils::ConvertIntellivueTextIdToVMOLabelString(
      &return_value,
      kTextIdToStringVector.at(ix).first) == DicesRcPhilipsIntellivueMP70::OK);
    CHECK(strcmp(kTextIdToStringVector.at(ix).second.c_str(), return_value.c_str()) == 0);
  }

  // Check unknown text id. Should return empty string.
  std::string return_value;
  CHECK(IntellivueUtils::ConvertIntellivueTextIdToVMOLabelString(&return_value, 0)
    == DicesRcPhilipsIntellivueMP70::OK);
  CHECK(strcmp("", return_value.c_str()) == 0);
  
  return DicesRcUnitTest::OK;
}

DicesRcUnitTest IntellivueUtilsUnitTest::
  ConvertIntellivueTextIdStringToTextId()
{
  // Check nullptr
  CHECK(IntellivueUtils::ConvertIntellivueTextIdStringToTextId(nullptr, "")
    == DicesRcPhilipsIntellivueMP70::NULL_POINTER_FUNCTION_ARGUMENT_FAILURE);

  // Test for all expected sucesses.
  for (int ix = 0; ix < kTextIdToStringVector.size(); ix++)
  {
    intellivue::TextId return_value = 0;
    CHECK(IntellivueUtils::ConvertIntellivueTextIdStringToTextId(
      &return_value,
      kTextIdToStringVector.at(ix).second) == DicesRcPhilipsIntellivueMP70::OK);
    CHECK(kTextIdToStringVector.at(ix).first == return_value);
  }

  // Check unknown text id. Should return zero
  intellivue::TextId return_value = 20;
  CHECK(IntellivueUtils::ConvertIntellivueTextIdStringToTextId(&return_value, "")
    == DicesRcPhilipsIntellivueMP70::OK);
  CHECK(return_value == 0);

  // Check unknown text id. Should return zero
  return_value = 20;
  CHECK(IntellivueUtils::ConvertIntellivueTextIdStringToTextId(
    &return_value,
    "unknown not empty") == DicesRcPhilipsIntellivueMP70::OK);
  CHECK(return_value == 0);
  return DicesRcUnitTest::OK;
}

DicesRcUnitTest IntellivueUtilsUnitTest::
  TranslateIntellivePhysioIdToDicesMetricId()
{
  // Check nullptr
  CHECK(IntellivueUtils::TranslateIntellivePhysioIdToDicesMetricId("", 0, nullptr)
    == DicesRcPhilipsIntellivueMP70::NULL_POINTER_FUNCTION_ARGUMENT_FAILURE);

  struct Test
  {
    std::string in_str;
    intellivue::OIDType in_physio_id;
    intellivue::OIDType out_metric_id;
  };

  std::vector<Test> ktest_vect
  {
    {"NLS_NOM_ECG_CARD_BEAT_RATE", NOM_ECG_CARD_BEAT_RATE, MDC_ECG_CARD_BEAT_RATE},
    {"NLS_NOM_CARD_BEAT_RATE_EXT", NOM_ECG_CARD_BEAT_RATE, MDC_ECG_CARD_BEAT_RATE_EXT},
    {"NLS_NOM_PULS_RATE", NOM_PULS_RATE, MDC_PULS_RATE},
    {"NLS_PRESS_NAMES_PULSE_FROM_ABP", NOM_PULS_RATE, MDC_BLD_PULS_RATE_INV_ABP},
    {"NLS_PRESS_NAMES_PULSE_FROM_ART", NOM_PULS_RATE, MDC_BLD_PULS_RATE_INV_ART},
    {"NLS_PRESS_NAMES_PULSE_FROM_AO", NOM_PULS_RATE, MDC_BLD_PULS_RATE_INV_AO},
    {"NLS_PRESS_NAMES_PULSE_FROM_PAP", NOM_PULS_RATE, MDC_BLD_PULS_RATE_INV_PAP},
    {"NLS_PRESS_NAMES_PULSE_FROM_CVP", NOM_PULS_RATE, MDC_BLD_PULS_RATE_INV_CVP},
    {"NLS_PRESS_NAMES_PULSE_FROM_RAP", NOM_PULS_RATE, MDC_BLD_PULS_RATE_INV_RAP},
    {"NLS_PRESS_NAMES_PULSE_FROM_LAP", NOM_PULS_RATE, MDC_BLD_PULS_RATE_INV_LAP},
    {"NLS_PRESS_NAMES_PULSE_FROM_ICP", NOM_PULS_RATE, MDC_BLD_PULS_RATE_INV_ICP},
    {"NLS_PRESS_NAMES_PULSE_FROM_UAP", NOM_PULS_RATE, MDC_BLD_PULS_RATE_INV_UAP},
    {"NLS_PRESS_NAMES_PULSE_FROM_UVP", NOM_PULS_RATE, MDC_BLD_PULS_RATE_INV_UVP},
    {"NLS_PRESS_NAMES_PULSE_FROM_FAP", NOM_PULS_RATE, MDC_BLD_PULS_RATE_INV_FAP},
    {"NLS_PRESS_NAMES_PULSE_FROM_BAP", NOM_PULS_RATE, MDC_BLD_PULS_RATE_INV_BAP},
    {"NLS_PRESS_NAMES_PULSE_FROM_IC1", NOM_PULS_RATE, MDC_BLD_PULS_RATE_INV_IC1},
    {"NLS_PRESS_NAMES_PULSE_FROM_IC2", NOM_PULS_RATE, MDC_BLD_PULS_RATE_INV_IC2},
    {"NLS_PRESS_NAMES_PULSE_FROM_P", NOM_PULS_RATE, MDC_BLD_PULS_RATE_INV_GEN},
    {"NLS_PRESS_NAMES_PULSE_FROM_P1", NOM_PULS_RATE, MDC_BLD_PULS_RATE_P1},
    {"NLS_PRESS_NAMES_PULSE_FROM_P2", NOM_PULS_RATE, MDC_BLD_PULS_RATE_P2},
    {"NLS_PRESS_NAMES_PULSE_FROM_P3", NOM_PULS_RATE, MDC_BLD_PULS_RATE_P3},
    {"NLS_PRESS_NAMES_PULSE_FROM_P4", NOM_PULS_RATE, MDC_BLD_PULS_RATE_P4},
    {"NLS_NOM_PULS_OXIM_PULS_RATE", NOM_PLETH_PULS_RATE, MDC_PLETH_PULS_RATE},
    {"NLS_SPO2_NAMES_PULS_OXIM_PULS_RATE_PRE_DUCTAL", NOM_PLETH_PULS_RATE, MDC_PLETH_PULS_RATE},
    {"NLS_SPO2_NAMES_PULS_OXIM_PULS_RATE_POST_DUCTAL", NOM_PLETH_PULS_RATE, MDC_PLETH_PULS_RATE},
    {"NLS_SPO2_NAMES_PULS_OXIM_PULS_RATE_RIGHT", NOM_PLETH_PULS_RATE, MDC_PLETH_PULS_RATE},
    {"NLS_SPO2_NAMES_PULS_OXIM_PULS_RATE_LEFT", NOM_PLETH_PULS_RATE, MDC_PLETH_PULS_RATE},
    {"NLS_NOM_PRESS_BLD", NOM_PRESS_BLD, MDC_PRESS_BLD},
    {"NLS_NOM_PRESS_INTRA_UTERAL", NOM_PRESS_BLD, MDC_PRESS_BLD_INTRA_UTERINE},
    {"NLS_NOM_SAT_O2_ART", NOM_SAT_O2_ART, MDC_SAT_O2_ART},
    {"NLS_NOM_SAT_O2_LEFT", NOM_SAT_O2_ART, MDC_SAT_O2_ART},
    {"NLS_NOM_SAT_O2_RIGHT", NOM_SAT_O2_ART, MDC_SAT_O2_ART},
    {"NLS_NOM_SAT_O2_CALC", NOM_SAT_O2_ART, MDC_SAT_O2_ART},
    {"NLS_NOM_SAT_O2_VEN", NOM_SAT_O2_VEN, MDC_SAT_O2_VEN},
    {"NLS_NOM_SAT_O2_VEN_CALC", NOM_SAT_O2_VEN, MDC_SAT_O2_VEN},
    {"NLS_NOM_TEMP", NOM_TEMP, MDC_TEMP},
    {"NLS_NOM_TEMP_BODY", NOM_TEMP, MDC_TEMP},
    {"NLS_NOM_SETT_TEMP", NOM_TEMP, MDC_SETT_TEMP},
    {"NLS_NOM_EEG_FREQ_PWR_SPEC_CRTX_DOM_MEAN", NOM_EEG_FREQ_PWR_SPEC_CRTX_DOM_MEAN, MDC_EEG_FREQ_PWR_SPEC_CRTX_DOM_MEAN},
    {"NLS_EEG_NAMES_CHAN_FREQ1", NOM_EEG_FREQ_PWR_SPEC_CRTX_DOM_MEAN, MDC_EEG_FREQ_PWR_SPEC_CRTX_DOM_MEAN_CH_1},
    {"NLS_EEG_NAMES_CHAN_FREQ2", NOM_EEG_FREQ_PWR_SPEC_CRTX_DOM_MEAN, MDC_EEG_FREQ_PWR_SPEC_CRTX_DOM_MEAN_CH_2},
    {"NLS_NOM_EEG_FREQ_PWR_SPEC_CRTX_DOM_MEAN_LEFT", NOM_EEG_FREQ_PWR_SPEC_CRTX_DOM_MEAN, MDC_EEG_FREQ_PWR_SPEC_CRTX_DOM_MEAN_LEFT},
    {"NLS_NOM_EEG_FREQ_PWR_SPEC_CRTX_DOM_MEAN_RIGHT", NOM_EEG_FREQ_PWR_SPEC_CRTX_DOM_MEAN, MDC_EEG_FREQ_PWR_SPEC_CRTX_DOM_MEAN_RIGHT},
    {"NLS_NOM_EEG_FREQ_PWR_SPEC_CRTX_PEAK", NOM_EEG_FREQ_PWR_SPEC_CRTX_PEAK, MDC_EEG_FREQ_PWR_SPEC_CRTX_DOM_MEAN},
    {"NLS_EEG_NAMES_CHAN_FREQ1", NOM_EEG_FREQ_PWR_SPEC_CRTX_PEAK, MDC_EEG_FREQ_PWR_SPEC_CRTX_DOM_MEAN_CH_1},
    {"NLS_EEG_NAMES_CHAN_FREQ2", NOM_EEG_FREQ_PWR_SPEC_CRTX_PEAK, MDC_EEG_FREQ_PWR_SPEC_CRTX_DOM_MEAN_CH_2},
    {"NLS_NOM_EEG_FREQ_PWR_SPEC_CRTX_DOM_MEAN_LEFT", NOM_EEG_FREQ_PWR_SPEC_CRTX_PEAK, MDC_EEG_FREQ_PWR_SPEC_CRTX_DOM_MEAN_LEFT},
    {"NLS_NOM_EEG_FREQ_PWR_SPEC_CRTX_DOM_MEAN_RIGHT", NOM_EEG_FREQ_PWR_SPEC_CRTX_PEAK, MDC_EEG_FREQ_PWR_SPEC_CRTX_DOM_MEAN_RIGHT},
    {"NLS_NOM_EEG_FREQ_PWR_SPEC_CRTX_SPECTRAL_EDGE", NOM_EEG_FREQ_PWR_SPEC_CRTX_SPECTRAL_EDGE, MDC_EEG_FREQ_PWR_SPEC_CRTX_SPECTRAL_EDGE},
    {"NLS_EEG_NAMES_CHAN_FREQ1", NOM_EEG_FREQ_PWR_SPEC_CRTX_SPECTRAL_EDGE, MDC_EEG_FREQ_PWR_SPEC_CRTX_SPECTRAL_EDGE_CH_1},
    {"NLS_EEG_NAMES_CHAN_FREQ2", NOM_EEG_FREQ_PWR_SPEC_CRTX_SPECTRAL_EDGE, MDC_EEG_FREQ_PWR_SPEC_CRTX_SPECTRAL_EDGE_CH_2},
    {"NLS_NOM_EEG_FREQ_PWR_SPEC_CRTX_SPECTRAL_EDGE_LEFT", NOM_EEG_FREQ_PWR_SPEC_CRTX_SPECTRAL_EDGE, MDC_EEG_FREQ_PWR_SPEC_CRTX_SPECTRAL_EDGE_LEFT},
    {"NLS_NOM_EEG_FREQ_PWR_SPEC_CRTX_SPECTRAL_EDGE_RIGHT", NOM_EEG_FREQ_PWR_SPEC_CRTX_SPECTRAL_EDGE, MDC_EEG_FREQ_PWR_SPEC_CRTX_SPECTRAL_EDGE_RIGHT},
    {"NLS_NOM_EEG_PWR_SPEC_TOT", NOM_EEG_PWR_SPEC_TOT, MDC_EEG_PWR_SPEC_TOT},
    {"NLS_EEG_NAMES_CHAN_TP1", NOM_EEG_PWR_SPEC_TOT, MDC_EEG_PWR_SPEC_TOT_CH_1},
    {"NLS_EEG_NAMES_CHAN_TP2", NOM_EEG_PWR_SPEC_TOT, MDC_EEG_PWR_SPEC_TOT_CH_2},
    {"NLS_NOM_EEG_PWR_SPEC_TOT_LEFT", NOM_EEG_PWR_SPEC_TOT, MDC_EEG_PWR_SPEC_TOT_LEFT},
    {"NLS_NOM_EEG_PWR_SPEC_TOT_RIGHT", NOM_EEG_PWR_SPEC_TOT, MDC_EEG_PWR_SPEC_TOT_RIGHT},
    {"NLS_EEG_NAMES_CHAN_PCNT1", NOM_EEG_PWR_SPEC_ALPHA_REL, MDC_EEG_PWR_SPEC_ALPHA_REL_CH_1},
    {"NLS_EEG_NAMES_CHAN_PCNT2", NOM_EEG_PWR_SPEC_ALPHA_REL, MDC_EEG_PWR_SPEC_ALPHA_REL_CH_2},
    {"NLS_NOM_EEG_PWR_SPEC_ALPHA_REL_LEFT", NOM_EEG_PWR_SPEC_ALPHA_REL, MDC_EEG_PWR_SPEC_ALPHA_REL_LEFT},
    {"NLS_NOM_EEG_PWR_SPEC_ALPHA_REL_RIGHT", NOM_EEG_PWR_SPEC_ALPHA_REL, MDC_EEG_PWR_SPEC_ALPHA_REL_RIGHT},
    {"NLS_EEG_NAMES_CHAN_PCNT1", NOM_EEG_PWR_SPEC_BETA_REL, MDC_EEG_PWR_SPEC_BETA_REL_CH_1},
    {"NLS_EEG_NAMES_CHAN_PCNT2", NOM_EEG_PWR_SPEC_BETA_REL, MDC_EEG_PWR_SPEC_BETA_REL_CH_2},
    {"NLS_NOM_EEG_PWR_SPEC_BETA_REL_LEFT", NOM_EEG_PWR_SPEC_BETA_REL, MDC_EEG_PWR_SPEC_BETA_REL_LEFT},
    {"NLS_NOM_EEG_PWR_SPEC_BETA_REL_RIGHT", NOM_EEG_PWR_SPEC_BETA_REL, MDC_EEG_PWR_SPEC_BETA_REL_RIGHT},
    {"NLS_EEG_NAMES_CHAN_PCNT1", NOM_EEG_PWR_SPEC_DELTA_REL, MDC_EEG_PWR_SPEC_DELTA_REL_CH_1},
    {"NLS_EEG_NAMES_CHAN_PCNT2", NOM_EEG_PWR_SPEC_DELTA_REL, MDC_EEG_PWR_SPEC_DELTA_REL_CH_2},
    {"NLS_NOM_EEG_PWR_SPEC_DELTA_REL_LEFT", NOM_EEG_PWR_SPEC_DELTA_REL, MDC_EEG_PWR_SPEC_DELTA_REL_LEFT},
    {"NLS_NOM_EEG_PWR_SPEC_DELTA_REL_RIGHT", NOM_EEG_PWR_SPEC_DELTA_REL, MDC_EEG_PWR_SPEC_DELTA_REL_RIGHT},
    {"NLS_EEG_NAMES_CHAN_PCNT1", NOM_EEG_PWR_SPEC_THETA_REL, MDC_EEG_PWR_SPEC_THETA_REL_CH_1},
    {"NLS_EEG_NAMES_CHAN_PCNT2", NOM_EEG_PWR_SPEC_THETA_REL, MDC_EEG_PWR_SPEC_THETA_REL_CH_2},
    {"NLS_NOM_EEG_PWR_SPEC_THETA_REL_LEFT", NOM_EEG_PWR_SPEC_THETA_REL, MDC_EEG_PWR_SPEC_THETA_REL_LEFT},
    {"NLS_NOM_EEG_PWR_SPEC_THETA_REL_RIGHT", NOM_EEG_PWR_SPEC_THETA_REL, MDC_EEG_PWR_SPEC_THETA_REL_RIGHT},
    {"NLS_NOM_CONC_PH_ART", NOM_CONC_PH_ART, MDC_CONC_PH_ART},
    {"NLS_NOM_CONC_PH_ART_ADJ", NOM_CONC_PH_ART, MDC_CONC_PH_ART},
    {"NLS_NOM_CONC_HB_ART", NOM_CONC_HB_ART, MDC_CONC_HB_ART},
    {"NLS_NOM_CONC_HB_ART_CALC", NOM_CONC_HB_ART, MDC_CONC_HB_ART},
    {"NLS_NOM_CONC_PH_VEN", NOM_CONC_PH_VEN, MDC_CONC_PH_VEN},
    {"NLS_NOM_CONC_PH_VEN_ADJ", NOM_CONC_PH_VEN, MDC_CONC_PH_VEN},
    {"NLS_NOM_CONC_PCO2_VEN", NOM_CONC_PCO2_VEN, MDC_CONC_PCO2_VEN},
    {"NLS_NOM_CONC_PCO2_VEN_ADJ", NOM_CONC_PCO2_VEN, MDC_CONC_PCO2_VEN},
    {"NLS_NOM_VENT_AWAY_CO2_EXP", NOM_CONC_PO2_VEN, MDC_CONC_PO2_VEN},
    {"NLS_NOM_CONC_PO2_VEN_ADJ",  NOM_CONC_PO2_VEN, MDC_CONC_PO2_VEN},
    {"NLS_NOM_CONC_HCO3_GEN", NOM_CONC_HCO3_GEN, MDC_CONC_HCO3_GEN},
    {"NLS_NOM_CONC_HCO3_GEN_CALC", NOM_CONC_HCO3_GEN, MDC_CONC_HCO3_GEN},
    {"NLS_NOM_CONC_PCO2_GEN", NOM_CONC_PCO2_GEN, MDC_CONC_PCO2_GEN},
    {"NLS_NOM_CONC_PCO2_GEN_ADJ", NOM_CONC_PCO2_GEN, MDC_CONC_PCO2_GEN},
    {"NLS_NOM_BASE_EXCESS_BLD_ART", NOM_BASE_EXCESS_BLD_ART, MDC_BASE_EXCESS_BLD_ART},
    {"NLS_NOM_BASE_EXCESS_BLD_ART_CALC", NOM_BASE_EXCESS_BLD_ART, MDC_BASE_EXCESS_BLD_ART},
    {"NLS_NOM_CONC_PO2_GEN", NOM_CONC_PO2_GEN, MDC_CONC_PO2_GEN},
    {"NLS_NOM_CONC_PO2_GEN_ADJ", NOM_CONC_PO2_GEN, MDC_CONC_PO2_GEN},
    {"NLS_NOM_VOL_GLOBAL_END_DIA", NOM_VOL_GLOBAL_END_DIA, MDC_VOL_GLOBAL_END_DIA},
    {"NLS_NOM_VOL_VENT_L_END_DIA", NOM_VOL_GLOBAL_END_DIA, MDC_VOL_VENT_L_END_DIA},
    {"NLS_NOM_VOL_GLOBAL_END_DIA_INDEX", NOM_VOL_GLOBAL_END_DIA_INDEX, MDC_VOL_GLOBAL_END_DIA_INDEX},
    {"NLS_NOM_VOL_VENT_L_END_DIA_INDEX", NOM_VOL_GLOBAL_END_DIA_INDEX, MDC_VOL_VENT_L_END_DIA_INDEX},
    {"NLS_NOM_AREA_BODY_SURFACE", NOM_AREA_BODY_SURFACE, MDC_AREA_BODY_SURFACE},
    {"NLS_NOM_AREA_BODY_SURFACE_ACTUAL_BOYD", NOM_AREA_BODY_SURFACE, MDC_AREA_BODY_SURFACE_BOYD},
    {"NLS_NOM_AREA_BODY_SURFACE_ACTUAL_DUBOIS", NOM_AREA_BODY_SURFACE, MDC_AREA_BODY_SURFACE_DUBOIS},
    {"NLS_NOM_CONC_BASE_EXCESS_ECF", NOM_CONC_BASE_EXCESS_ECF, MDC_CONC_BASE_EXCESS_ECF},
    {"NLS_NOM_CONC_BASE_EXCESS_ECF_CALC", NOM_CONC_BASE_EXCESS_ECF, MDC_CONC_BASE_EXCESS_ECF},
    {"NLS_NOM_PRESS_GEN_3", NOM_PRESS_GEN_3, MDC_PRESS_GEN_3},

    // Test unknown vmo label string
    {"", NOM_PRESS_GEN_3, MDC_PRESS_GEN_3},
    {"unknown not empty", NOM_PRESS_GEN_3, MDC_PRESS_GEN_3},
    // Test unknown intellivue physio id
    {"NLS_NOM_PRESS_GEN_3", 1, 1},
  };

    // Test for all expected sucesses.
  for (int ix = 0; ix < ktest_vect.size(); ix++)
  {
    intellivue::OIDType out_metric_id = 0;
    CHECK(IntellivueUtils::TranslateIntellivePhysioIdToDicesMetricId(
      ktest_vect.at(ix).in_str,
      ktest_vect.at(ix).in_physio_id,
      &out_metric_id) == DicesRcPhilipsIntellivueMP70::OK);
    CHECK(out_metric_id == ktest_vect.at(ix).out_metric_id);
  }
  
  return DicesRcUnitTest::OK;
}
