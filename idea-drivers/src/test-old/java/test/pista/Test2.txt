/*
 * Linux Runtime configuration: add launcher environment variable 
 * 		LD_LIBRARY_PATH=/home/bbaker/git/pista/pista-core/.libs 
 */
package test;

import java.io.File;

import org.pistax.PistaCl;
import org.pistax.PistaDataPacket;
import org.pistax.PistaDev;
import org.pistax.PistaDriver;
import org.pistax.PistaEventHandler;
import org.pistax.PistaUtil;

import pista.model.dev.MCCUL_fsensor;

public class Test2 {

	static MCCUL_fsensor w = new MCCUL_fsensor();

	public static final void main(String[] args) throws InterruptedException {
		String devname = "mccul";

		System.out.println("JPistaX Test2");
		System.out.println("PATH=" + System.getenv("PATH"));
		System.out.println();
		System.out.println("LD_LIBRARY_PATH=" + System.getenv("LD_LIBRARY_PATH"));
		System.out.println("java.library.path=" + System.getProperty("java.library.path"));
		System.out.println();
		// File f = new
		// File("c:/Users/willi/git/pista/pista-core/bindings/java/intf/libjpistax.so");
		File f = new File("c:/Users/william.l.baker2/git/ideadrivers/lib/win64/jpistax.dll");
		if (f.exists()) {
			System.out.println("file exists, trying explicit load of: " + f.getPath());
			System.load(f.getPath());
			System.out.println("Success...trying method2");
		}
		System.out.println("Current directory: " + System.getProperty("user.dir"));
		System.loadLibrary("jpistax");

		System.out.println("initting");
		PistaCl pista = PistaCl.getInstance();
		PistaDriver driver = pista.driver(devname);

		if (driver == null) {

			System.err.println("Could not find device: " + devname);
			System.exit(0);
		}

		PistaDev dev_inst = driver.allocate();

		PistaEventHandler h = new PistaEventHandler() {
			public int event(PistaDataPacket pkt) {
				if (pkt.getStreamID() == 'M') {
					System.out.println("got measurement");
				} else if (pkt.getStreamID() == 'W') {
					System.out.println("got sensor");
					PistaUtil.decodePistaPacket(w, pkt);
				}
				return 0;
			}
		};

		dev_inst.attach(h);

		// System.out.println("starting background thread");
		pista.run();

		System.out.println("connecting to: " + devname);
		dev_inst.connect();

		Thread.sleep(15000);

		System.out.println("disconnecting");
		dev_inst.disconnect();

		System.out.println("JPistaX Test2...successful");
	}
}
