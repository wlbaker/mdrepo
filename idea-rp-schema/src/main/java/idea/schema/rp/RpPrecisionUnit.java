//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.8-b130911.1802 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2019.07.12 at 08:57:32 AM CDT 
//


package idea.schema.rp;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for rp-precision-unit complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="rp-precision-unit">
 *   &lt;complexContent>
 *     &lt;extension base="{http://idea.mil/rp}rp-unit">
 *       &lt;sequence>
 *         &lt;element name="precision" type="{http://www.w3.org/2001/XMLSchema}int"/>
 *       &lt;/sequence>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "rp-precision-unit", propOrder = {
    "precision"
})
public class RpPrecisionUnit
    extends RpUnit
{

    protected int precision;

    /**
     * Gets the value of the precision property.
     * 
     */
    public int getPrecision() {
        return precision;
    }

    /**
     * Sets the value of the precision property.
     * 
     */
    public void setPrecision(int value) {
        this.precision = value;
    }
    

				public RpPrecisionUnit() { }
				public RpPrecisionUnit(int	p, String u) {
					setPrecision( p );
					setUnitName( u );
				}
				
				public double transform(int val) {
				int p = precision;
				double v = val;
				while (p > 0) {	v = v / 10;	p--; }
				while (p < 0) {	v = v * 10;	p++; }
				return v;
				}

				public int inverse(double val) {
				int p = precision;
				while( p > 0 ) { val *= 10.0; p--;	}
				while( p < 0 ) { val /= 10.0; p++;	}
				return (int)(val + .5);
				}
				
				@Override
				public String toString() {	return unitName + "[" + precision + "]"; }
	private static double transform_d(double val, int p) {
		double v = val;
		while (p > 0) {
			v = v / 10;
			p--;
		}
		while (p < 0) {
			v = v * 10;
			p++;
		}
		return v;
	}

	public double transform_d(double val) {
		return transform_d( val, precision );
	}
	public double inverse_d(double val) {
		return transform_d( val, -precision );
	}

				
			
}
