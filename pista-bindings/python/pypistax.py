# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_pypistax')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_pypistax')
    _pypistax = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pypistax', [dirname(__file__)])
        except ImportError:
            import _pypistax
            return _pypistax
        try:
            _mod = imp.load_module('_pypistax', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _pypistax = swig_import_helper()
    del swig_import_helper
else:
    import _pypistax
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


PISTA_OK_CONTINUE = _pypistax.PISTA_OK_CONTINUE
PISTA_OK = _pypistax.PISTA_OK
PISTA_ERR = _pypistax.PISTA_ERR
PISTA_ERR_MALLOC = _pypistax.PISTA_ERR_MALLOC
PISTA_ERR_ARG = _pypistax.PISTA_ERR_ARG
PISTA_ERR_NA = _pypistax.PISTA_ERR_NA
PISTA_ERR_DEV_CLOSED = _pypistax.PISTA_ERR_DEV_CLOSED
PISTA_ERR_TIMEOUT = _pypistax.PISTA_ERR_TIMEOUT
PISTA_ERR_DATA = _pypistax.PISTA_ERR_DATA
PISTA_ERR_IO = _pypistax.PISTA_ERR_IO
PISTA_DUMP_CONFIG = _pypistax.PISTA_DUMP_CONFIG
PISTA_DUMP_STREAMS = _pypistax.PISTA_DUMP_STREAMS
PISTA_LOG_NONE = _pypistax.PISTA_LOG_NONE
PISTA_LOG_ERR = _pypistax.PISTA_LOG_ERR
PISTA_LOG_WARN = _pypistax.PISTA_LOG_WARN
PISTA_LOG_INFO = _pypistax.PISTA_LOG_INFO
PISTA_LOG_DBG = _pypistax.PISTA_LOG_DBG
PISTA_LOG_SPEW = _pypistax.PISTA_LOG_SPEW
INT_TYP = _pypistax.INT_TYP
LONG_TYP = _pypistax.LONG_TYP
DOUBLE_TYP = _pypistax.DOUBLE_TYP
BYTE_TYP = _pypistax.BYTE_TYP
STRING_TYP = _pypistax.STRING_TYP
OBJ_TYP = _pypistax.OBJ_TYP
FLOAT_TYP = _pypistax.FLOAT_TYP
INT_ARR_TYP = _pypistax.INT_ARR_TYP
BYTE_ARR_TYP = _pypistax.BYTE_ARR_TYP
OBJ_ARR_TYP = _pypistax.OBJ_ARR_TYP
DOUBLE_ARR_TYP = _pypistax.DOUBLE_ARR_TYP
FLOAT_ARR_TYP = _pypistax.FLOAT_ARR_TYP
INVALID_ARR_TYP = _pypistax.INVALID_ARR_TYP
INVALID_TYP = _pypistax.INVALID_TYP
BOOLEAN_TYP = _pypistax.BOOLEAN_TYP
PISTA_DF_MEASUREMENT = _pypistax.PISTA_DF_MEASUREMENT
PISTA_DF_SETTINGS = _pypistax.PISTA_DF_SETTINGS
PISTA_DF_DEMOGRAPHICS = _pypistax.PISTA_DF_DEMOGRAPHICS
PISTA_DF_WAVEFORM = _pypistax.PISTA_DF_WAVEFORM
PISTA_DF_ANNOTATION = _pypistax.PISTA_DF_ANNOTATION
PISTA_DF_CAPABILITIES = _pypistax.PISTA_DF_CAPABILITIES
PISTA_DF_CONNECTION = _pypistax.PISTA_DF_CONNECTION
PISTA_DF_DISPLAY = _pypistax.PISTA_DF_DISPLAY
PISTA_DF_IDENT = _pypistax.PISTA_DF_IDENT
PISTA_DF_MGMT = _pypistax.PISTA_DF_MGMT
PISTA_DF_SECURITY = _pypistax.PISTA_DF_SECURITY
PISTA_DF_M2 = _pypistax.PISTA_DF_M2
PISTA_DF_M3 = _pypistax.PISTA_DF_M3
PISTA_DF_TRACE = _pypistax.PISTA_DF_TRACE
PISTA_DF_ALARM = _pypistax.PISTA_DF_ALARM
PISTA_ST_NOT_CONNECTED = _pypistax.PISTA_ST_NOT_CONNECTED
PISTA_ST_NEGOTIATING = _pypistax.PISTA_ST_NEGOTIATING
PISTA_ST_STANDBY = _pypistax.PISTA_ST_STANDBY
PISTA_ST_CONNECTED = _pypistax.PISTA_ST_CONNECTED
PISTA_ST_SERVER_ERROR = _pypistax.PISTA_ST_SERVER_ERROR
PISTA_ST_DATA_AVAILABLE = _pypistax.PISTA_ST_DATA_AVAILABLE
PISTA_ST_DATA_NOT_AVAIL = _pypistax.PISTA_ST_DATA_NOT_AVAIL
PISTA_ST_ERROR = _pypistax.PISTA_ST_ERROR
PISTA_DEV_DISCOVER = _pypistax.PISTA_DEV_DISCOVER
PISTA_DEV_LOST = _pypistax.PISTA_DEV_LOST
class pista_data_packet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pista_data_packet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pista_data_packet, name)
    __repr__ = _swig_repr
    __swig_setmethods__["tm"] = _pypistax.pista_data_packet_tm_set
    __swig_getmethods__["tm"] = _pypistax.pista_data_packet_tm_get
    if _newclass:
        tm = _swig_property(_pypistax.pista_data_packet_tm_get, _pypistax.pista_data_packet_tm_set)
    __swig_setmethods__["source_name"] = _pypistax.pista_data_packet_source_name_set
    __swig_getmethods__["source_name"] = _pypistax.pista_data_packet_source_name_get
    if _newclass:
        source_name = _swig_property(_pypistax.pista_data_packet_source_name_get, _pypistax.pista_data_packet_source_name_set)
    __swig_setmethods__["stream_id"] = _pypistax.pista_data_packet_stream_id_set
    __swig_getmethods__["stream_id"] = _pypistax.pista_data_packet_stream_id_get
    if _newclass:
        stream_id = _swig_property(_pypistax.pista_data_packet_stream_id_get, _pypistax.pista_data_packet_stream_id_set)
    __swig_setmethods__["payload_sz"] = _pypistax.pista_data_packet_payload_sz_set
    __swig_getmethods__["payload_sz"] = _pypistax.pista_data_packet_payload_sz_get
    if _newclass:
        payload_sz = _swig_property(_pypistax.pista_data_packet_payload_sz_get, _pypistax.pista_data_packet_payload_sz_set)
    __swig_setmethods__["payload"] = _pypistax.pista_data_packet_payload_set
    __swig_getmethods__["payload"] = _pypistax.pista_data_packet_payload_get
    if _newclass:
        payload = _swig_property(_pypistax.pista_data_packet_payload_get, _pypistax.pista_data_packet_payload_set)
    __swig_setmethods__["next_stream"] = _pypistax.pista_data_packet_next_stream_set
    __swig_getmethods__["next_stream"] = _pypistax.pista_data_packet_next_stream_get
    if _newclass:
        next_stream = _swig_property(_pypistax.pista_data_packet_next_stream_get, _pypistax.pista_data_packet_next_stream_set)

    def __init__(self):
        this = _pypistax.new_pista_data_packet()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pypistax.delete_pista_data_packet
    __del__ = lambda self: None
pista_data_packet_swigregister = _pypistax.pista_data_packet_swigregister
pista_data_packet_swigregister(pista_data_packet)

class pista_discovery_info(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pista_discovery_info, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pista_discovery_info, name)
    __repr__ = _swig_repr
    __swig_setmethods__["tm"] = _pypistax.pista_discovery_info_tm_set
    __swig_getmethods__["tm"] = _pypistax.pista_discovery_info_tm_get
    if _newclass:
        tm = _swig_property(_pypistax.pista_discovery_info_tm_get, _pypistax.pista_discovery_info_tm_set)
    __swig_setmethods__["event_type"] = _pypistax.pista_discovery_info_event_type_set
    __swig_getmethods__["event_type"] = _pypistax.pista_discovery_info_event_type_get
    if _newclass:
        event_type = _swig_property(_pypistax.pista_discovery_info_event_type_get, _pypistax.pista_discovery_info_event_type_set)
    __swig_setmethods__["name"] = _pypistax.pista_discovery_info_name_set
    __swig_getmethods__["name"] = _pypistax.pista_discovery_info_name_get
    if _newclass:
        name = _swig_property(_pypistax.pista_discovery_info_name_get, _pypistax.pista_discovery_info_name_set)
    __swig_setmethods__["url"] = _pypistax.pista_discovery_info_url_set
    __swig_getmethods__["url"] = _pypistax.pista_discovery_info_url_get
    if _newclass:
        url = _swig_property(_pypistax.pista_discovery_info_url_get, _pypistax.pista_discovery_info_url_set)

    def __init__(self):
        this = _pypistax.new_pista_discovery_info()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pypistax.delete_pista_discovery_info
    __del__ = lambda self: None
pista_discovery_info_swigregister = _pypistax.pista_discovery_info_swigregister
pista_discovery_info_swigregister(pista_discovery_info)

class pista_discovery_service(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pista_discovery_service, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pista_discovery_service, name)
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _pypistax.pista_discovery_service_name_set
    __swig_getmethods__["name"] = _pypistax.pista_discovery_service_name_get
    if _newclass:
        name = _swig_property(_pypistax.pista_discovery_service_name_get, _pypistax.pista_discovery_service_name_set)
    __swig_setmethods__["longname"] = _pypistax.pista_discovery_service_longname_set
    __swig_getmethods__["longname"] = _pypistax.pista_discovery_service_longname_get
    if _newclass:
        longname = _swig_property(_pypistax.pista_discovery_service_longname_get, _pypistax.pista_discovery_service_longname_set)
    __swig_setmethods__["api_version"] = _pypistax.pista_discovery_service_api_version_set
    __swig_getmethods__["api_version"] = _pypistax.pista_discovery_service_api_version_get
    if _newclass:
        api_version = _swig_property(_pypistax.pista_discovery_service_api_version_get, _pypistax.pista_discovery_service_api_version_set)
    __swig_setmethods__["init"] = _pypistax.pista_discovery_service_init_set
    __swig_getmethods__["init"] = _pypistax.pista_discovery_service_init_get
    if _newclass:
        init = _swig_property(_pypistax.pista_discovery_service_init_get, _pypistax.pista_discovery_service_init_set)
    __swig_setmethods__["cleanup"] = _pypistax.pista_discovery_service_cleanup_set
    __swig_getmethods__["cleanup"] = _pypistax.pista_discovery_service_cleanup_get
    if _newclass:
        cleanup = _swig_property(_pypistax.pista_discovery_service_cleanup_get, _pypistax.pista_discovery_service_cleanup_set)
    __swig_setmethods__["set_discovery_handler"] = _pypistax.pista_discovery_service_set_discovery_handler_set
    __swig_getmethods__["set_discovery_handler"] = _pypistax.pista_discovery_service_set_discovery_handler_get
    if _newclass:
        set_discovery_handler = _swig_property(_pypistax.pista_discovery_service_set_discovery_handler_get, _pypistax.pista_discovery_service_set_discovery_handler_set)
    __swig_setmethods__["start"] = _pypistax.pista_discovery_service_start_set
    __swig_getmethods__["start"] = _pypistax.pista_discovery_service_start_get
    if _newclass:
        start = _swig_property(_pypistax.pista_discovery_service_start_get, _pypistax.pista_discovery_service_start_set)
    __swig_setmethods__["stop"] = _pypistax.pista_discovery_service_stop_set
    __swig_getmethods__["stop"] = _pypistax.pista_discovery_service_stop_get
    if _newclass:
        stop = _swig_property(_pypistax.pista_discovery_service_stop_get, _pypistax.pista_discovery_service_stop_set)
    __swig_setmethods__["tick"] = _pypistax.pista_discovery_service_tick_set
    __swig_getmethods__["tick"] = _pypistax.pista_discovery_service_tick_get
    if _newclass:
        tick = _swig_property(_pypistax.pista_discovery_service_tick_get, _pypistax.pista_discovery_service_tick_set)
    __swig_setmethods__["priv"] = _pypistax.pista_discovery_service_priv_set
    __swig_getmethods__["priv"] = _pypistax.pista_discovery_service_priv_get
    if _newclass:
        priv = _swig_property(_pypistax.pista_discovery_service_priv_get, _pypistax.pista_discovery_service_priv_set)

    def __init__(self):
        this = _pypistax.new_pista_discovery_service()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pypistax.delete_pista_discovery_service
    __del__ = lambda self: None
pista_discovery_service_swigregister = _pypistax.pista_discovery_service_swigregister
pista_discovery_service_swigregister(pista_discovery_service)

class pista_dev_driver(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pista_dev_driver, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pista_dev_driver, name)
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _pypistax.pista_dev_driver_name_set
    __swig_getmethods__["name"] = _pypistax.pista_dev_driver_name_get
    if _newclass:
        name = _swig_property(_pypistax.pista_dev_driver_name_get, _pypistax.pista_dev_driver_name_set)
    __swig_setmethods__["longname"] = _pypistax.pista_dev_driver_longname_set
    __swig_getmethods__["longname"] = _pypistax.pista_dev_driver_longname_get
    if _newclass:
        longname = _swig_property(_pypistax.pista_dev_driver_longname_get, _pypistax.pista_dev_driver_longname_set)
    __swig_setmethods__["api_version"] = _pypistax.pista_dev_driver_api_version_set
    __swig_getmethods__["api_version"] = _pypistax.pista_dev_driver_api_version_get
    if _newclass:
        api_version = _swig_property(_pypistax.pista_dev_driver_api_version_get, _pypistax.pista_dev_driver_api_version_set)
    __swig_setmethods__["init"] = _pypistax.pista_dev_driver_init_set
    __swig_getmethods__["init"] = _pypistax.pista_dev_driver_init_get
    if _newclass:
        init = _swig_property(_pypistax.pista_dev_driver_init_get, _pypistax.pista_dev_driver_init_set)
    __swig_setmethods__["cleanup"] = _pypistax.pista_dev_driver_cleanup_set
    __swig_getmethods__["cleanup"] = _pypistax.pista_dev_driver_cleanup_get
    if _newclass:
        cleanup = _swig_property(_pypistax.pista_dev_driver_cleanup_get, _pypistax.pista_dev_driver_cleanup_set)
    __swig_setmethods__["probe"] = _pypistax.pista_dev_driver_probe_set
    __swig_getmethods__["probe"] = _pypistax.pista_dev_driver_probe_get
    if _newclass:
        probe = _swig_property(_pypistax.pista_dev_driver_probe_get, _pypistax.pista_dev_driver_probe_set)
    __swig_setmethods__["verify"] = _pypistax.pista_dev_driver_verify_set
    __swig_getmethods__["verify"] = _pypistax.pista_dev_driver_verify_get
    if _newclass:
        verify = _swig_property(_pypistax.pista_dev_driver_verify_get, _pypistax.pista_dev_driver_verify_set)
    __swig_setmethods__["allocate"] = _pypistax.pista_dev_driver_allocate_set
    __swig_getmethods__["allocate"] = _pypistax.pista_dev_driver_allocate_get
    if _newclass:
        allocate = _swig_property(_pypistax.pista_dev_driver_allocate_get, _pypistax.pista_dev_driver_allocate_set)
    __swig_setmethods__["config_set"] = _pypistax.pista_dev_driver_config_set_set
    __swig_getmethods__["config_set"] = _pypistax.pista_dev_driver_config_set_get
    if _newclass:
        config_set = _swig_property(_pypistax.pista_dev_driver_config_set_get, _pypistax.pista_dev_driver_config_set_set)
    __swig_setmethods__["config_get"] = _pypistax.pista_dev_driver_config_get_set
    __swig_getmethods__["config_get"] = _pypistax.pista_dev_driver_config_get_get
    if _newclass:
        config_get = _swig_property(_pypistax.pista_dev_driver_config_get_get, _pypistax.pista_dev_driver_config_get_set)
    __swig_setmethods__["dump"] = _pypistax.pista_dev_driver_dump_set
    __swig_getmethods__["dump"] = _pypistax.pista_dev_driver_dump_get
    if _newclass:
        dump = _swig_property(_pypistax.pista_dev_driver_dump_get, _pypistax.pista_dev_driver_dump_set)
    __swig_setmethods__["destroy"] = _pypistax.pista_dev_driver_destroy_set
    __swig_getmethods__["destroy"] = _pypistax.pista_dev_driver_destroy_get
    if _newclass:
        destroy = _swig_property(_pypistax.pista_dev_driver_destroy_get, _pypistax.pista_dev_driver_destroy_set)
    __swig_setmethods__["handle"] = _pypistax.pista_dev_driver_handle_set
    __swig_getmethods__["handle"] = _pypistax.pista_dev_driver_handle_get
    if _newclass:
        handle = _swig_property(_pypistax.pista_dev_driver_handle_get, _pypistax.pista_dev_driver_handle_set)
    __swig_setmethods__["connect"] = _pypistax.pista_dev_driver_connect_set
    __swig_getmethods__["connect"] = _pypistax.pista_dev_driver_connect_get
    if _newclass:
        connect = _swig_property(_pypistax.pista_dev_driver_connect_get, _pypistax.pista_dev_driver_connect_set)
    __swig_setmethods__["disconnect"] = _pypistax.pista_dev_driver_disconnect_set
    __swig_getmethods__["disconnect"] = _pypistax.pista_dev_driver_disconnect_get
    if _newclass:
        disconnect = _swig_property(_pypistax.pista_dev_driver_disconnect_get, _pypistax.pista_dev_driver_disconnect_set)
    __swig_setmethods__["tick"] = _pypistax.pista_dev_driver_tick_set
    __swig_getmethods__["tick"] = _pypistax.pista_dev_driver_tick_get
    if _newclass:
        tick = _swig_property(_pypistax.pista_dev_driver_tick_get, _pypistax.pista_dev_driver_tick_set)
    __swig_setmethods__["poll"] = _pypistax.pista_dev_driver_poll_set
    __swig_getmethods__["poll"] = _pypistax.pista_dev_driver_poll_get
    if _newclass:
        poll = _swig_property(_pypistax.pista_dev_driver_poll_get, _pypistax.pista_dev_driver_poll_set)
    __swig_setmethods__["priv"] = _pypistax.pista_dev_driver_priv_set
    __swig_getmethods__["priv"] = _pypistax.pista_dev_driver_priv_get
    if _newclass:
        priv = _swig_property(_pypistax.pista_dev_driver_priv_get, _pypistax.pista_dev_driver_priv_set)

    def __init__(self):
        this = _pypistax.new_pista_dev_driver()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pypistax.delete_pista_dev_driver
    __del__ = lambda self: None
pista_dev_driver_swigregister = _pypistax.pista_dev_driver_swigregister
pista_dev_driver_swigregister(pista_dev_driver)

class pista_dev_inst(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pista_dev_inst, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pista_dev_inst, name)
    __repr__ = _swig_repr
    __swig_setmethods__["driver"] = _pypistax.pista_dev_inst_driver_set
    __swig_getmethods__["driver"] = _pypistax.pista_dev_inst_driver_get
    if _newclass:
        driver = _swig_property(_pypistax.pista_dev_inst_driver_get, _pypistax.pista_dev_inst_driver_set)
    __swig_setmethods__["next"] = _pypistax.pista_dev_inst_next_set
    __swig_getmethods__["next"] = _pypistax.pista_dev_inst_next_get
    if _newclass:
        next = _swig_property(_pypistax.pista_dev_inst_next_get, _pypistax.pista_dev_inst_next_set)
    __swig_setmethods__["status"] = _pypistax.pista_dev_inst_status_set
    __swig_getmethods__["status"] = _pypistax.pista_dev_inst_status_get
    if _newclass:
        status = _swig_property(_pypistax.pista_dev_inst_status_get, _pypistax.pista_dev_inst_status_set)
    __swig_setmethods__["model"] = _pypistax.pista_dev_inst_model_set
    __swig_getmethods__["model"] = _pypistax.pista_dev_inst_model_get
    if _newclass:
        model = _swig_property(_pypistax.pista_dev_inst_model_get, _pypistax.pista_dev_inst_model_set)
    __swig_setmethods__["version"] = _pypistax.pista_dev_inst_version_set
    __swig_getmethods__["version"] = _pypistax.pista_dev_inst_version_get
    if _newclass:
        version = _swig_property(_pypistax.pista_dev_inst_version_get, _pypistax.pista_dev_inst_version_set)
    __swig_setmethods__["comm_priv"] = _pypistax.pista_dev_inst_comm_priv_set
    __swig_getmethods__["comm_priv"] = _pypistax.pista_dev_inst_comm_priv_get
    if _newclass:
        comm_priv = _swig_property(_pypistax.pista_dev_inst_comm_priv_get, _pypistax.pista_dev_inst_comm_priv_set)
    __swig_setmethods__["event_priv"] = _pypistax.pista_dev_inst_event_priv_set
    __swig_getmethods__["event_priv"] = _pypistax.pista_dev_inst_event_priv_get
    if _newclass:
        event_priv = _swig_property(_pypistax.pista_dev_inst_event_priv_get, _pypistax.pista_dev_inst_event_priv_set)
    __swig_setmethods__["stream_head"] = _pypistax.pista_dev_inst_stream_head_set
    __swig_getmethods__["stream_head"] = _pypistax.pista_dev_inst_stream_head_get
    if _newclass:
        stream_head = _swig_property(_pypistax.pista_dev_inst_stream_head_get, _pypistax.pista_dev_inst_stream_head_set)
    __swig_setmethods__["comm_func"] = _pypistax.pista_dev_inst_comm_func_set
    __swig_getmethods__["comm_func"] = _pypistax.pista_dev_inst_comm_func_get
    if _newclass:
        comm_func = _swig_property(_pypistax.pista_dev_inst_comm_func_get, _pypistax.pista_dev_inst_comm_func_set)
    __swig_setmethods__["event_handler"] = _pypistax.pista_dev_inst_event_handler_set
    __swig_getmethods__["event_handler"] = _pypistax.pista_dev_inst_event_handler_get
    if _newclass:
        event_handler = _swig_property(_pypistax.pista_dev_inst_event_handler_get, _pypistax.pista_dev_inst_event_handler_set)
    __swig_setmethods__["priv"] = _pypistax.pista_dev_inst_priv_set
    __swig_getmethods__["priv"] = _pypistax.pista_dev_inst_priv_get
    if _newclass:
        priv = _swig_property(_pypistax.pista_dev_inst_priv_get, _pypistax.pista_dev_inst_priv_set)

    def __init__(self):
        this = _pypistax.new_pista_dev_inst()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pypistax.delete_pista_dev_inst
    __del__ = lambda self: None
pista_dev_inst_swigregister = _pypistax.pista_dev_inst_swigregister
pista_dev_inst_swigregister(pista_dev_inst)


def pista_init(ctx):
    return _pypistax.pista_init(ctx)
pista_init = _pypistax.pista_init

def pista_run(ctx):
    return _pypistax.pista_run(ctx)
pista_run = _pypistax.pista_run

def pista_tick(ctx):
    return _pypistax.pista_tick(ctx)
pista_tick = _pypistax.pista_tick

def pista_exit(ctx):
    return _pypistax.pista_exit(ctx)
pista_exit = _pypistax.pista_exit

def pista_get_version():
    return _pypistax.pista_get_version()
pista_get_version = _pypistax.pista_get_version

def pista_install_driver(ctx, dev):
    return _pypistax.pista_install_driver(ctx, dev)
pista_install_driver = _pypistax.pista_install_driver

def pista_first_driver(ctx):
    return _pypistax.pista_first_driver(ctx)
pista_first_driver = _pypistax.pista_first_driver

def pista_next_driver(ctx, dev):
    return _pypistax.pista_next_driver(ctx, dev)
pista_next_driver = _pypistax.pista_next_driver

def pista_find_driver(ctx, name):
    return _pypistax.pista_find_driver(ctx, name)
pista_find_driver = _pypistax.pista_find_driver

def pista_dev_count(ctx):
    return _pypistax.pista_dev_count(ctx)
pista_dev_count = _pypistax.pista_dev_count

def pista_dev_by_idx(ctx, idx):
    return _pypistax.pista_dev_by_idx(ctx, idx)
pista_dev_by_idx = _pypistax.pista_dev_by_idx

def pista_allocate(dev, di):
    return _pypistax.pista_allocate(dev, di)
pista_allocate = _pypistax.pista_allocate

def pista_set_event_handler(di, handler, cb_data):
    return _pypistax.pista_set_event_handler(di, handler, cb_data)
pista_set_event_handler = _pypistax.pista_set_event_handler

def pista_set_comm_handler(di, handler, cb_data):
    return _pypistax.pista_set_comm_handler(di, handler, cb_data)
pista_set_comm_handler = _pypistax.pista_set_comm_handler

def pista_get_status(di):
    return _pypistax.pista_get_status(di)
pista_get_status = _pypistax.pista_get_status

def pista_connect(di):
    return _pypistax.pista_connect(di)
pista_connect = _pypistax.pista_connect

def pista_disconnect(di):
    return _pypistax.pista_disconnect(di)
pista_disconnect = _pypistax.pista_disconnect

def pista_release(di):
    return _pypistax.pista_release(di)
pista_release = _pypistax.pista_release

def pista_get_stream_count(di):
    return _pypistax.pista_get_stream_count(di)
pista_get_stream_count = _pypistax.pista_get_stream_count

def pista_get_stream_by_idx(di, idx):
    return _pypistax.pista_get_stream_by_idx(di, idx)
pista_get_stream_by_idx = _pypistax.pista_get_stream_by_idx

def pista_get_stream_by_sid(di, stream_id):
    return _pypistax.pista_get_stream_by_sid(di, stream_id)
pista_get_stream_by_sid = _pypistax.pista_get_stream_by_sid

def pista_poll(di, sid):
    return _pypistax.pista_poll(di, sid)
pista_poll = _pypistax.pista_poll

def pista_dump(di, flags):
    return _pypistax.pista_dump(di, flags)
pista_dump = _pypistax.pista_dump

def pista_set_dev_option(di, key, value):
    return _pypistax.pista_set_dev_option(di, key, value)
pista_set_dev_option = _pypistax.pista_set_dev_option

def pista_get_dev_option(di, key):
    return _pypistax.pista_get_dev_option(di, key)
pista_get_dev_option = _pypistax.pista_get_dev_option

def pista_first_inst(dev):
    return _pypistax.pista_first_inst(dev)
pista_first_inst = _pypistax.pista_first_inst

def pista_next_inst(dev, di):
    return _pypistax.pista_next_inst(dev, di)
pista_next_inst = _pypistax.pista_next_inst

def pista_init_data_packet(pkt, tm, driver_name, stream_id, payload_sz, payload):
    return _pypistax.pista_init_data_packet(pkt, tm, driver_name, stream_id, payload_sz, payload)
pista_init_data_packet = _pypistax.pista_init_data_packet

def pista_util_send_connection(h, code):
    return _pypistax.pista_util_send_connection(h, code)
pista_util_send_connection = _pypistax.pista_util_send_connection

def pista_get_current_time_with_ms():
    return _pypistax.pista_get_current_time_with_ms()
pista_get_current_time_with_ms = _pypistax.pista_get_current_time_with_ms

def pista_set_current_time_delta(delta):
    return _pypistax.pista_set_current_time_delta(delta)
pista_set_current_time_delta = _pypistax.pista_set_current_time_delta

def pista_service_start(service):
    return _pypistax.pista_service_start(service)
pista_service_start = _pypistax.pista_service_start

def pista_service_tick(service):
    return _pypistax.pista_service_tick(service)
pista_service_tick = _pypistax.pista_service_tick

def pista_service_stop(service):
    return _pypistax.pista_service_stop(service)
pista_service_stop = _pypistax.pista_service_stop

def pista_set_discovery_handler(service, discoveryfunc, discovery_priv):
    return _pypistax.pista_set_discovery_handler(service, discoveryfunc, discovery_priv)
pista_set_discovery_handler = _pypistax.pista_set_discovery_handler

def pista_first_service(ctx):
    return _pypistax.pista_first_service(ctx)
pista_first_service = _pypistax.pista_first_service

def pista_find_service(ctx, name):
    return _pypistax.pista_find_service(ctx, name)
pista_find_service = _pypistax.pista_find_service

def pista_service_count(ctx):
    return _pypistax.pista_service_count(ctx)
pista_service_count = _pypistax.pista_service_count

def pista_service_by_idx(ctx, idx):
    return _pypistax.pista_service_by_idx(ctx, idx)
pista_service_by_idx = _pypistax.pista_service_by_idx

def pista_next_service(ctx, service):
    return _pypistax.pista_next_service(ctx, service)
pista_next_service = _pypistax.pista_next_service

def pista_probe(dev, writefunc, writefunc_priv):
    return _pypistax.pista_probe(dev, writefunc, writefunc_priv)
pista_probe = _pypistax.pista_probe

def pista_verify(dev, data, len):
    return _pypistax.pista_verify(dev, data, len)
pista_verify = _pypistax.pista_verify

def pista_load_plugin(pctx, s_name, s_lib):
    return _pypistax.pista_load_plugin(pctx, s_name, s_lib)
pista_load_plugin = _pypistax.pista_load_plugin

def pista_dev_inst_count(dev):
    return _pypistax.pista_dev_inst_count(dev)
pista_dev_inst_count = _pypistax.pista_dev_inst_count

def pista_dev_inst_from_idx(dev, idx):
    return _pypistax.pista_dev_inst_from_idx(dev, idx)
pista_dev_inst_from_idx = _pypistax.pista_dev_inst_from_idx

def pista_dev_register_inst(dev, di):
    return _pypistax.pista_dev_register_inst(dev, di)
pista_dev_register_inst = _pypistax.pista_dev_register_inst

def pista_dev_unregister_inst(dev, di):
    return _pypistax.pista_dev_unregister_inst(dev, di)
pista_dev_unregister_inst = _pypistax.pista_dev_unregister_inst

def pista_dev_register_stream(di, pkt):
    return _pypistax.pista_dev_register_stream(di, pkt)
pista_dev_register_stream = _pypistax.pista_dev_register_stream

def pista_dump_packet(pkt):
    return _pypistax.pista_dump_packet(pkt)
pista_dump_packet = _pypistax.pista_dump_packet

def pista_dump_java(pkt):
    return _pypistax.pista_dump_java(pkt)
pista_dump_java = _pypistax.pista_dump_java

def pista_get_field_loc(fd):
    return _pypistax.pista_get_field_loc(fd)
pista_get_field_loc = _pypistax.pista_get_field_loc

def pista_get_field_offset(fd):
    return _pypistax.pista_get_field_offset(fd)
pista_get_field_offset = _pypistax.pista_get_field_offset

def pista_get_field_count(pkt):
    return _pypistax.pista_get_field_count(pkt)
pista_get_field_count = _pypistax.pista_get_field_count

def pista_get_field_spp(fd):
    return _pypistax.pista_get_field_spp(fd)
pista_get_field_spp = _pypistax.pista_get_field_spp

def pista_get_field_freq(fd):
    return _pypistax.pista_get_field_freq(fd)
pista_get_field_freq = _pypistax.pista_get_field_freq

def pista_get_field_subtyp(fd):
    return _pypistax.pista_get_field_subtyp(fd)
pista_get_field_subtyp = _pypistax.pista_get_field_subtyp

def pista_get_field_quantifier(pkt, fd):
    return _pypistax.pista_get_field_quantifier(pkt, fd)
pista_get_field_quantifier = _pypistax.pista_get_field_quantifier

def pista_set_named_field_spp(base, nm, spp):
    return _pypistax.pista_set_named_field_spp(base, nm, spp)
pista_set_named_field_spp = _pypistax.pista_set_named_field_spp

def pista_set_named_field_freq(base, nm, freq):
    return _pypistax.pista_set_named_field_freq(base, nm, freq)
pista_set_named_field_freq = _pypistax.pista_set_named_field_freq

def pista_get_message_descriptor(pkt):
    return _pypistax.pista_get_message_descriptor(pkt)
pista_get_message_descriptor = _pypistax.pista_get_message_descriptor

def pista_get_field_descriptor(pkt, idx):
    return _pypistax.pista_get_field_descriptor(pkt, idx)
pista_get_field_descriptor = _pypistax.pista_get_field_descriptor

def getPistaVersion():
    return _pypistax.getPistaVersion()
getPistaVersion = _pypistax.getPistaVersion
class PistaDescriptor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PistaDescriptor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PistaDescriptor, name)
    __repr__ = _swig_repr

    def __init__(self, fd):
        this = _pypistax.new_PistaDescriptor(fd)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getLoc(self):
        return _pypistax.PistaDescriptor_getLoc(self)

    def getSPP(self):
        return _pypistax.PistaDescriptor_getSPP(self)

    def getFreq(self):
        return _pypistax.PistaDescriptor_getFreq(self)
    __swig_destroy__ = _pypistax.delete_PistaDescriptor
    __del__ = lambda self: None
PistaDescriptor_swigregister = _pypistax.PistaDescriptor_swigregister
PistaDescriptor_swigregister(PistaDescriptor)

class PistaStream(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PistaStream, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PistaStream, name)
    __repr__ = _swig_repr

    def __init__(self, pkt):
        this = _pypistax.new_PistaStream(pkt)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getPackageName(self):
        return _pypistax.PistaStream_getPackageName(self)

    def getDescriptorCount(self):
        return _pypistax.PistaStream_getDescriptorCount(self)

    def getDescriptorByIdx(self, idx):
        return _pypistax.PistaStream_getDescriptorByIdx(self, idx)
    __swig_destroy__ = _pypistax.delete_PistaStream
    __del__ = lambda self: None
PistaStream_swigregister = _pypistax.PistaStream_swigregister
PistaStream_swigregister(PistaStream)

class PistaDataPacket(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PistaDataPacket, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PistaDataPacket, name)
    __repr__ = _swig_repr

    def __init__(self, pkt):
        this = _pypistax.new_PistaDataPacket(pkt)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pypistax.delete_PistaDataPacket
    __del__ = lambda self: None

    def getTm(self):
        return _pypistax.PistaDataPacket_getTm(self)

    def getStreamID(self):
        return _pypistax.PistaDataPacket_getStreamID(self)

    def getDescriptorCount(self):
        return _pypistax.PistaDataPacket_getDescriptorCount(self)

    def _getDescriptor(self, field_idx):
        return _pypistax.PistaDataPacket__getDescriptor(self, field_idx)

    def getDescriptor(self, field_idx):
        return _pypistax.PistaDataPacket_getDescriptor(self, field_idx)

    def getDescriptorLoc(self, field_idx):
        return _pypistax.PistaDataPacket_getDescriptorLoc(self, field_idx)

    def getFieldSubtyp(self, field_idx):
        return _pypistax.PistaDataPacket_getFieldSubtyp(self, field_idx)

    def getFieldQuantifier(self, field_idx):
        return _pypistax.PistaDataPacket_getFieldQuantifier(self, field_idx)

    def getInt(self, field_idx):
        return _pypistax.PistaDataPacket_getInt(self, field_idx)

    def getLong(self, field_idx):
        return _pypistax.PistaDataPacket_getLong(self, field_idx)

    def getFloat(self, field_idx):
        return _pypistax.PistaDataPacket_getFloat(self, field_idx)

    def getString(self, field_idx):
        return _pypistax.PistaDataPacket_getString(self, field_idx)

    def getByteArray(self, field_idx, sz):
        return _pypistax.PistaDataPacket_getByteArray(self, field_idx, sz)

    def getIntArray(self, field_idx):
        return _pypistax.PistaDataPacket_getIntArray(self, field_idx)

    def getFloatArray(self, field_idx):
        return _pypistax.PistaDataPacket_getFloatArray(self, field_idx)

    def getDoubleArray(self, field_idx):
        return _pypistax.PistaDataPacket_getDoubleArray(self, field_idx)

    def _packet(self):
        return _pypistax.PistaDataPacket__packet(self)
PistaDataPacket_swigregister = _pypistax.PistaDataPacket_swigregister
PistaDataPacket_swigregister(PistaDataPacket)

class PistaEventHandler(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PistaEventHandler, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PistaEventHandler, name)
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == PistaEventHandler:
            _self = None
        else:
            _self = self
        this = _pypistax.new_PistaEventHandler(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pypistax.delete_PistaEventHandler
    __del__ = lambda self: None

    def event(self, dev, pkt):
        return _pypistax.PistaEventHandler_event(self, dev, pkt)
    def __disown__(self):
        self.this.disown()
        _pypistax.disown_PistaEventHandler(self)
        return weakref_proxy(self)
PistaEventHandler_swigregister = _pypistax.PistaEventHandler_swigregister
PistaEventHandler_swigregister(PistaEventHandler)

class PistaCommHandler(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PistaCommHandler, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PistaCommHandler, name)
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == PistaCommHandler:
            _self = None
        else:
            _self = self
        this = _pypistax.new_PistaCommHandler(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pypistax.delete_PistaCommHandler
    __del__ = lambda self: None

    def open(self):
        return _pypistax.PistaCommHandler_open(self)

    def config(self, baud, datab, stopb, parity):
        return _pypistax.PistaCommHandler_config(self, baud, datab, stopb, parity)

    def write(self, data, len):
        return _pypistax.PistaCommHandler_write(self, data, len)

    def close(self):
        return _pypistax.PistaCommHandler_close(self)
    def __disown__(self):
        self.this.disown()
        _pypistax.disown_PistaCommHandler(self)
        return weakref_proxy(self)
PistaCommHandler_swigregister = _pypistax.PistaCommHandler_swigregister
PistaCommHandler_swigregister(PistaCommHandler)

class PistaDev(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PistaDev, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PistaDev, name)
    __repr__ = _swig_repr

    def __init__(self, di):
        this = _pypistax.new_PistaDev(di)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getStream(self, streamId):
        return _pypistax.PistaDev_getStream(self, streamId)

    def connect(self):
        return _pypistax.PistaDev_connect(self)

    def disconnect(self):
        return _pypistax.PistaDev_disconnect(self)

    def setOption(self, key, val):
        return _pypistax.PistaDev_setOption(self, key, val)

    def getStatus(self):
        return _pypistax.PistaDev_getStatus(self)

    def handle(self, data, len):
        return _pypistax.PistaDev_handle(self, data, len)

    def attach(self, *args):
        return _pypistax.PistaDev_attach(self, *args)

    def poll(self, sid):
        return _pypistax.PistaDev_poll(self, sid)

    def dump(self, flags):
        return _pypistax.PistaDev_dump(self, flags)

    def c_inst(self):
        return _pypistax.PistaDev_c_inst(self)

    def sendEvent(self, cxxpkt):
        return _pypistax.PistaDev_sendEvent(self, cxxpkt)
    __swig_destroy__ = _pypistax.delete_PistaDev
    __del__ = lambda self: None
PistaDev_swigregister = _pypistax.PistaDev_swigregister
PistaDev_swigregister(PistaDev)

class PistaDiscoveryHandler(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PistaDiscoveryHandler, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PistaDiscoveryHandler, name)
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == PistaDiscoveryHandler:
            _self = None
        else:
            _self = self
        this = _pypistax.new_PistaDiscoveryHandler(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pypistax.delete_PistaDiscoveryHandler
    __del__ = lambda self: None

    def discovery(self, tm, event_type, name, url):
        return _pypistax.PistaDiscoveryHandler_discovery(self, tm, event_type, name, url)
    def __disown__(self):
        self.this.disown()
        _pypistax.disown_PistaDiscoveryHandler(self)
        return weakref_proxy(self)
PistaDiscoveryHandler_swigregister = _pypistax.PistaDiscoveryHandler_swigregister
PistaDiscoveryHandler_swigregister(PistaDiscoveryHandler)

class PistaService(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PistaService, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PistaService, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def name(self):
        return _pypistax.PistaService_name(self)

    def longname(self):
        return _pypistax.PistaService_longname(self)

    def attach(self, *args):
        return _pypistax.PistaService_attach(self, *args)

    def start(self):
        return _pypistax.PistaService_start(self)

    def stop(self):
        return _pypistax.PistaService_stop(self)

    def tick(self):
        return _pypistax.PistaService_tick(self)
    __swig_destroy__ = _pypistax.delete_PistaService
    __del__ = lambda self: None
PistaService_swigregister = _pypistax.PistaService_swigregister
PistaService_swigregister(PistaService)

class PistaDriver(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PistaDriver, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PistaDriver, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def name(self):
        return _pypistax.PistaDriver_name(self)

    def longname(self):
        return _pypistax.PistaDriver_longname(self)

    def allocate(self):
        return _pypistax.PistaDriver_allocate(self)

    def release(self, dev):
        return _pypistax.PistaDriver_release(self, dev)

    def probe(self, h):
        return _pypistax.PistaDriver_probe(self, h)

    def verify(self, data, len, dat_len):
        return _pypistax.PistaDriver_verify(self, data, len, dat_len)

    def c_inst(self):
        return _pypistax.PistaDriver_c_inst(self)
    __swig_destroy__ = _pypistax.delete_PistaDriver
    __del__ = lambda self: None
PistaDriver_swigregister = _pypistax.PistaDriver_swigregister
PistaDriver_swigregister(PistaDriver)

class PistaCl(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PistaCl, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PistaCl, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    if _newclass:
        getInstance = staticmethod(_pypistax.PistaCl_getInstance)
    else:
        getInstance = _pypistax.PistaCl_getInstance

    def loadPlugin(self, s_name, s_lib):
        return _pypistax.PistaCl_loadPlugin(self, s_name, s_lib)

    def driver_count(self):
        return _pypistax.PistaCl_driver_count(self)

    def driver(self, *args):
        return _pypistax.PistaCl_driver(self, *args)

    def service_count(self):
        return _pypistax.PistaCl_service_count(self)

    def service(self, *args):
        return _pypistax.PistaCl_service(self, *args)

    def run(self):
        return _pypistax.PistaCl_run(self)

    def tick(self):
        return _pypistax.PistaCl_tick(self)

    def stop(self):
        return _pypistax.PistaCl_stop(self)

    def c_inst(self):
        return _pypistax.PistaCl_c_inst(self)

    def unbufferStdio(self):
        return _pypistax.PistaCl_unbufferStdio(self)
    __swig_destroy__ = _pypistax.delete_PistaCl
    __del__ = lambda self: None
PistaCl_swigregister = _pypistax.PistaCl_swigregister
PistaCl_swigregister(PistaCl)

def PistaCl_getInstance():
    return _pypistax.PistaCl_getInstance()
PistaCl_getInstance = _pypistax.PistaCl_getInstance

# This file is compatible with both classic and new-style classes.


