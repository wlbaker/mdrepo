/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_PISTAX_WRAP_H_
#define SWIG_PISTAX_WRAP_H_

class SwigDirector_PistaEventHandler : public pistax::PistaEventHandler, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_PistaEventHandler(JNIEnv *jenv);
    virtual ~SwigDirector_PistaEventHandler();
    virtual int event(pistax::PistaDev *dev, pistax::PistaDataPacket *pkt);
public:
    bool swig_overrides(int n) {
      return (n < 1 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<1> swig_override;
};

class SwigDirector_PistaCommHandler : public pistax::PistaCommHandler, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_PistaCommHandler(JNIEnv *jenv);
    virtual ~SwigDirector_PistaCommHandler();
    virtual int open();
    virtual int config(int baud, int datab, int stopb, char parity);
    virtual int write(char const data[], size_t len);
    virtual int close();
public:
    bool swig_overrides(int n) {
      return (n < 4 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<4> swig_override;
};

class SwigDirector_PistaDiscoveryHandler : public pistax::PistaDiscoveryHandler, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_PistaDiscoveryHandler(JNIEnv *jenv);
    virtual ~SwigDirector_PistaDiscoveryHandler();
    virtual void discovery(int64_t tm, int event_type, char const *name, char const *url);
public:
    bool swig_overrides(int n) {
      return (n < 1 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<1> swig_override;
};


#endif
