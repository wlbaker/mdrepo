/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.pistax;

public class PISTAX {
  public static int pista_init(SWIGTYPE_p_p_pista_context ctx) {
    return PISTAXJNI.pista_init(SWIGTYPE_p_p_pista_context.getCPtr(ctx));
  }

  public static int pista_run(SWIGTYPE_p_pista_context ctx) {
    return PISTAXJNI.pista_run(SWIGTYPE_p_pista_context.getCPtr(ctx));
  }

  public static int pista_tick(SWIGTYPE_p_pista_context ctx) {
    return PISTAXJNI.pista_tick(SWIGTYPE_p_pista_context.getCPtr(ctx));
  }

  public static int pista_exit(SWIGTYPE_p_pista_context ctx) {
    return PISTAXJNI.pista_exit(SWIGTYPE_p_pista_context.getCPtr(ctx));
  }

  public static String pista_get_version() {
    return PISTAXJNI.pista_get_version();
  }

  public static int pista_install_driver(SWIGTYPE_p_pista_context ctx, pista_dev_driver dev) {
    return PISTAXJNI.pista_install_driver(SWIGTYPE_p_pista_context.getCPtr(ctx), pista_dev_driver.getCPtr(dev), dev);
  }

  public static pista_dev_driver pista_first_driver(SWIGTYPE_p_pista_context ctx) {
    long cPtr = PISTAXJNI.pista_first_driver(SWIGTYPE_p_pista_context.getCPtr(ctx));
    return (cPtr == 0) ? null : new pista_dev_driver(cPtr, false);
  }

  public static pista_dev_driver pista_next_driver(SWIGTYPE_p_pista_context ctx, pista_dev_driver dev) {
    long cPtr = PISTAXJNI.pista_next_driver(SWIGTYPE_p_pista_context.getCPtr(ctx), pista_dev_driver.getCPtr(dev), dev);
    return (cPtr == 0) ? null : new pista_dev_driver(cPtr, false);
  }

  public static pista_dev_driver pista_find_driver(SWIGTYPE_p_pista_context ctx, String name) {
    long cPtr = PISTAXJNI.pista_find_driver(SWIGTYPE_p_pista_context.getCPtr(ctx), name);
    return (cPtr == 0) ? null : new pista_dev_driver(cPtr, false);
  }

  public static int pista_dev_count(SWIGTYPE_p_pista_context ctx) {
    return PISTAXJNI.pista_dev_count(SWIGTYPE_p_pista_context.getCPtr(ctx));
  }

  public static pista_dev_driver pista_dev_by_idx(SWIGTYPE_p_pista_context ctx, int idx) {
    long cPtr = PISTAXJNI.pista_dev_by_idx(SWIGTYPE_p_pista_context.getCPtr(ctx), idx);
    return (cPtr == 0) ? null : new pista_dev_driver(cPtr, false);
  }

  public static int pista_allocate(pista_dev_driver dev, pista_dev_inst di) {
    return PISTAXJNI.pista_allocate(pista_dev_driver.getCPtr(dev), dev, pista_dev_inst.getCPtr(di), di);
  }

  public static int pista_set_event_handler(pista_dev_inst di, SWIGTYPE_p_f_p_void_p_pista_data_packet__int handler, SWIGTYPE_p_void cb_data) {
    return PISTAXJNI.pista_set_event_handler(pista_dev_inst.getCPtr(di), di, SWIGTYPE_p_f_p_void_p_pista_data_packet__int.getCPtr(handler), SWIGTYPE_p_void.getCPtr(cb_data));
  }

  public static int pista_set_comm_handler(pista_dev_inst di, SWIGTYPE_p_f_p_q_const__void_p_q_const__char_int__int handler, SWIGTYPE_p_void cb_data) {
    return PISTAXJNI.pista_set_comm_handler(pista_dev_inst.getCPtr(di), di, SWIGTYPE_p_f_p_q_const__void_p_q_const__char_int__int.getCPtr(handler), SWIGTYPE_p_void.getCPtr(cb_data));
  }

  public static int pista_get_status(pista_dev_inst di) {
    return PISTAXJNI.pista_get_status(pista_dev_inst.getCPtr(di), di);
  }

  public static int pista_connect(pista_dev_inst di) {
    return PISTAXJNI.pista_connect(pista_dev_inst.getCPtr(di), di);
  }

  public static int pista_disconnect(pista_dev_inst di) {
    return PISTAXJNI.pista_disconnect(pista_dev_inst.getCPtr(di), di);
  }

  public static int pista_release(pista_dev_inst di) {
    return PISTAXJNI.pista_release(pista_dev_inst.getCPtr(di), di);
  }

  public static int pista_get_stream_count(pista_dev_inst di) {
    return PISTAXJNI.pista_get_stream_count(pista_dev_inst.getCPtr(di), di);
  }

  public static pista_data_packet pista_get_stream_by_idx(pista_dev_inst di, int idx) {
    long cPtr = PISTAXJNI.pista_get_stream_by_idx(pista_dev_inst.getCPtr(di), di, idx);
    return (cPtr == 0) ? null : new pista_data_packet(cPtr, false);
  }

  public static pista_data_packet pista_get_stream_by_sid(pista_dev_inst di, int stream_id) {
    long cPtr = PISTAXJNI.pista_get_stream_by_sid(pista_dev_inst.getCPtr(di), di, stream_id);
    return (cPtr == 0) ? null : new pista_data_packet(cPtr, false);
  }

  public static pista_data_packet pista_poll(pista_dev_inst di, int sid) {
    long cPtr = PISTAXJNI.pista_poll(pista_dev_inst.getCPtr(di), di, sid);
    return (cPtr == 0) ? null : new pista_data_packet(cPtr, false);
  }

  public static int pista_dump(pista_dev_inst di, int flags) {
    return PISTAXJNI.pista_dump(pista_dev_inst.getCPtr(di), di, flags);
  }

  public static int pista_set_dev_option(pista_dev_inst di, String key, SWIGTYPE_p_void value) {
    return PISTAXJNI.pista_set_dev_option(pista_dev_inst.getCPtr(di), di, key, SWIGTYPE_p_void.getCPtr(value));
  }

  public static SWIGTYPE_p_void pista_get_dev_option(pista_dev_inst di, String key) {
    long cPtr = PISTAXJNI.pista_get_dev_option(pista_dev_inst.getCPtr(di), di, key);
    return (cPtr == 0) ? null : new SWIGTYPE_p_void(cPtr, false);
  }

  public static pista_dev_inst pista_first_inst(pista_dev_driver dev) {
    long cPtr = PISTAXJNI.pista_first_inst(pista_dev_driver.getCPtr(dev), dev);
    return (cPtr == 0) ? null : new pista_dev_inst(cPtr, false);
  }

  public static pista_dev_inst pista_next_inst(pista_dev_driver dev, pista_dev_inst di) {
    long cPtr = PISTAXJNI.pista_next_inst(pista_dev_driver.getCPtr(dev), dev, pista_dev_inst.getCPtr(di), di);
    return (cPtr == 0) ? null : new pista_dev_inst(cPtr, false);
  }

  public static int pista_attach_lspIO(pista_dev_inst di, String port_name) {
    return PISTAXJNI.pista_attach_lspIO(pista_dev_inst.getCPtr(di), di, port_name);
  }

  public static int pista_config_lspIO(pista_dev_inst di, int baud, char parity, int datab, int stopb, int flow) {
    return PISTAXJNI.pista_config_lspIO(pista_dev_inst.getCPtr(di), di, baud, parity, datab, stopb, flow);
  }

  public static int pista_detach_lspIO(pista_dev_inst di) {
    return PISTAXJNI.pista_detach_lspIO(pista_dev_inst.getCPtr(di), di);
  }

  public static int pista_poll_lspIO(pista_dev_inst di) {
    return PISTAXJNI.pista_poll_lspIO(pista_dev_inst.getCPtr(di), di);
  }

  public static int pista_service_start(pista_discovery_service service) {
    return PISTAXJNI.pista_service_start(pista_discovery_service.getCPtr(service), service);
  }

  public static int pista_service_tick(pista_discovery_service service) {
    return PISTAXJNI.pista_service_tick(pista_discovery_service.getCPtr(service), service);
  }

  public static int pista_service_stop(pista_discovery_service service) {
    return PISTAXJNI.pista_service_stop(pista_discovery_service.getCPtr(service), service);
  }

  public static int pista_set_discovery_handler(pista_discovery_service service, SWIGTYPE_p_f_p_q_const__void_p_q_const__pista_discovery_info__void discoveryfunc, SWIGTYPE_p_void discovery_priv) {
    return PISTAXJNI.pista_set_discovery_handler(pista_discovery_service.getCPtr(service), service, SWIGTYPE_p_f_p_q_const__void_p_q_const__pista_discovery_info__void.getCPtr(discoveryfunc), SWIGTYPE_p_void.getCPtr(discovery_priv));
  }

  public static pista_discovery_service pista_first_service(SWIGTYPE_p_pista_context ctx) {
    long cPtr = PISTAXJNI.pista_first_service(SWIGTYPE_p_pista_context.getCPtr(ctx));
    return (cPtr == 0) ? null : new pista_discovery_service(cPtr, false);
  }

  public static pista_discovery_service pista_find_service(SWIGTYPE_p_pista_context ctx, String name) {
    long cPtr = PISTAXJNI.pista_find_service(SWIGTYPE_p_pista_context.getCPtr(ctx), name);
    return (cPtr == 0) ? null : new pista_discovery_service(cPtr, false);
  }

  public static int pista_service_count(SWIGTYPE_p_pista_context ctx) {
    return PISTAXJNI.pista_service_count(SWIGTYPE_p_pista_context.getCPtr(ctx));
  }

  public static pista_discovery_service pista_service_by_idx(SWIGTYPE_p_pista_context ctx, int idx) {
    long cPtr = PISTAXJNI.pista_service_by_idx(SWIGTYPE_p_pista_context.getCPtr(ctx), idx);
    return (cPtr == 0) ? null : new pista_discovery_service(cPtr, false);
  }

  public static pista_discovery_service pista_next_service(SWIGTYPE_p_pista_context ctx, pista_discovery_service service) {
    long cPtr = PISTAXJNI.pista_next_service(SWIGTYPE_p_pista_context.getCPtr(ctx), pista_discovery_service.getCPtr(service), service);
    return (cPtr == 0) ? null : new pista_discovery_service(cPtr, false);
  }

  public static int pista_probe(pista_dev_driver dev, SWIGTYPE_p_f_p_q_const__void_p_q_const__char_int__int writefunc, SWIGTYPE_p_void writefunc_priv) {
    return PISTAXJNI.pista_probe(pista_dev_driver.getCPtr(dev), dev, SWIGTYPE_p_f_p_q_const__void_p_q_const__char_int__int.getCPtr(writefunc), SWIGTYPE_p_void.getCPtr(writefunc_priv));
  }

  public static int pista_verify(pista_dev_driver dev, byte[] data) {
    return PISTAXJNI.pista_verify(pista_dev_driver.getCPtr(dev), dev, data);
  }

  public static int pista_load_plugin(SWIGTYPE_p_pista_context pctx, String s_name, String s_lib) {
    return PISTAXJNI.pista_load_plugin(SWIGTYPE_p_pista_context.getCPtr(pctx), s_name, s_lib);
  }

  public static int pista_dev_inst_count(pista_dev_driver dev) {
    return PISTAXJNI.pista_dev_inst_count(pista_dev_driver.getCPtr(dev), dev);
  }

  public static pista_dev_inst pista_dev_inst_from_idx(pista_dev_driver dev, int idx) {
    long cPtr = PISTAXJNI.pista_dev_inst_from_idx(pista_dev_driver.getCPtr(dev), dev, idx);
    return (cPtr == 0) ? null : new pista_dev_inst(cPtr, false);
  }

  public static int pista_dev_register_inst(pista_dev_driver dev, pista_dev_inst di) {
    return PISTAXJNI.pista_dev_register_inst(pista_dev_driver.getCPtr(dev), dev, pista_dev_inst.getCPtr(di), di);
  }

  public static int pista_dev_unregister_inst(pista_dev_driver dev, pista_dev_inst di) {
    return PISTAXJNI.pista_dev_unregister_inst(pista_dev_driver.getCPtr(dev), dev, pista_dev_inst.getCPtr(di), di);
  }

  public static int pista_dev_register_stream(pista_dev_inst di, pista_data_packet pkt) {
    return PISTAXJNI.pista_dev_register_stream(pista_dev_inst.getCPtr(di), di, pista_data_packet.getCPtr(pkt), pkt);
  }

  public static void pista_dump_packet(pista_data_packet pkt) {
    PISTAXJNI.pista_dump_packet(pista_data_packet.getCPtr(pkt), pkt);
  }

  public static void pista_dump_java(pista_data_packet pkt) {
    PISTAXJNI.pista_dump_java(pista_data_packet.getCPtr(pkt), pkt);
  }

  public static long pista_get_current_time_with_ms() {
    return PISTAXJNI.pista_get_current_time_with_ms();
  }

  public static String pista_get_field_loc(SWIGTYPE_p_ProtobufCFieldDescriptor fd) {
    return PISTAXJNI.pista_get_field_loc(SWIGTYPE_p_ProtobufCFieldDescriptor.getCPtr(fd));
  }

  public static int pista_get_field_offset(SWIGTYPE_p_ProtobufCFieldDescriptor fd) {
    return PISTAXJNI.pista_get_field_offset(SWIGTYPE_p_ProtobufCFieldDescriptor.getCPtr(fd));
  }

  public static int pista_get_field_count(pista_data_packet pkt) {
    return PISTAXJNI.pista_get_field_count(pista_data_packet.getCPtr(pkt), pkt);
  }

  public static int pista_get_field_spp(SWIGTYPE_p_ProtobufCFieldDescriptor fd) {
    return PISTAXJNI.pista_get_field_spp(SWIGTYPE_p_ProtobufCFieldDescriptor.getCPtr(fd));
  }

  public static int pista_get_field_freq(SWIGTYPE_p_ProtobufCFieldDescriptor fd) {
    return PISTAXJNI.pista_get_field_freq(SWIGTYPE_p_ProtobufCFieldDescriptor.getCPtr(fd));
  }

  public static int pista_get_field_subtyp(SWIGTYPE_p_ProtobufCFieldDescriptor fd) {
    return PISTAXJNI.pista_get_field_subtyp(SWIGTYPE_p_ProtobufCFieldDescriptor.getCPtr(fd));
  }

  public static int pista_get_field_quantifier(pista_data_packet pkt, SWIGTYPE_p_ProtobufCFieldDescriptor fd) {
    return PISTAXJNI.pista_get_field_quantifier(pista_data_packet.getCPtr(pkt), pkt, SWIGTYPE_p_ProtobufCFieldDescriptor.getCPtr(fd));
  }

  public static int pista_set_named_field_spp(SWIGTYPE_p_ProtobufCMessage base, String nm, int spp) {
    return PISTAXJNI.pista_set_named_field_spp(SWIGTYPE_p_ProtobufCMessage.getCPtr(base), nm, spp);
  }

  public static int pista_set_named_field_freq(SWIGTYPE_p_ProtobufCMessage base, String nm, int freq) {
    return PISTAXJNI.pista_set_named_field_freq(SWIGTYPE_p_ProtobufCMessage.getCPtr(base), nm, freq);
  }

  public static SWIGTYPE_p_ProtobufCMessageDescriptor pista_get_message_descriptor(pista_data_packet pkt) {
    long cPtr = PISTAXJNI.pista_get_message_descriptor(pista_data_packet.getCPtr(pkt), pkt);
    return (cPtr == 0) ? null : new SWIGTYPE_p_ProtobufCMessageDescriptor(cPtr, false);
  }

  public static SWIGTYPE_p_ProtobufCFieldDescriptor pista_get_field_descriptor(pista_data_packet pkt, int idx) {
    long cPtr = PISTAXJNI.pista_get_field_descriptor(pista_data_packet.getCPtr(pkt), pkt, idx);
    return (cPtr == 0) ? null : new SWIGTYPE_p_ProtobufCFieldDescriptor(cPtr, false);
  }

  public static String getPistaVersion() {
    return PISTAXJNI.getPistaVersion();
  }

}
