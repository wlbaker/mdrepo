/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGJAVA
#define SWIGJAVA
#endif

#define SWIG_DIRECTORS


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else

/* -----------------------------------------------------------------------------
 * director_common.swg
 *
 * This file contains support for director classes which is common between
 * languages.
 * ----------------------------------------------------------------------------- */

/*
  Use -DSWIG_DIRECTOR_STATIC if you prefer to avoid the use of the
  'Swig' namespace. This could be useful for multi-modules projects.
*/
#ifdef SWIG_DIRECTOR_STATIC
/* Force anonymous (static) namespace */
#define Swig
#endif
/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that Java proxy
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#if defined(DEBUG_DIRECTOR_OWNED) || defined(DEBUG_DIRECTOR_EXCEPTION)
#include <iostream>
#endif

#include <exception>

namespace Swig {

  /* Java object wrapper */
  class JObjectWrapper {
  public:
    JObjectWrapper() : jthis_(NULL), weak_global_(true) {
    }

    ~JObjectWrapper() {
      jthis_ = NULL;
      weak_global_ = true;
    }

    bool set(JNIEnv *jenv, jobject jobj, bool mem_own, bool weak_global) {
      if (!jthis_) {
        weak_global_ = weak_global || !mem_own; // hold as weak global if explicitly requested or not owned
        if (jobj)
          jthis_ = weak_global_ ? jenv->NewWeakGlobalRef(jobj) : jenv->NewGlobalRef(jobj);
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> " << jthis_ << std::endl;
#endif
        return true;
      } else {
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> already set" << std::endl;
#endif
        return false;
      }
    }

    jobject get(JNIEnv *jenv) const {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::get(";
      if (jthis_)
        std::cout << jthis_;
      else
        std::cout << "null";
      std::cout << ") -> return new local ref" << std::endl;
#endif
      return (jthis_ ? jenv->NewLocalRef(jthis_) : jthis_);
    }

    void release(JNIEnv *jenv) {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::release(" << jthis_ << "): " << (weak_global_ ? "weak global ref" : "global ref") << std::endl;
#endif
      if (jthis_) {
        if (weak_global_) {
          if (jenv->IsSameObject(jthis_, NULL) == JNI_FALSE)
            jenv->DeleteWeakGlobalRef((jweak)jthis_);
        } else
          jenv->DeleteGlobalRef(jthis_);
      }

      jthis_ = NULL;
      weak_global_ = true;
    }

    /* Only call peek if you know what you are doing wrt to weak/global references */
    jobject peek() {
      return jthis_;
    }

    /* Java proxy releases ownership of C++ object, C++ object is now
       responsible for destruction (creates NewGlobalRef to pin Java proxy) */
    void java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      if (take_or_release) {  /* Java takes ownership of C++ object's lifetime. */
        if (!weak_global_) {
          jenv->DeleteGlobalRef(jthis_);
          jthis_ = jenv->NewWeakGlobalRef(jself);
          weak_global_ = true;
        }
      } else {
	/* Java releases ownership of C++ object's lifetime */
        if (weak_global_) {
          jenv->DeleteWeakGlobalRef((jweak)jthis_);
          jthis_ = jenv->NewGlobalRef(jself);
          weak_global_ = false;
        }
      }
    }

  private:
    /* pointer to Java object */
    jobject jthis_;
    /* Local or global reference flag */
    bool weak_global_;
  };

  /* Local JNI reference deleter */
  class LocalRefGuard {
    JNIEnv *jenv_;
    jobject jobj_;

    // non-copyable
    LocalRefGuard(const LocalRefGuard &);
    LocalRefGuard &operator=(const LocalRefGuard &);
  public:
    LocalRefGuard(JNIEnv *jenv, jobject jobj): jenv_(jenv), jobj_(jobj) {}
    ~LocalRefGuard() {
      if (jobj_)
        jenv_->DeleteLocalRef(jobj_);
    }
  };

  /* director base class */
  class Director {
    /* pointer to Java virtual machine */
    JavaVM *swig_jvm_;

  protected:
#if defined (_MSC_VER) && (_MSC_VER<1300)
    class JNIEnvWrapper;
    friend class JNIEnvWrapper;
#endif
    /* Utility class for managing the JNI environment */
    class JNIEnvWrapper {
      const Director *director_;
      JNIEnv *jenv_;
      int env_status;
    public:
      JNIEnvWrapper(const Director *director) : director_(director), jenv_(0), env_status(0) {
#if defined(__ANDROID__)
        JNIEnv **jenv = &jenv_;
#else
        void **jenv = (void **)&jenv_;
#endif
        env_status = director_->swig_jvm_->GetEnv((void **)&jenv_, JNI_VERSION_1_2);
#if defined(SWIG_JAVA_ATTACH_CURRENT_THREAD_AS_DAEMON)
        // Attach a daemon thread to the JVM. Useful when the JVM should not wait for
        // the thread to exit upon shutdown. Only for jdk-1.4 and later.
        director_->swig_jvm_->AttachCurrentThreadAsDaemon(jenv, NULL);
#else
        director_->swig_jvm_->AttachCurrentThread(jenv, NULL);
#endif
      }
      ~JNIEnvWrapper() {
#if !defined(SWIG_JAVA_NO_DETACH_CURRENT_THREAD)
        // Some JVMs, eg jdk-1.4.2 and lower on Solaris have a bug and crash with the DetachCurrentThread call.
        // However, without this call, the JVM hangs on exit when the thread was not created by the JVM and creates a memory leak.
        if (env_status == JNI_EDETACHED)
          director_->swig_jvm_->DetachCurrentThread();
#endif
      }
      JNIEnv *getJNIEnv() const {
        return jenv_;
      }
    };

    /* Java object wrapper */
    JObjectWrapper swig_self_;

    /* Disconnect director from Java object */
    void swig_disconnect_director_self(const char *disconn_method) {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      jobject jobj = swig_self_.get(jenv);
      LocalRefGuard ref_deleter(jenv, jobj);
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "Swig::Director::disconnect_director_self(" << jobj << ")" << std::endl;
#endif
      if (jobj && jenv->IsSameObject(jobj, NULL) == JNI_FALSE) {
        jmethodID disconn_meth = jenv->GetMethodID(jenv->GetObjectClass(jobj), disconn_method, "()V");
        if (disconn_meth) {
#if defined(DEBUG_DIRECTOR_OWNED)
          std::cout << "Swig::Director::disconnect_director_self upcall to " << disconn_method << std::endl;
#endif
          jenv->CallVoidMethod(jobj, disconn_meth);
        }
      }
    }

  public:
    Director(JNIEnv *jenv) : swig_jvm_((JavaVM *) NULL), swig_self_() {
      /* Acquire the Java VM pointer */
      jenv->GetJavaVM(&swig_jvm_);
    }

    virtual ~Director() {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      swig_self_.release(jenv);
    }

    bool swig_set_self(JNIEnv *jenv, jobject jself, bool mem_own, bool weak_global) {
      return swig_self_.set(jenv, jself, mem_own, weak_global);
    }

    jobject swig_get_self(JNIEnv *jenv) const {
      return swig_self_.get(jenv);
    }

    // Change C++ object's ownership, relative to Java
    void swig_java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      swig_self_.java_change_ownership(jenv, jself, take_or_release);
    }
  };

  // Zero initialized bool array
  template<size_t N> class BoolArray {
    bool array_[N];
  public:
    BoolArray() {
      memset(array_, 0, sizeof(array_));
    }
    bool& operator[](size_t n) {
      return array_[n];
    }
    bool operator[](size_t n) const {
      return array_[n];
    }
  };

  // Utility classes and functions for exception handling.

  // Simple holder for a Java string during exception handling, providing access to a c-style string
  class JavaString {
  public:
    JavaString(JNIEnv *jenv, jstring jstr) : jenv_(jenv), jstr_(jstr), cstr_(0) {
      if (jenv_ && jstr_)
	cstr_ = (const char *) jenv_->GetStringUTFChars(jstr_, NULL);
    }

    ~JavaString() {
      if (jenv_ && jstr_ && cstr_)
	jenv_->ReleaseStringUTFChars(jstr_, cstr_);
    }

    const char *c_str(const char *null_string = "null JavaString") const {
      return cstr_ ? cstr_ : null_string;
    }

  private:
    // non-copyable
    JavaString(const JavaString &);
    JavaString &operator=(const JavaString &);

    JNIEnv *jenv_;
    jstring jstr_;
    const char *cstr_;
  };

  // Helper class to extract the exception message from a Java throwable
  class JavaExceptionMessage {
  public:
    JavaExceptionMessage(JNIEnv *jenv, jthrowable throwable) : message_(jenv, exceptionMessageFromThrowable(jenv, throwable)) {
    }

    const char *message() const {
      return message_.c_str("Could not get exception message in JavaExceptionMessage");
    }

  private:
    // non-copyable
    JavaExceptionMessage(const JavaExceptionMessage &);
    JavaExceptionMessage &operator=(const JavaExceptionMessage &);

    // Get exception message by calling Java method Throwable.getMessage()
    static jstring exceptionMessageFromThrowable(JNIEnv *jenv, jthrowable throwable) {
      jstring jmsg = NULL;
      if (jenv && throwable) {
	jenv->ExceptionClear(); // Cannot invoke methods with any pending exceptions
	jclass throwclz = jenv->GetObjectClass(throwable);
	if (throwclz) {
	  // All Throwable classes have a getMessage() method, so call it to extract the exception message
	  jmethodID getMessageMethodID = jenv->GetMethodID(throwclz, "getMessage", "()Ljava/lang/String;");
	  if (getMessageMethodID)
	    jmsg = (jstring)jenv->CallObjectMethod(throwable, getMessageMethodID);
	}
	if (jmsg == NULL && jenv->ExceptionCheck())
	  jenv->ExceptionClear();
      }
      return jmsg;
    }

    JavaString message_;
  };

  // C++ Exception class for handling Java exceptions thrown during a director method Java upcall
  class DirectorException : public std::exception {
  public:

    // Construct exception from a Java throwable
    DirectorException(JNIEnv *jenv, jthrowable throwable) : classname_(0), msg_(0) {

      // Call Java method Object.getClass().getName() to obtain the throwable's class name (delimited by '/')
      if (throwable) {
	jclass throwclz = jenv->GetObjectClass(throwable);
	if (throwclz) {
	  jclass clzclz = jenv->GetObjectClass(throwclz);
	  if (clzclz) {
	    jmethodID getNameMethodID = jenv->GetMethodID(clzclz, "getName", "()Ljava/lang/String;");
	    if (getNameMethodID) {
	      jstring jstr_classname = (jstring)(jenv->CallObjectMethod(throwclz, getNameMethodID));
              // Copy strings, since there is no guarantee that jenv will be active when handled
              if (jstr_classname) {
                JavaString jsclassname(jenv, jstr_classname);
                const char *classname = jsclassname.c_str(0);
                if (classname)
                  classname_ = copypath(classname);
              }
	    }
	  }
	}
      }

      JavaExceptionMessage exceptionmsg(jenv, throwable);
      msg_ = copystr(exceptionmsg.message());
    }

    // More general constructor for handling as a java.lang.RuntimeException
    DirectorException(const char *msg) : classname_(0), msg_(copystr(msg ? msg : "Unspecified DirectorException message")) {
    }

    ~DirectorException() throw() {
      delete[] classname_;
      delete[] msg_;
    }

    const char *what() const throw() {
      return msg_;
    }

    // Reconstruct and raise/throw the Java Exception that caused the DirectorException
    // Note that any error in the JNI exception handling results in a Java RuntimeException
    void raiseJavaException(JNIEnv *jenv) const {
      if (jenv) {
	jenv->ExceptionClear();

	jmethodID ctorMethodID = 0;
	jclass throwableclass = 0;
        if (classname_) {
          throwableclass = jenv->FindClass(classname_);
          if (throwableclass)
            ctorMethodID = jenv->GetMethodID(throwableclass, "<init>", "(Ljava/lang/String;)V");
	}

	if (ctorMethodID) {
	  jenv->ThrowNew(throwableclass, what());
	} else {
	  SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, what());
	}
      }
    }

  private:
    static char *copypath(const char *srcmsg) {
      char *target = copystr(srcmsg);
      for (char *c=target; *c; ++c) {
        if ('.' == *c)
          *c = '/';
      }
      return target;
    }

    static char *copystr(const char *srcmsg) {
      char *target = 0;
      if (srcmsg) {
	size_t msglen = strlen(srcmsg) + 1;
	target = new char[msglen];
	strncpy(target, srcmsg, msglen);
      }
      return target;
    }

    const char *classname_;
    const char *msg_;
  };

  // Helper method to determine if a Java throwable matches a particular Java class type
  SWIGINTERN bool ExceptionMatches(JNIEnv *jenv, jthrowable throwable, const char *classname) {
    bool matches = false;

    if (throwable && jenv && classname) {
      // Exceptions need to be cleared for correct behavior.
      // The caller of ExceptionMatches should restore pending exceptions if desired -
      // the caller already has the throwable.
      jenv->ExceptionClear();

      jclass clz = jenv->FindClass(classname);
      if (clz) {
	jclass classclz = jenv->GetObjectClass(clz);
	jmethodID isInstanceMethodID = jenv->GetMethodID(classclz, "isInstance", "(Ljava/lang/Object;)Z");
	if (isInstanceMethodID) {
	  matches = jenv->CallBooleanMethod(clz, isInstanceMethodID, throwable) != 0;
	}
      }

#if defined(DEBUG_DIRECTOR_EXCEPTION)
      if (jenv->ExceptionCheck()) {
        // Typically occurs when an invalid classname argument is passed resulting in a ClassNotFoundException
        JavaExceptionMessage exc(jenv, jenv->ExceptionOccurred());
        std::cout << "Error: ExceptionMatches: class '" << classname << "' : " << exc.message() << std::endl;
      }
#endif
    }
    return matches;
  }
}

namespace Swig {
  namespace {
    jclass jclass_PISTAXJNI = NULL;
    jmethodID director_method_ids[6];
  }
}

#include <stdint.h>		// Use the C99 official header


/* Includes the header in the wrapper code */
#include <iostream>
#include <stdint.h>

#include "config.h"
#include "pista.h"

#include "pista-cl.h"


#pragma GCC diagnostic ignored "-Wunused-function"


#if defined(SWIG_NOINCLUDE) || defined(SWIG_NOARRAYS)


static int SWIG_JavaArrayInBool (JNIEnv *jenv, jboolean **jarr, bool **carr, jbooleanArray input);
static void SWIG_JavaArrayArgoutBool (JNIEnv *jenv, jboolean *jarr, bool *carr, jbooleanArray input);
static jbooleanArray SWIG_JavaArrayOutBool (JNIEnv *jenv, bool *result, jsize sz);


static int SWIG_JavaArrayInSchar (JNIEnv *jenv, jbyte **jarr, signed char **carr, jbyteArray input);
static void SWIG_JavaArrayArgoutSchar (JNIEnv *jenv, jbyte *jarr, signed char *carr, jbyteArray input);
static jbyteArray SWIG_JavaArrayOutSchar (JNIEnv *jenv, signed char *result, jsize sz);


static int SWIG_JavaArrayInUchar (JNIEnv *jenv, jshort **jarr, unsigned char **carr, jshortArray input);
static void SWIG_JavaArrayArgoutUchar (JNIEnv *jenv, jshort *jarr, unsigned char *carr, jshortArray input);
static jshortArray SWIG_JavaArrayOutUchar (JNIEnv *jenv, unsigned char *result, jsize sz);


static int SWIG_JavaArrayInShort (JNIEnv *jenv, jshort **jarr, short **carr, jshortArray input);
static void SWIG_JavaArrayArgoutShort (JNIEnv *jenv, jshort *jarr, short *carr, jshortArray input);
static jshortArray SWIG_JavaArrayOutShort (JNIEnv *jenv, short *result, jsize sz);


static int SWIG_JavaArrayInUshort (JNIEnv *jenv, jint **jarr, unsigned short **carr, jintArray input);
static void SWIG_JavaArrayArgoutUshort (JNIEnv *jenv, jint *jarr, unsigned short *carr, jintArray input);
static jintArray SWIG_JavaArrayOutUshort (JNIEnv *jenv, unsigned short *result, jsize sz);


static int SWIG_JavaArrayInInt (JNIEnv *jenv, jint **jarr, int **carr, jintArray input);
static void SWIG_JavaArrayArgoutInt (JNIEnv *jenv, jint *jarr, int *carr, jintArray input);
static jintArray SWIG_JavaArrayOutInt (JNIEnv *jenv, int *result, jsize sz);


static int SWIG_JavaArrayInUint (JNIEnv *jenv, jlong **jarr, unsigned int **carr, jlongArray input);
static void SWIG_JavaArrayArgoutUint (JNIEnv *jenv, jlong *jarr, unsigned int *carr, jlongArray input);
static jlongArray SWIG_JavaArrayOutUint (JNIEnv *jenv, unsigned int *result, jsize sz);


static int SWIG_JavaArrayInLong (JNIEnv *jenv, jint **jarr, long **carr, jintArray input);
static void SWIG_JavaArrayArgoutLong (JNIEnv *jenv, jint *jarr, long *carr, jintArray input);
static jintArray SWIG_JavaArrayOutLong (JNIEnv *jenv, long *result, jsize sz);


static int SWIG_JavaArrayInUlong (JNIEnv *jenv, jlong **jarr, unsigned long **carr, jlongArray input);
static void SWIG_JavaArrayArgoutUlong (JNIEnv *jenv, jlong *jarr, unsigned long *carr, jlongArray input);
static jlongArray SWIG_JavaArrayOutUlong (JNIEnv *jenv, unsigned long *result, jsize sz);


static int SWIG_JavaArrayInLonglong (JNIEnv *jenv, jlong **jarr, jlong **carr, jlongArray input);
static void SWIG_JavaArrayArgoutLonglong (JNIEnv *jenv, jlong *jarr, jlong *carr, jlongArray input);
static jlongArray SWIG_JavaArrayOutLonglong (JNIEnv *jenv, jlong *result, jsize sz);


static int SWIG_JavaArrayInFloat (JNIEnv *jenv, jfloat **jarr, float **carr, jfloatArray input);
static void SWIG_JavaArrayArgoutFloat (JNIEnv *jenv, jfloat *jarr, float *carr, jfloatArray input);
static jfloatArray SWIG_JavaArrayOutFloat (JNIEnv *jenv, float *result, jsize sz);


static int SWIG_JavaArrayInDouble (JNIEnv *jenv, jdouble **jarr, double **carr, jdoubleArray input);
static void SWIG_JavaArrayArgoutDouble (JNIEnv *jenv, jdouble *jarr, double *carr, jdoubleArray input);
static jdoubleArray SWIG_JavaArrayOutDouble (JNIEnv *jenv, double *result, jsize sz);


#else


/* bool[] support */
static int SWIG_JavaArrayInBool (JNIEnv *jenv, jboolean **jarr, bool **carr, jbooleanArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetBooleanArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new bool[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = ((*jarr)[i] != 0);
  return 1;
}

static void SWIG_JavaArrayArgoutBool (JNIEnv *jenv, jboolean *jarr, bool *carr, jbooleanArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jboolean)carr[i];
  jenv->ReleaseBooleanArrayElements(input, jarr, 0);
}

static jbooleanArray SWIG_JavaArrayOutBool (JNIEnv *jenv, bool *result, jsize sz) {
  jboolean *arr;
  int i;
  jbooleanArray jresult = jenv->NewBooleanArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetBooleanArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jboolean)result[i];
  jenv->ReleaseBooleanArrayElements(jresult, arr, 0);
  return jresult;
}


/* signed char[] support */
static int SWIG_JavaArrayInSchar (JNIEnv *jenv, jbyte **jarr, signed char **carr, jbyteArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetByteArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new signed char[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (signed char)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutSchar (JNIEnv *jenv, jbyte *jarr, signed char *carr, jbyteArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jbyte)carr[i];
  jenv->ReleaseByteArrayElements(input, jarr, 0);
}

static jbyteArray SWIG_JavaArrayOutSchar (JNIEnv *jenv, signed char *result, jsize sz) {
  jbyte *arr;
  int i;
  jbyteArray jresult = jenv->NewByteArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetByteArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jbyte)result[i];
  jenv->ReleaseByteArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned char[] support */
static int SWIG_JavaArrayInUchar (JNIEnv *jenv, jshort **jarr, unsigned char **carr, jshortArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetShortArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned char[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned char)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutUchar (JNIEnv *jenv, jshort *jarr, unsigned char *carr, jshortArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jshort)carr[i];
  jenv->ReleaseShortArrayElements(input, jarr, 0);
}

static jshortArray SWIG_JavaArrayOutUchar (JNIEnv *jenv, unsigned char *result, jsize sz) {
  jshort *arr;
  int i;
  jshortArray jresult = jenv->NewShortArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetShortArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jshort)result[i];
  jenv->ReleaseShortArrayElements(jresult, arr, 0);
  return jresult;
}


/* short[] support */
static int SWIG_JavaArrayInShort (JNIEnv *jenv, jshort **jarr, short **carr, jshortArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetShortArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new short[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (short)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutShort (JNIEnv *jenv, jshort *jarr, short *carr, jshortArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jshort)carr[i];
  jenv->ReleaseShortArrayElements(input, jarr, 0);
}

static jshortArray SWIG_JavaArrayOutShort (JNIEnv *jenv, short *result, jsize sz) {
  jshort *arr;
  int i;
  jshortArray jresult = jenv->NewShortArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetShortArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jshort)result[i];
  jenv->ReleaseShortArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned short[] support */
static int SWIG_JavaArrayInUshort (JNIEnv *jenv, jint **jarr, unsigned short **carr, jintArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetIntArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned short[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned short)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutUshort (JNIEnv *jenv, jint *jarr, unsigned short *carr, jintArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jint)carr[i];
  jenv->ReleaseIntArrayElements(input, jarr, 0);
}

static jintArray SWIG_JavaArrayOutUshort (JNIEnv *jenv, unsigned short *result, jsize sz) {
  jint *arr;
  int i;
  jintArray jresult = jenv->NewIntArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetIntArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jint)result[i];
  jenv->ReleaseIntArrayElements(jresult, arr, 0);
  return jresult;
}


/* int[] support */
static int SWIG_JavaArrayInInt (JNIEnv *jenv, jint **jarr, int **carr, jintArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetIntArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new int[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (int)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutInt (JNIEnv *jenv, jint *jarr, int *carr, jintArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jint)carr[i];
  jenv->ReleaseIntArrayElements(input, jarr, 0);
}

static jintArray SWIG_JavaArrayOutInt (JNIEnv *jenv, int *result, jsize sz) {
  jint *arr;
  int i;
  jintArray jresult = jenv->NewIntArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetIntArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jint)result[i];
  jenv->ReleaseIntArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned int[] support */
static int SWIG_JavaArrayInUint (JNIEnv *jenv, jlong **jarr, unsigned int **carr, jlongArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetLongArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned int[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned int)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutUint (JNIEnv *jenv, jlong *jarr, unsigned int *carr, jlongArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jlong)carr[i];
  jenv->ReleaseLongArrayElements(input, jarr, 0);
}

static jlongArray SWIG_JavaArrayOutUint (JNIEnv *jenv, unsigned int *result, jsize sz) {
  jlong *arr;
  int i;
  jlongArray jresult = jenv->NewLongArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetLongArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jlong)result[i];
  jenv->ReleaseLongArrayElements(jresult, arr, 0);
  return jresult;
}


/* long[] support */
static int SWIG_JavaArrayInLong (JNIEnv *jenv, jint **jarr, long **carr, jintArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetIntArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new long[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (long)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutLong (JNIEnv *jenv, jint *jarr, long *carr, jintArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jint)carr[i];
  jenv->ReleaseIntArrayElements(input, jarr, 0);
}

static jintArray SWIG_JavaArrayOutLong (JNIEnv *jenv, long *result, jsize sz) {
  jint *arr;
  int i;
  jintArray jresult = jenv->NewIntArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetIntArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jint)result[i];
  jenv->ReleaseIntArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned long[] support */
static int SWIG_JavaArrayInUlong (JNIEnv *jenv, jlong **jarr, unsigned long **carr, jlongArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetLongArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned long[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned long)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutUlong (JNIEnv *jenv, jlong *jarr, unsigned long *carr, jlongArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jlong)carr[i];
  jenv->ReleaseLongArrayElements(input, jarr, 0);
}

static jlongArray SWIG_JavaArrayOutUlong (JNIEnv *jenv, unsigned long *result, jsize sz) {
  jlong *arr;
  int i;
  jlongArray jresult = jenv->NewLongArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetLongArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jlong)result[i];
  jenv->ReleaseLongArrayElements(jresult, arr, 0);
  return jresult;
}


/* jlong[] support */
static int SWIG_JavaArrayInLonglong (JNIEnv *jenv, jlong **jarr, jlong **carr, jlongArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetLongArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new jlong[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (jlong)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutLonglong (JNIEnv *jenv, jlong *jarr, jlong *carr, jlongArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jlong)carr[i];
  jenv->ReleaseLongArrayElements(input, jarr, 0);
}

static jlongArray SWIG_JavaArrayOutLonglong (JNIEnv *jenv, jlong *result, jsize sz) {
  jlong *arr;
  int i;
  jlongArray jresult = jenv->NewLongArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetLongArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jlong)result[i];
  jenv->ReleaseLongArrayElements(jresult, arr, 0);
  return jresult;
}


/* float[] support */
static int SWIG_JavaArrayInFloat (JNIEnv *jenv, jfloat **jarr, float **carr, jfloatArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetFloatArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new float[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (float)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutFloat (JNIEnv *jenv, jfloat *jarr, float *carr, jfloatArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jfloat)carr[i];
  jenv->ReleaseFloatArrayElements(input, jarr, 0);
}

static jfloatArray SWIG_JavaArrayOutFloat (JNIEnv *jenv, float *result, jsize sz) {
  jfloat *arr;
  int i;
  jfloatArray jresult = jenv->NewFloatArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetFloatArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jfloat)result[i];
  jenv->ReleaseFloatArrayElements(jresult, arr, 0);
  return jresult;
}


/* double[] support */
static int SWIG_JavaArrayInDouble (JNIEnv *jenv, jdouble **jarr, double **carr, jdoubleArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetDoubleArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new double[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (double)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutDouble (JNIEnv *jenv, jdouble *jarr, double *carr, jdoubleArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jdouble)carr[i];
  jenv->ReleaseDoubleArrayElements(input, jarr, 0);
}

static jdoubleArray SWIG_JavaArrayOutDouble (JNIEnv *jenv, double *result, jsize sz) {
  jdouble *arr;
  int i;
  jdoubleArray jresult = jenv->NewDoubleArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetDoubleArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jdouble)result[i];
  jenv->ReleaseDoubleArrayElements(jresult, arr, 0);
  return jresult;
}


#endif



/***

// A debug class for testing various swig options and configurations

class loco {
    public:

    float *func1( int desc_idx, size_t *len ) {
        static float output[] = {1.0f, 2.0f, 3.0f, 4.0f};
        if( len != NULL && *len > 4 ) {
            *len = sizeof( output )/ sizeof( float );
        }
        return output;
    }
};
***/




/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "pistaxJAVA_wrap.h"

SwigDirector_PistaEventHandler::SwigDirector_PistaEventHandler(JNIEnv *jenv) : pistax::PistaEventHandler(), Swig::Director(jenv) {
}

SwigDirector_PistaEventHandler::~SwigDirector_PistaEventHandler() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


int SwigDirector_PistaEventHandler::event(pistax::PistaDev *dev, pistax::PistaDataPacket *pkt) {
  int c_result = SwigValueInit< int >() ;
  jint jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jdev = 0 ;
  jlong jpkt = 0 ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method pistax::PistaEventHandler::event.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((pistax::PistaDev **)&jdev) = (pistax::PistaDev *) dev; 
    *((pistax::PistaDataPacket **)&jpkt) = (pistax::PistaDataPacket *) pkt; 
    jresult = (jint) jenv->CallStaticIntMethod(Swig::jclass_PISTAXJNI, Swig::director_method_ids[0], swigjobj, jdev, jpkt);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = (int)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in pistax::PistaEventHandler::event ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_PistaEventHandler::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "event", "(Lorg/pistax/PistaDev;Lorg/pistax/PistaDataPacket;)I", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("org/pistax/PistaEventHandler");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 1; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_PistaCommHandler::SwigDirector_PistaCommHandler(JNIEnv *jenv) : pistax::PistaCommHandler(), Swig::Director(jenv) {
}

SwigDirector_PistaCommHandler::~SwigDirector_PistaCommHandler() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


int SwigDirector_PistaCommHandler::open() {
  int c_result = SwigValueInit< int >() ;
  jint jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    return pistax::PistaCommHandler::open();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jint) jenv->CallStaticIntMethod(Swig::jclass_PISTAXJNI, Swig::director_method_ids[1], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = (int)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in pistax::PistaCommHandler::open ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

int SwigDirector_PistaCommHandler::config(int baud, int datab, int stopb, char parity) {
  int c_result = SwigValueInit< int >() ;
  jint jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jint jbaud  ;
  jint jdatab  ;
  jint jstopb  ;
  jchar jparity  ;
  
  if (!swig_override[1]) {
    return pistax::PistaCommHandler::config(baud,datab,stopb,parity);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jbaud = (jint) baud;
    jdatab = (jint) datab;
    jstopb = (jint) stopb;
    jparity = (jint) parity;
    jresult = (jint) jenv->CallStaticIntMethod(Swig::jclass_PISTAXJNI, Swig::director_method_ids[2], swigjobj, jbaud, jdatab, jstopb, jparity);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = (int)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in pistax::PistaCommHandler::config ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

int SwigDirector_PistaCommHandler::write(char const data[], size_t len) {
  int c_result = SwigValueInit< int >() ;
  jint jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jbyteArray jdata  ;
  
  if (!swig_override[2]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method pistax::PistaCommHandler::write.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jdata = 0;
    if (data) {
      jdata = jenv->NewByteArray((jsize)len);
      if (!jdata) return c_result;
      jenv->SetByteArrayRegion(jdata, 0, (jsize)len, (jbyte *)data);
    }
    Swig::LocalRefGuard data_refguard(jenv, jdata);
    jresult = (jint) jenv->CallStaticIntMethod(Swig::jclass_PISTAXJNI, Swig::director_method_ids[3], swigjobj, jdata);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = (int)jresult; 
    if (jdata && data) jenv->GetByteArrayRegion(jdata, 0, (jsize)len, (jbyte *)data);
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in pistax::PistaCommHandler::write ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

int SwigDirector_PistaCommHandler::close() {
  int c_result = SwigValueInit< int >() ;
  jint jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[3]) {
    return pistax::PistaCommHandler::close();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jint) jenv->CallStaticIntMethod(Swig::jclass_PISTAXJNI, Swig::director_method_ids[4], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = (int)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in pistax::PistaCommHandler::close ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_PistaCommHandler::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "open", "()I", NULL 
    },
    {
      "config", "(IIIC)I", NULL 
    },
    {
      "write", "([B)I", NULL 
    },
    {
      "close", "()I", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("org/pistax/PistaCommHandler");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 4; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_PistaDiscoveryHandler::SwigDirector_PistaDiscoveryHandler(JNIEnv *jenv) : pistax::PistaDiscoveryHandler(), Swig::Director(jenv) {
}

SwigDirector_PistaDiscoveryHandler::~SwigDirector_PistaDiscoveryHandler() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_PistaDiscoveryHandler::discovery(int64_t tm, int event_type, char const *name, char const *url) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jtm  ;
  jint jevent_type  ;
  jstring jname = 0 ;
  jstring jurl = 0 ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method pistax::PistaDiscoveryHandler::discovery.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jtm = (jlong) tm;
    jevent_type = (jint) event_type;
    jname = 0;
    if (name) {
      jname = jenv->NewStringUTF((const char *)name);
      if (!jname) return ;
    }
    Swig::LocalRefGuard name_refguard(jenv, jname);
    jurl = 0;
    if (url) {
      jurl = jenv->NewStringUTF((const char *)url);
      if (!jurl) return ;
    }
    Swig::LocalRefGuard url_refguard(jenv, jurl);
    jenv->CallStaticVoidMethod(Swig::jclass_PISTAXJNI, Swig::director_method_ids[5], swigjobj, jtm, jevent_type, jname, jurl);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in pistax::PistaDiscoveryHandler::discovery ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_PistaDiscoveryHandler::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "discovery", "(JILjava/lang/String;Ljava/lang/String;)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("org/pistax/PistaDiscoveryHandler");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 1; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}



#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void JNICALL Java_org_pistax_PISTAXJNI_pista_1data_1packet_1tm_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pista_data_packet *arg1 = (pista_data_packet *) 0 ;
  int64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pista_data_packet **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  if (arg1) (arg1)->tm = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pistax_PISTAXJNI_pista_1data_1packet_1tm_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pista_data_packet *arg1 = (pista_data_packet *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pista_data_packet **)&jarg1; 
  result = (int64_t) ((arg1)->tm);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pistax_PISTAXJNI_pista_1data_1packet_1source_1name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pista_data_packet *arg1 = (pista_data_packet *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pista_data_packet **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->source_name, (const char *)arg2, 16-1);
      arg1->source_name[16-1] = 0;
    } else {
      arg1->source_name[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_org_pistax_PISTAXJNI_pista_1data_1packet_1source_1name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pista_data_packet *arg1 = (pista_data_packet *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pista_data_packet **)&jarg1; 
  result = (char *)(char *) ((arg1)->source_name);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pistax_PISTAXJNI_pista_1data_1packet_1stream_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pista_data_packet *arg1 = (pista_data_packet *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pista_data_packet **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->stream_id = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pistax_PISTAXJNI_pista_1data_1packet_1stream_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pista_data_packet *arg1 = (pista_data_packet *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pista_data_packet **)&jarg1; 
  result = (int32_t) ((arg1)->stream_id);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pistax_PISTAXJNI_pista_1data_1packet_1payload_1sz_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pista_data_packet *arg1 = (pista_data_packet *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pista_data_packet **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->payload_sz = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pistax_PISTAXJNI_pista_1data_1packet_1payload_1sz_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pista_data_packet *arg1 = (pista_data_packet *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pista_data_packet **)&jarg1; 
  result = (int32_t) ((arg1)->payload_sz);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pistax_PISTAXJNI_pista_1data_1packet_1payload_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pista_data_packet *arg1 = (pista_data_packet *) 0 ;
  void *arg2 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pista_data_packet **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  if (arg1) (arg1)->payload = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pistax_PISTAXJNI_pista_1data_1packet_1payload_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pista_data_packet *arg1 = (pista_data_packet *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pista_data_packet **)&jarg1; 
  result = (void *) ((arg1)->payload);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pistax_PISTAXJNI_pista_1data_1packet_1next_1stream_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pista_data_packet *arg1 = (pista_data_packet *) 0 ;
  pista_data_packet *arg2 = (pista_data_packet *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pista_data_packet **)&jarg1; 
  arg2 = *(pista_data_packet **)&jarg2; 
  if (arg1) (arg1)->next_stream = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pistax_PISTAXJNI_pista_1data_1packet_1next_1stream_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pista_data_packet *arg1 = (pista_data_packet *) 0 ;
  pista_data_packet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pista_data_packet **)&jarg1; 
  result = (pista_data_packet *) ((arg1)->next_stream);
  *(pista_data_packet **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pistax_PISTAXJNI_new_1pista_1data_1packet(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pista_data_packet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pista_data_packet *)new pista_data_packet();
  *(pista_data_packet **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pistax_PISTAXJNI_delete_1pista_1data_1packet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pista_data_packet *arg1 = (pista_data_packet *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pista_data_packet **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pistax_PISTAXJNI_pista_1discovery_1info_1tm_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pista_discovery_info *arg1 = (pista_discovery_info *) 0 ;
  int64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pista_discovery_info **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  if (arg1) (arg1)->tm = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pistax_PISTAXJNI_pista_1discovery_1info_1tm_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pista_discovery_info *arg1 = (pista_discovery_info *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pista_discovery_info **)&jarg1; 
  result = (int64_t) ((arg1)->tm);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pistax_PISTAXJNI_pista_1discovery_1info_1event_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pista_discovery_info *arg1 = (pista_discovery_info *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pista_discovery_info **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->event_type = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pistax_PISTAXJNI_pista_1discovery_1info_1event_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pista_discovery_info *arg1 = (pista_discovery_info *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pista_discovery_info **)&jarg1; 
  result = (int32_t) ((arg1)->event_type);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pistax_PISTAXJNI_pista_1discovery_1info_1name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pista_discovery_info *arg1 = (pista_discovery_info *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pista_discovery_info **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if (arg2) {
      arg1->name = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->name, (const char *)arg2);
    } else {
      arg1->name = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_org_pistax_PISTAXJNI_pista_1discovery_1info_1name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pista_discovery_info *arg1 = (pista_discovery_info *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pista_discovery_info **)&jarg1; 
  result = (char *) ((arg1)->name);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pistax_PISTAXJNI_pista_1discovery_1info_1url_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pista_discovery_info *arg1 = (pista_discovery_info *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pista_discovery_info **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if (arg2) {
      arg1->url = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->url, (const char *)arg2);
    } else {
      arg1->url = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_org_pistax_PISTAXJNI_pista_1discovery_1info_1url_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pista_discovery_info *arg1 = (pista_discovery_info *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pista_discovery_info **)&jarg1; 
  result = (char *) ((arg1)->url);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pistax_PISTAXJNI_new_1pista_1discovery_1info(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pista_discovery_info *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pista_discovery_info *)new pista_discovery_info();
  *(pista_discovery_info **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pistax_PISTAXJNI_delete_1pista_1discovery_1info(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pista_discovery_info *arg1 = (pista_discovery_info *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pista_discovery_info **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pistax_PISTAXJNI_pista_1discovery_1service_1name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pista_discovery_service *arg1 = (pista_discovery_service *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pista_discovery_service **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->name;
    if (arg2) {
      arg1->name = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->name, (const char *)arg2);
    } else {
      arg1->name = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_org_pistax_PISTAXJNI_pista_1discovery_1service_1name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pista_discovery_service *arg1 = (pista_discovery_service *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pista_discovery_service **)&jarg1; 
  result = (char *) ((arg1)->name);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pistax_PISTAXJNI_pista_1discovery_1service_1longname_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pista_discovery_service *arg1 = (pista_discovery_service *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pista_discovery_service **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->longname;
    if (arg2) {
      arg1->longname = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->longname, (const char *)arg2);
    } else {
      arg1->longname = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_org_pistax_PISTAXJNI_pista_1discovery_1service_1longname_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pista_discovery_service *arg1 = (pista_discovery_service *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pista_discovery_service **)&jarg1; 
  result = (char *) ((arg1)->longname);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pistax_PISTAXJNI_pista_1discovery_1service_1api_1version_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pista_discovery_service *arg1 = (pista_discovery_service *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pista_discovery_service **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->api_version = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pistax_PISTAXJNI_pista_1discovery_1service_1api_1version_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pista_discovery_service *arg1 = (pista_discovery_service *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pista_discovery_service **)&jarg1; 
  result = (int) ((arg1)->api_version);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pistax_PISTAXJNI_pista_1discovery_1service_1init_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pista_discovery_service *arg1 = (pista_discovery_service *) 0 ;
  pista_discovery_service *(*arg2)(pista_context *) = (pista_discovery_service *(*)(pista_context *)) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pista_discovery_service **)&jarg1; 
  arg2 = *(pista_discovery_service *(**)(pista_context *))&jarg2; 
  if (arg1) (arg1)->init = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pistax_PISTAXJNI_pista_1discovery_1service_1init_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pista_discovery_service *arg1 = (pista_discovery_service *) 0 ;
  pista_discovery_service *(*result)(pista_context *) = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pista_discovery_service **)&jarg1; 
  result = (pista_discovery_service *(*)(pista_context *)) ((arg1)->init);
  *(pista_discovery_service *(**)(pista_context *))&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pistax_PISTAXJNI_pista_1discovery_1service_1cleanup_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pista_discovery_service *arg1 = (pista_discovery_service *) 0 ;
  int (*arg2)(pista_discovery_service const *) = (int (*)(pista_discovery_service const *)) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pista_discovery_service **)&jarg1; 
  arg2 = *(int (**)(pista_discovery_service const *))&jarg2; 
  if (arg1) (arg1)->cleanup = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pistax_PISTAXJNI_pista_1discovery_1service_1cleanup_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pista_discovery_service *arg1 = (pista_discovery_service *) 0 ;
  int (*result)(pista_discovery_service const *) = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pista_discovery_service **)&jarg1; 
  result = (int (*)(pista_discovery_service const *)) ((arg1)->cleanup);
  *(int (**)(pista_discovery_service const *))&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pistax_PISTAXJNI_pista_1discovery_1service_1set_1discovery_1handler_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pista_discovery_service *arg1 = (pista_discovery_service *) 0 ;
  int (*arg2)(pista_discovery_service const *,discoveryfunc_t,void *) = (int (*)(pista_discovery_service const *,discoveryfunc_t,void *)) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pista_discovery_service **)&jarg1; 
  arg2 = *(int (**)(pista_discovery_service const *,discoveryfunc_t,void *))&jarg2; 
  if (arg1) (arg1)->set_discovery_handler = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pistax_PISTAXJNI_pista_1discovery_1service_1set_1discovery_1handler_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pista_discovery_service *arg1 = (pista_discovery_service *) 0 ;
  int (*result)(pista_discovery_service const *,discoveryfunc_t,void *) = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pista_discovery_service **)&jarg1; 
  result = (int (*)(pista_discovery_service const *,discoveryfunc_t,void *)) ((arg1)->set_discovery_handler);
  *(int (**)(pista_discovery_service const *,discoveryfunc_t,void *))&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pistax_PISTAXJNI_pista_1discovery_1service_1start_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pista_discovery_service *arg1 = (pista_discovery_service *) 0 ;
  int (*arg2)(pista_discovery_service const *) = (int (*)(pista_discovery_service const *)) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pista_discovery_service **)&jarg1; 
  arg2 = *(int (**)(pista_discovery_service const *))&jarg2; 
  if (arg1) (arg1)->start = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pistax_PISTAXJNI_pista_1discovery_1service_1start_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pista_discovery_service *arg1 = (pista_discovery_service *) 0 ;
  int (*result)(pista_discovery_service const *) = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pista_discovery_service **)&jarg1; 
  result = (int (*)(pista_discovery_service const *)) ((arg1)->start);
  *(int (**)(pista_discovery_service const *))&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pistax_PISTAXJNI_pista_1discovery_1service_1stop_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pista_discovery_service *arg1 = (pista_discovery_service *) 0 ;
  int (*arg2)(pista_discovery_service const *) = (int (*)(pista_discovery_service const *)) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pista_discovery_service **)&jarg1; 
  arg2 = *(int (**)(pista_discovery_service const *))&jarg2; 
  if (arg1) (arg1)->stop = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pistax_PISTAXJNI_pista_1discovery_1service_1stop_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pista_discovery_service *arg1 = (pista_discovery_service *) 0 ;
  int (*result)(pista_discovery_service const *) = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pista_discovery_service **)&jarg1; 
  result = (int (*)(pista_discovery_service const *)) ((arg1)->stop);
  *(int (**)(pista_discovery_service const *))&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pistax_PISTAXJNI_pista_1discovery_1service_1tick_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pista_discovery_service *arg1 = (pista_discovery_service *) 0 ;
  int (*arg2)(pista_discovery_service const *) = (int (*)(pista_discovery_service const *)) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pista_discovery_service **)&jarg1; 
  arg2 = *(int (**)(pista_discovery_service const *))&jarg2; 
  if (arg1) (arg1)->tick = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pistax_PISTAXJNI_pista_1discovery_1service_1tick_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pista_discovery_service *arg1 = (pista_discovery_service *) 0 ;
  int (*result)(pista_discovery_service const *) = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pista_discovery_service **)&jarg1; 
  result = (int (*)(pista_discovery_service const *)) ((arg1)->tick);
  *(int (**)(pista_discovery_service const *))&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pistax_PISTAXJNI_pista_1discovery_1service_1priv_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pista_discovery_service *arg1 = (pista_discovery_service *) 0 ;
  void *arg2 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pista_discovery_service **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  if (arg1) (arg1)->priv = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pistax_PISTAXJNI_pista_1discovery_1service_1priv_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pista_discovery_service *arg1 = (pista_discovery_service *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pista_discovery_service **)&jarg1; 
  result = (void *) ((arg1)->priv);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pistax_PISTAXJNI_new_1pista_1discovery_1service(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pista_discovery_service *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pista_discovery_service *)new pista_discovery_service();
  *(pista_discovery_service **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pistax_PISTAXJNI_delete_1pista_1discovery_1service(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pista_discovery_service *arg1 = (pista_discovery_service *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pista_discovery_service **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pistax_PISTAXJNI_pista_1dev_1driver_1name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pista_dev_driver *arg1 = (pista_dev_driver *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pista_dev_driver **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->name;
    if (arg2) {
      arg1->name = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->name, (const char *)arg2);
    } else {
      arg1->name = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_org_pistax_PISTAXJNI_pista_1dev_1driver_1name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pista_dev_driver *arg1 = (pista_dev_driver *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pista_dev_driver **)&jarg1; 
  result = (char *) ((arg1)->name);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pistax_PISTAXJNI_pista_1dev_1driver_1longname_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pista_dev_driver *arg1 = (pista_dev_driver *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pista_dev_driver **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->longname;
    if (arg2) {
      arg1->longname = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->longname, (const char *)arg2);
    } else {
      arg1->longname = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_org_pistax_PISTAXJNI_pista_1dev_1driver_1longname_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pista_dev_driver *arg1 = (pista_dev_driver *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pista_dev_driver **)&jarg1; 
  result = (char *) ((arg1)->longname);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pistax_PISTAXJNI_pista_1dev_1driver_1api_1version_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pista_dev_driver *arg1 = (pista_dev_driver *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pista_dev_driver **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->api_version = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pistax_PISTAXJNI_pista_1dev_1driver_1api_1version_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pista_dev_driver *arg1 = (pista_dev_driver *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pista_dev_driver **)&jarg1; 
  result = (int) ((arg1)->api_version);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pistax_PISTAXJNI_pista_1dev_1driver_1init_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pista_dev_driver *arg1 = (pista_dev_driver *) 0 ;
  pista_dev_driver *(*arg2)(pista_context *) = (pista_dev_driver *(*)(pista_context *)) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pista_dev_driver **)&jarg1; 
  arg2 = *(pista_dev_driver *(**)(pista_context *))&jarg2; 
  if (arg1) (arg1)->init = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pistax_PISTAXJNI_pista_1dev_1driver_1init_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pista_dev_driver *arg1 = (pista_dev_driver *) 0 ;
  pista_dev_driver *(*result)(pista_context *) = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pista_dev_driver **)&jarg1; 
  result = (pista_dev_driver *(*)(pista_context *)) ((arg1)->init);
  *(pista_dev_driver *(**)(pista_context *))&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pistax_PISTAXJNI_pista_1dev_1driver_1cleanup_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pista_dev_driver *arg1 = (pista_dev_driver *) 0 ;
  int (*arg2)(pista_dev_driver *) = (int (*)(pista_dev_driver *)) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pista_dev_driver **)&jarg1; 
  arg2 = *(int (**)(pista_dev_driver *))&jarg2; 
  if (arg1) (arg1)->cleanup = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pistax_PISTAXJNI_pista_1dev_1driver_1cleanup_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pista_dev_driver *arg1 = (pista_dev_driver *) 0 ;
  int (*result)(pista_dev_driver *) = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pista_dev_driver **)&jarg1; 
  result = (int (*)(pista_dev_driver *)) ((arg1)->cleanup);
  *(int (**)(pista_dev_driver *))&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pistax_PISTAXJNI_pista_1dev_1driver_1probe_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pista_dev_driver *arg1 = (pista_dev_driver *) 0 ;
  int (*arg2)(commfunc_t,void *) = (int (*)(commfunc_t,void *)) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pista_dev_driver **)&jarg1; 
  arg2 = *(int (**)(commfunc_t,void *))&jarg2; 
  if (arg1) (arg1)->probe = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pistax_PISTAXJNI_pista_1dev_1driver_1probe_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pista_dev_driver *arg1 = (pista_dev_driver *) 0 ;
  int (*result)(commfunc_t,void *) = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pista_dev_driver **)&jarg1; 
  result = (int (*)(commfunc_t,void *)) ((arg1)->probe);
  *(int (**)(commfunc_t,void *))&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pistax_PISTAXJNI_pista_1dev_1driver_1verify_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pista_dev_driver *arg1 = (pista_dev_driver *) 0 ;
  int (*arg2)(char const [],size_t) = (int (*)(char const [],size_t)) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pista_dev_driver **)&jarg1; 
  arg2 = *(int (**)(char const [],size_t))&jarg2; 
  if (arg1) (arg1)->verify = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pistax_PISTAXJNI_pista_1dev_1driver_1verify_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pista_dev_driver *arg1 = (pista_dev_driver *) 0 ;
  int (*result)(char const [],size_t) = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pista_dev_driver **)&jarg1; 
  result = (int (*)(char const [],size_t)) ((arg1)->verify);
  *(int (**)(char const [],size_t))&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pistax_PISTAXJNI_pista_1dev_1driver_1allocate_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pista_dev_driver *arg1 = (pista_dev_driver *) 0 ;
  int (*arg2)(pista_dev_driver *,pista_dev_inst *) = (int (*)(pista_dev_driver *,pista_dev_inst *)) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pista_dev_driver **)&jarg1; 
  arg2 = *(int (**)(pista_dev_driver *,pista_dev_inst *))&jarg2; 
  if (arg1) (arg1)->allocate = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pistax_PISTAXJNI_pista_1dev_1driver_1allocate_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pista_dev_driver *arg1 = (pista_dev_driver *) 0 ;
  int (*result)(pista_dev_driver *,pista_dev_inst *) = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pista_dev_driver **)&jarg1; 
  result = (int (*)(pista_dev_driver *,pista_dev_inst *)) ((arg1)->allocate);
  *(int (**)(pista_dev_driver *,pista_dev_inst *))&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pistax_PISTAXJNI_pista_1dev_1driver_1config_1set_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pista_dev_driver *arg1 = (pista_dev_driver *) 0 ;
  int (*arg2)(pista_dev_inst const *,char const *,void const *) = (int (*)(pista_dev_inst const *,char const *,void const *)) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pista_dev_driver **)&jarg1; 
  arg2 = *(int (**)(pista_dev_inst const *,char const *,void const *))&jarg2; 
  if (arg1) (arg1)->config_set = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pistax_PISTAXJNI_pista_1dev_1driver_1config_1set_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pista_dev_driver *arg1 = (pista_dev_driver *) 0 ;
  int (*result)(pista_dev_inst const *,char const *,void const *) = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pista_dev_driver **)&jarg1; 
  result = (int (*)(pista_dev_inst const *,char const *,void const *)) ((arg1)->config_set);
  *(int (**)(pista_dev_inst const *,char const *,void const *))&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pistax_PISTAXJNI_pista_1dev_1driver_1config_1get_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pista_dev_driver *arg1 = (pista_dev_driver *) 0 ;
  void *(*arg2)(pista_dev_inst const *,char const *) = (void *(*)(pista_dev_inst const *,char const *)) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pista_dev_driver **)&jarg1; 
  arg2 = *(void *(**)(pista_dev_inst const *,char const *))&jarg2; 
  if (arg1) (arg1)->config_get = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pistax_PISTAXJNI_pista_1dev_1driver_1config_1get_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pista_dev_driver *arg1 = (pista_dev_driver *) 0 ;
  void *(*result)(pista_dev_inst const *,char const *) = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pista_dev_driver **)&jarg1; 
  result = (void *(*)(pista_dev_inst const *,char const *)) ((arg1)->config_get);
  *(void *(**)(pista_dev_inst const *,char const *))&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pistax_PISTAXJNI_pista_1dev_1driver_1dump_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pista_dev_driver *arg1 = (pista_dev_driver *) 0 ;
  int (*arg2)(pista_dev_inst const *,pista_dump_flags) = (int (*)(pista_dev_inst const *,pista_dump_flags)) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pista_dev_driver **)&jarg1; 
  arg2 = *(int (**)(pista_dev_inst const *,pista_dump_flags))&jarg2; 
  if (arg1) (arg1)->dump = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pistax_PISTAXJNI_pista_1dev_1driver_1dump_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pista_dev_driver *arg1 = (pista_dev_driver *) 0 ;
  int (*result)(pista_dev_inst const *,pista_dump_flags) = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pista_dev_driver **)&jarg1; 
  result = (int (*)(pista_dev_inst const *,pista_dump_flags)) ((arg1)->dump);
  *(int (**)(pista_dev_inst const *,pista_dump_flags))&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pistax_PISTAXJNI_pista_1dev_1driver_1destroy_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pista_dev_driver *arg1 = (pista_dev_driver *) 0 ;
  int (*arg2)(pista_dev_inst *) = (int (*)(pista_dev_inst *)) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pista_dev_driver **)&jarg1; 
  arg2 = *(int (**)(pista_dev_inst *))&jarg2; 
  if (arg1) (arg1)->destroy = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pistax_PISTAXJNI_pista_1dev_1driver_1destroy_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pista_dev_driver *arg1 = (pista_dev_driver *) 0 ;
  int (*result)(pista_dev_inst *) = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pista_dev_driver **)&jarg1; 
  result = (int (*)(pista_dev_inst *)) ((arg1)->destroy);
  *(int (**)(pista_dev_inst *))&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pistax_PISTAXJNI_pista_1dev_1driver_1handle_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pista_dev_driver *arg1 = (pista_dev_driver *) 0 ;
  int (*arg2)(pista_dev_inst const *,char const *,int) = (int (*)(pista_dev_inst const *,char const *,int)) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pista_dev_driver **)&jarg1; 
  arg2 = *(int (**)(pista_dev_inst const *,char const *,int))&jarg2; 
  if (arg1) (arg1)->handle = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pistax_PISTAXJNI_pista_1dev_1driver_1handle_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pista_dev_driver *arg1 = (pista_dev_driver *) 0 ;
  int (*result)(pista_dev_inst const *,char const *,int) = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pista_dev_driver **)&jarg1; 
  result = (int (*)(pista_dev_inst const *,char const *,int)) ((arg1)->handle);
  *(int (**)(pista_dev_inst const *,char const *,int))&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pistax_PISTAXJNI_pista_1dev_1driver_1connect_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pista_dev_driver *arg1 = (pista_dev_driver *) 0 ;
  int (*arg2)(pista_dev_inst *) = (int (*)(pista_dev_inst *)) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pista_dev_driver **)&jarg1; 
  arg2 = *(int (**)(pista_dev_inst *))&jarg2; 
  if (arg1) (arg1)->connect = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pistax_PISTAXJNI_pista_1dev_1driver_1connect_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pista_dev_driver *arg1 = (pista_dev_driver *) 0 ;
  int (*result)(pista_dev_inst *) = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pista_dev_driver **)&jarg1; 
  result = (int (*)(pista_dev_inst *)) ((arg1)->connect);
  *(int (**)(pista_dev_inst *))&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pistax_PISTAXJNI_pista_1dev_1driver_1disconnect_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pista_dev_driver *arg1 = (pista_dev_driver *) 0 ;
  int (*arg2)(pista_dev_inst *) = (int (*)(pista_dev_inst *)) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pista_dev_driver **)&jarg1; 
  arg2 = *(int (**)(pista_dev_inst *))&jarg2; 
  if (arg1) (arg1)->disconnect = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pistax_PISTAXJNI_pista_1dev_1driver_1disconnect_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pista_dev_driver *arg1 = (pista_dev_driver *) 0 ;
  int (*result)(pista_dev_inst *) = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pista_dev_driver **)&jarg1; 
  result = (int (*)(pista_dev_inst *)) ((arg1)->disconnect);
  *(int (**)(pista_dev_inst *))&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pistax_PISTAXJNI_pista_1dev_1driver_1tick_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pista_dev_driver *arg1 = (pista_dev_driver *) 0 ;
  int (*arg2)(pista_dev_inst const *) = (int (*)(pista_dev_inst const *)) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pista_dev_driver **)&jarg1; 
  arg2 = *(int (**)(pista_dev_inst const *))&jarg2; 
  if (arg1) (arg1)->tick = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pistax_PISTAXJNI_pista_1dev_1driver_1tick_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pista_dev_driver *arg1 = (pista_dev_driver *) 0 ;
  int (*result)(pista_dev_inst const *) = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pista_dev_driver **)&jarg1; 
  result = (int (*)(pista_dev_inst const *)) ((arg1)->tick);
  *(int (**)(pista_dev_inst const *))&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pistax_PISTAXJNI_pista_1dev_1driver_1poll_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pista_dev_driver *arg1 = (pista_dev_driver *) 0 ;
  pista_data_packet *(*arg2)(pista_dev_inst const *,int) = (pista_data_packet *(*)(pista_dev_inst const *,int)) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pista_dev_driver **)&jarg1; 
  arg2 = *(pista_data_packet *(**)(pista_dev_inst const *,int))&jarg2; 
  if (arg1) (arg1)->poll = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pistax_PISTAXJNI_pista_1dev_1driver_1poll_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pista_dev_driver *arg1 = (pista_dev_driver *) 0 ;
  pista_data_packet *(*result)(pista_dev_inst const *,int) = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pista_dev_driver **)&jarg1; 
  result = (pista_data_packet *(*)(pista_dev_inst const *,int)) ((arg1)->poll);
  *(pista_data_packet *(**)(pista_dev_inst const *,int))&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pistax_PISTAXJNI_pista_1dev_1driver_1priv_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pista_dev_driver *arg1 = (pista_dev_driver *) 0 ;
  void *arg2 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pista_dev_driver **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  if (arg1) (arg1)->priv = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pistax_PISTAXJNI_pista_1dev_1driver_1priv_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pista_dev_driver *arg1 = (pista_dev_driver *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pista_dev_driver **)&jarg1; 
  result = (void *) ((arg1)->priv);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pistax_PISTAXJNI_new_1pista_1dev_1driver(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pista_dev_driver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pista_dev_driver *)new pista_dev_driver();
  *(pista_dev_driver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pistax_PISTAXJNI_delete_1pista_1dev_1driver(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pista_dev_driver *arg1 = (pista_dev_driver *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pista_dev_driver **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pistax_PISTAXJNI_pista_1dev_1inst_1driver_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pista_dev_inst *arg1 = (pista_dev_inst *) 0 ;
  pista_dev_driver *arg2 = (pista_dev_driver *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pista_dev_inst **)&jarg1; 
  arg2 = *(pista_dev_driver **)&jarg2; 
  if (arg1) (arg1)->driver = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pistax_PISTAXJNI_pista_1dev_1inst_1driver_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pista_dev_inst *arg1 = (pista_dev_inst *) 0 ;
  pista_dev_driver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pista_dev_inst **)&jarg1; 
  result = (pista_dev_driver *) ((arg1)->driver);
  *(pista_dev_driver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pistax_PISTAXJNI_pista_1dev_1inst_1next_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pista_dev_inst *arg1 = (pista_dev_inst *) 0 ;
  pista_dev_inst *arg2 = (pista_dev_inst *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pista_dev_inst **)&jarg1; 
  arg2 = *(pista_dev_inst **)&jarg2; 
  if (arg1) (arg1)->next = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pistax_PISTAXJNI_pista_1dev_1inst_1next_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pista_dev_inst *arg1 = (pista_dev_inst *) 0 ;
  pista_dev_inst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pista_dev_inst **)&jarg1; 
  result = (pista_dev_inst *) ((arg1)->next);
  *(pista_dev_inst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pistax_PISTAXJNI_pista_1dev_1inst_1status_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pista_dev_inst *arg1 = (pista_dev_inst *) 0 ;
  enum pista_dev_status arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pista_dev_inst **)&jarg1; 
  arg2 = (enum pista_dev_status)jarg2; 
  if (arg1) (arg1)->status = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pistax_PISTAXJNI_pista_1dev_1inst_1status_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pista_dev_inst *arg1 = (pista_dev_inst *) 0 ;
  enum pista_dev_status result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pista_dev_inst **)&jarg1; 
  result = (enum pista_dev_status) ((arg1)->status);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pistax_PISTAXJNI_pista_1dev_1inst_1model_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pista_dev_inst *arg1 = (pista_dev_inst *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pista_dev_inst **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->model;
    if (arg2) {
      arg1->model = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->model, (const char *)arg2);
    } else {
      arg1->model = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_org_pistax_PISTAXJNI_pista_1dev_1inst_1model_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pista_dev_inst *arg1 = (pista_dev_inst *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pista_dev_inst **)&jarg1; 
  result = (char *) ((arg1)->model);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pistax_PISTAXJNI_pista_1dev_1inst_1version_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pista_dev_inst *arg1 = (pista_dev_inst *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pista_dev_inst **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->version;
    if (arg2) {
      arg1->version = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->version, (const char *)arg2);
    } else {
      arg1->version = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_org_pistax_PISTAXJNI_pista_1dev_1inst_1version_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pista_dev_inst *arg1 = (pista_dev_inst *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pista_dev_inst **)&jarg1; 
  result = (char *) ((arg1)->version);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pistax_PISTAXJNI_pista_1dev_1inst_1comm_1priv_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pista_dev_inst *arg1 = (pista_dev_inst *) 0 ;
  void *arg2 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pista_dev_inst **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  if (arg1) (arg1)->comm_priv = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pistax_PISTAXJNI_pista_1dev_1inst_1comm_1priv_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pista_dev_inst *arg1 = (pista_dev_inst *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pista_dev_inst **)&jarg1; 
  result = (void *) ((arg1)->comm_priv);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pistax_PISTAXJNI_pista_1dev_1inst_1event_1priv_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pista_dev_inst *arg1 = (pista_dev_inst *) 0 ;
  void *arg2 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pista_dev_inst **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  if (arg1) (arg1)->event_priv = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pistax_PISTAXJNI_pista_1dev_1inst_1event_1priv_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pista_dev_inst *arg1 = (pista_dev_inst *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pista_dev_inst **)&jarg1; 
  result = (void *) ((arg1)->event_priv);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pistax_PISTAXJNI_pista_1dev_1inst_1stream_1head_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pista_dev_inst *arg1 = (pista_dev_inst *) 0 ;
  pista_data_packet *arg2 = (pista_data_packet *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pista_dev_inst **)&jarg1; 
  arg2 = *(pista_data_packet **)&jarg2; 
  if (arg1) (arg1)->stream_head = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pistax_PISTAXJNI_pista_1dev_1inst_1stream_1head_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pista_dev_inst *arg1 = (pista_dev_inst *) 0 ;
  pista_data_packet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pista_dev_inst **)&jarg1; 
  result = (pista_data_packet *) ((arg1)->stream_head);
  *(pista_data_packet **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pistax_PISTAXJNI_pista_1dev_1inst_1comm_1func_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pista_dev_inst *arg1 = (pista_dev_inst *) 0 ;
  commfunc_t arg2 = (commfunc_t) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pista_dev_inst **)&jarg1; 
  arg2 = *(commfunc_t *)&jarg2; 
  if (arg1) (arg1)->comm_func = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pistax_PISTAXJNI_pista_1dev_1inst_1comm_1func_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pista_dev_inst *arg1 = (pista_dev_inst *) 0 ;
  commfunc_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pista_dev_inst **)&jarg1; 
  result = (commfunc_t) ((arg1)->comm_func);
  *(commfunc_t *)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pistax_PISTAXJNI_pista_1dev_1inst_1event_1handler_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pista_dev_inst *arg1 = (pista_dev_inst *) 0 ;
  eventfunc_t arg2 = (eventfunc_t) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pista_dev_inst **)&jarg1; 
  arg2 = *(eventfunc_t *)&jarg2; 
  if (arg1) (arg1)->event_handler = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pistax_PISTAXJNI_pista_1dev_1inst_1event_1handler_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pista_dev_inst *arg1 = (pista_dev_inst *) 0 ;
  eventfunc_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pista_dev_inst **)&jarg1; 
  result = (eventfunc_t) ((arg1)->event_handler);
  *(eventfunc_t *)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pistax_PISTAXJNI_pista_1dev_1inst_1priv_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pista_dev_inst *arg1 = (pista_dev_inst *) 0 ;
  void *arg2 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pista_dev_inst **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  if (arg1) (arg1)->priv = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pistax_PISTAXJNI_pista_1dev_1inst_1priv_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pista_dev_inst *arg1 = (pista_dev_inst *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pista_dev_inst **)&jarg1; 
  result = (void *) ((arg1)->priv);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pistax_PISTAXJNI_new_1pista_1dev_1inst(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pista_dev_inst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pista_dev_inst *)new pista_dev_inst();
  *(pista_dev_inst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pistax_PISTAXJNI_delete_1pista_1dev_1inst(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pista_dev_inst *arg1 = (pista_dev_inst *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pista_dev_inst **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_org_pistax_PISTAXJNI_pista_1init(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  pista_context **arg1 = (pista_context **) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pista_context ***)&jarg1; 
  result = (int)pista_init(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_pistax_PISTAXJNI_pista_1run(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  pista_context *arg1 = (pista_context *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pista_context **)&jarg1; 
  result = (int)pista_run(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_pistax_PISTAXJNI_pista_1tick(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  pista_context *arg1 = (pista_context *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pista_context **)&jarg1; 
  result = (int)pista_tick(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_pistax_PISTAXJNI_pista_1exit(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  pista_context *arg1 = (pista_context *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pista_context **)&jarg1; 
  result = (int)pista_exit(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_pistax_PISTAXJNI_pista_1get_1version(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)pista_get_version();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_pistax_PISTAXJNI_pista_1install_1driver(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  pista_context *arg1 = (pista_context *) 0 ;
  pista_dev_driver *arg2 = (pista_dev_driver *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(pista_context **)&jarg1; 
  arg2 = *(pista_dev_driver **)&jarg2; 
  result = (int)pista_install_driver(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pistax_PISTAXJNI_pista_1first_1driver(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  pista_context *arg1 = (pista_context *) 0 ;
  pista_dev_driver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pista_context **)&jarg1; 
  result = (pista_dev_driver *)pista_first_driver(arg1);
  *(pista_dev_driver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pistax_PISTAXJNI_pista_1next_1driver(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  pista_context *arg1 = (pista_context *) 0 ;
  pista_dev_driver *arg2 = (pista_dev_driver *) 0 ;
  pista_dev_driver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(pista_context **)&jarg1; 
  arg2 = *(pista_dev_driver **)&jarg2; 
  result = (pista_dev_driver *)pista_next_driver(arg1,arg2);
  *(pista_dev_driver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pistax_PISTAXJNI_pista_1find_1driver(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  pista_context *arg1 = (pista_context *) 0 ;
  char *arg2 = (char *) 0 ;
  pista_dev_driver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pista_context **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (pista_dev_driver *)pista_find_driver(arg1,(char const *)arg2);
  *(pista_dev_driver **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_pistax_PISTAXJNI_pista_1dev_1count(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  pista_context *arg1 = (pista_context *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pista_context **)&jarg1; 
  result = (int)pista_dev_count(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pistax_PISTAXJNI_pista_1dev_1by_1idx(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  pista_context *arg1 = (pista_context *) 0 ;
  int arg2 ;
  pista_dev_driver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pista_context **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (pista_dev_driver *)pista_dev_by_idx(arg1,arg2);
  *(pista_dev_driver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_pistax_PISTAXJNI_pista_1allocate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  pista_dev_driver *arg1 = (pista_dev_driver *) 0 ;
  pista_dev_inst *arg2 = (pista_dev_inst *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pista_dev_driver **)&jarg1; 
  arg2 = *(pista_dev_inst **)&jarg2; 
  result = (int)pista_allocate(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_pistax_PISTAXJNI_pista_1set_1event_1handler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  pista_dev_inst *arg1 = (pista_dev_inst *) 0 ;
  eventfunc_t arg2 = (eventfunc_t) 0 ;
  void *arg3 = (void *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pista_dev_inst **)&jarg1; 
  arg2 = *(eventfunc_t *)&jarg2; 
  arg3 = *(void **)&jarg3; 
  result = (int)pista_set_event_handler(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_pistax_PISTAXJNI_pista_1set_1comm_1handler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  pista_dev_inst *arg1 = (pista_dev_inst *) 0 ;
  commfunc_t arg2 = (commfunc_t) 0 ;
  void *arg3 = (void *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pista_dev_inst **)&jarg1; 
  arg2 = *(commfunc_t *)&jarg2; 
  arg3 = *(void **)&jarg3; 
  result = (int)pista_set_comm_handler(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_pistax_PISTAXJNI_pista_1get_1status(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pista_dev_inst *arg1 = (pista_dev_inst *) 0 ;
  enum pista_dev_status result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pista_dev_inst **)&jarg1; 
  result = (enum pista_dev_status)pista_get_status(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_pistax_PISTAXJNI_pista_1connect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pista_dev_inst *arg1 = (pista_dev_inst *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pista_dev_inst **)&jarg1; 
  result = (int)pista_connect(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_pistax_PISTAXJNI_pista_1disconnect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pista_dev_inst *arg1 = (pista_dev_inst *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pista_dev_inst **)&jarg1; 
  result = (int)pista_disconnect(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_pistax_PISTAXJNI_pista_1release(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pista_dev_inst *arg1 = (pista_dev_inst *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pista_dev_inst **)&jarg1; 
  result = (int)pista_release(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_pistax_PISTAXJNI_pista_1get_1stream_1count(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pista_dev_inst *arg1 = (pista_dev_inst *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pista_dev_inst **)&jarg1; 
  result = (int)pista_get_stream_count((pista_dev_inst const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pistax_PISTAXJNI_pista_1get_1stream_1by_1idx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  pista_dev_inst *arg1 = (pista_dev_inst *) 0 ;
  int arg2 ;
  pista_data_packet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pista_dev_inst **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (pista_data_packet *)pista_get_stream_by_idx((pista_dev_inst const *)arg1,arg2);
  *(pista_data_packet **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pistax_PISTAXJNI_pista_1get_1stream_1by_1sid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  pista_dev_inst *arg1 = (pista_dev_inst *) 0 ;
  int arg2 ;
  pista_data_packet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pista_dev_inst **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (pista_data_packet *)pista_get_stream_by_sid((pista_dev_inst const *)arg1,arg2);
  *(pista_data_packet **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pistax_PISTAXJNI_pista_1poll(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  pista_dev_inst *arg1 = (pista_dev_inst *) 0 ;
  int arg2 ;
  pista_data_packet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pista_dev_inst **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (pista_data_packet *)pista_poll(arg1,arg2);
  *(pista_data_packet **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_pistax_PISTAXJNI_pista_1dump(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  pista_dev_inst *arg1 = (pista_dev_inst *) 0 ;
  pista_dump_flags arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pista_dev_inst **)&jarg1; 
  arg2 = (pista_dump_flags)jarg2; 
  result = (int)pista_dump(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_pistax_PISTAXJNI_pista_1set_1dev_1option(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3) {
  jint jresult = 0 ;
  pista_dev_inst *arg1 = (pista_dev_inst *) 0 ;
  char *arg2 = (char *) 0 ;
  void *arg3 = (void *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pista_dev_inst **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(void **)&jarg3; 
  result = (int)pista_set_dev_option(arg1,(char const *)arg2,(void const *)arg3);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pistax_PISTAXJNI_pista_1get_1dev_1option(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  pista_dev_inst *arg1 = (pista_dev_inst *) 0 ;
  char *arg2 = (char *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pista_dev_inst **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (void *)pista_get_dev_option(arg1,(char const *)arg2);
  *(void **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pistax_PISTAXJNI_pista_1first_1inst(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pista_dev_driver *arg1 = (pista_dev_driver *) 0 ;
  pista_dev_inst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pista_dev_driver **)&jarg1; 
  result = (pista_dev_inst *)pista_first_inst(arg1);
  *(pista_dev_inst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pistax_PISTAXJNI_pista_1next_1inst(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  pista_dev_driver *arg1 = (pista_dev_driver *) 0 ;
  pista_dev_inst *arg2 = (pista_dev_inst *) 0 ;
  pista_dev_inst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pista_dev_driver **)&jarg1; 
  arg2 = *(pista_dev_inst **)&jarg2; 
  result = (pista_dev_inst *)pista_next_inst(arg1,arg2);
  *(pista_dev_inst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_pistax_PISTAXJNI_pista_1attach_1lspIO(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  pista_dev_inst *arg1 = (pista_dev_inst *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pista_dev_inst **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)pista_attach_lspIO(arg1,(char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_pistax_PISTAXJNI_pista_1config_1lspIO(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jchar jarg3, jint jarg4, jint jarg5, jint jarg6) {
  jint jresult = 0 ;
  pista_dev_inst *arg1 = (pista_dev_inst *) 0 ;
  int arg2 ;
  char arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pista_dev_inst **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (char)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  result = (int)pista_config_lspIO(arg1,arg2,arg3,arg4,arg5,arg6);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_pistax_PISTAXJNI_pista_1detach_1lspIO(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pista_dev_inst *arg1 = (pista_dev_inst *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pista_dev_inst **)&jarg1; 
  result = (int)pista_detach_lspIO(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_pistax_PISTAXJNI_pista_1poll_1lspIO(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pista_dev_inst *arg1 = (pista_dev_inst *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pista_dev_inst **)&jarg1; 
  result = (int)pista_poll_lspIO(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_pistax_PISTAXJNI_pista_1service_1start(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pista_discovery_service *arg1 = (pista_discovery_service *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pista_discovery_service **)&jarg1; 
  result = (int)pista_service_start(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_pistax_PISTAXJNI_pista_1service_1tick(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pista_discovery_service *arg1 = (pista_discovery_service *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pista_discovery_service **)&jarg1; 
  result = (int)pista_service_tick(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_pistax_PISTAXJNI_pista_1service_1stop(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pista_discovery_service *arg1 = (pista_discovery_service *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pista_discovery_service **)&jarg1; 
  result = (int)pista_service_stop(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_pistax_PISTAXJNI_pista_1set_1discovery_1handler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  pista_discovery_service *arg1 = (pista_discovery_service *) 0 ;
  discoveryfunc_t arg2 = (discoveryfunc_t) 0 ;
  void *arg3 = (void *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pista_discovery_service **)&jarg1; 
  arg2 = *(discoveryfunc_t *)&jarg2; 
  arg3 = *(void **)&jarg3; 
  result = (int)pista_set_discovery_handler(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pistax_PISTAXJNI_pista_1first_1service(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  pista_context *arg1 = (pista_context *) 0 ;
  pista_discovery_service *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pista_context **)&jarg1; 
  result = (pista_discovery_service *)pista_first_service(arg1);
  *(pista_discovery_service **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pistax_PISTAXJNI_pista_1find_1service(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  pista_context *arg1 = (pista_context *) 0 ;
  char *arg2 = (char *) 0 ;
  pista_discovery_service *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pista_context **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (pista_discovery_service *)pista_find_service(arg1,(char const *)arg2);
  *(pista_discovery_service **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_pistax_PISTAXJNI_pista_1service_1count(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  pista_context *arg1 = (pista_context *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pista_context **)&jarg1; 
  result = (int)pista_service_count(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pistax_PISTAXJNI_pista_1service_1by_1idx(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  pista_context *arg1 = (pista_context *) 0 ;
  int arg2 ;
  pista_discovery_service *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pista_context **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (pista_discovery_service *)pista_service_by_idx(arg1,arg2);
  *(pista_discovery_service **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pistax_PISTAXJNI_pista_1next_1service(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  pista_context *arg1 = (pista_context *) 0 ;
  pista_discovery_service *arg2 = (pista_discovery_service *) 0 ;
  pista_discovery_service *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(pista_context **)&jarg1; 
  arg2 = *(pista_discovery_service **)&jarg2; 
  result = (pista_discovery_service *)pista_next_service(arg1,arg2);
  *(pista_discovery_service **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_pistax_PISTAXJNI_pista_1probe(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  pista_dev_driver *arg1 = (pista_dev_driver *) 0 ;
  commfunc_t arg2 = (commfunc_t) 0 ;
  void *arg3 = (void *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pista_dev_driver **)&jarg1; 
  arg2 = *(commfunc_t *)&jarg2; 
  arg3 = *(void **)&jarg3; 
  result = (int)pista_probe(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_pistax_PISTAXJNI_pista_1verify(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2) {
  jint jresult = 0 ;
  pista_dev_driver *arg1 = (pista_dev_driver *) 0 ;
  char *arg2 ;
  size_t arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pista_dev_driver **)&jarg1; 
  {
    if (jarg2) {
      arg2 = (char *) jenv->GetByteArrayElements(jarg2, 0);
      arg3 = (size_t) jenv->GetArrayLength(jarg2);
    } else {
      arg2 = 0;
      arg3 = 0;
    }
  }
  result = (int)pista_verify(arg1,(char const (*))arg2,arg3);
  jresult = (jint)result; 
  {
    if (jarg2) jenv->ReleaseByteArrayElements(jarg2, (jbyte *)arg2, 0);
  }
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_pistax_PISTAXJNI_pista_1load_1plugin(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jstring jarg3) {
  jint jresult = 0 ;
  pista_context *arg1 = (pista_context *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pista_context **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (int)pista_load_plugin(arg1,(char const *)arg2,(char const *)arg3);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_pistax_PISTAXJNI_pista_1dev_1inst_1count(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pista_dev_driver *arg1 = (pista_dev_driver *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pista_dev_driver **)&jarg1; 
  result = (int)pista_dev_inst_count(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pistax_PISTAXJNI_pista_1dev_1inst_1from_1idx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  pista_dev_driver *arg1 = (pista_dev_driver *) 0 ;
  int arg2 ;
  pista_dev_inst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pista_dev_driver **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (pista_dev_inst *)pista_dev_inst_from_idx(arg1,arg2);
  *(pista_dev_inst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_pistax_PISTAXJNI_pista_1dev_1register_1inst(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  pista_dev_driver *arg1 = (pista_dev_driver *) 0 ;
  pista_dev_inst *arg2 = (pista_dev_inst *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pista_dev_driver **)&jarg1; 
  arg2 = *(pista_dev_inst **)&jarg2; 
  result = (int)pista_dev_register_inst(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_pistax_PISTAXJNI_pista_1dev_1unregister_1inst(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  pista_dev_driver *arg1 = (pista_dev_driver *) 0 ;
  pista_dev_inst *arg2 = (pista_dev_inst *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pista_dev_driver **)&jarg1; 
  arg2 = *(pista_dev_inst **)&jarg2; 
  result = (int)pista_dev_unregister_inst(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_pistax_PISTAXJNI_pista_1dev_1register_1stream(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  pista_dev_inst *arg1 = (pista_dev_inst *) 0 ;
  pista_data_packet *arg2 = (pista_data_packet *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pista_dev_inst **)&jarg1; 
  arg2 = *(pista_data_packet **)&jarg2; 
  result = (int)pista_dev_register_stream(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pistax_PISTAXJNI_pista_1dump_1packet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  pista_data_packet *arg1 = (pista_data_packet *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pista_data_packet **)&jarg1; 
  pista_dump_packet((pista_data_packet const *)arg1);
}


SWIGEXPORT void JNICALL Java_org_pistax_PISTAXJNI_pista_1dump_1java(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  pista_data_packet *arg1 = (pista_data_packet *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pista_data_packet **)&jarg1; 
  pista_dump_java((pista_data_packet const *)arg1);
}


SWIGEXPORT jlong JNICALL Java_org_pistax_PISTAXJNI_pista_1get_1current_1time_1with_1ms(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  result = (int64_t)pista_get_current_time_with_ms();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_pistax_PISTAXJNI_pista_1get_1field_1loc(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  ProtobufCFieldDescriptor *arg1 = (ProtobufCFieldDescriptor *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ProtobufCFieldDescriptor **)&jarg1; 
  result = (char *)pista_get_field_loc((ProtobufCFieldDescriptor const *)arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_pistax_PISTAXJNI_pista_1get_1field_1offset(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  ProtobufCFieldDescriptor *arg1 = (ProtobufCFieldDescriptor *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ProtobufCFieldDescriptor **)&jarg1; 
  result = (int)pista_get_field_offset((ProtobufCFieldDescriptor const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_pistax_PISTAXJNI_pista_1get_1field_1count(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pista_data_packet *arg1 = (pista_data_packet *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pista_data_packet **)&jarg1; 
  result = (int)pista_get_field_count((pista_data_packet const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_pistax_PISTAXJNI_pista_1get_1field_1spp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  ProtobufCFieldDescriptor *arg1 = (ProtobufCFieldDescriptor *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ProtobufCFieldDescriptor **)&jarg1; 
  result = (int)pista_get_field_spp((ProtobufCFieldDescriptor const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_pistax_PISTAXJNI_pista_1get_1field_1freq(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  ProtobufCFieldDescriptor *arg1 = (ProtobufCFieldDescriptor *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ProtobufCFieldDescriptor **)&jarg1; 
  result = (int)pista_get_field_freq((ProtobufCFieldDescriptor const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_pistax_PISTAXJNI_pista_1get_1field_1subtyp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  ProtobufCFieldDescriptor *arg1 = (ProtobufCFieldDescriptor *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ProtobufCFieldDescriptor **)&jarg1; 
  result = (int)pista_get_field_subtyp((ProtobufCFieldDescriptor const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_pistax_PISTAXJNI_pista_1get_1field_1quantifier(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  pista_data_packet *arg1 = (pista_data_packet *) 0 ;
  ProtobufCFieldDescriptor *arg2 = (ProtobufCFieldDescriptor *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pista_data_packet **)&jarg1; 
  arg2 = *(ProtobufCFieldDescriptor **)&jarg2; 
  result = (int)pista_get_field_quantifier((pista_data_packet const *)arg1,(ProtobufCFieldDescriptor const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_pistax_PISTAXJNI_pista_1set_1named_1field_1spp(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jint jarg3) {
  jint jresult = 0 ;
  ProtobufCMessage *arg1 = (ProtobufCMessage *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ProtobufCMessage **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3; 
  result = (int)pista_set_named_field_spp(arg1,(char const *)arg2,arg3);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_pistax_PISTAXJNI_pista_1set_1named_1field_1freq(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jint jarg3) {
  jint jresult = 0 ;
  ProtobufCMessage *arg1 = (ProtobufCMessage *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ProtobufCMessage **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3; 
  result = (int)pista_set_named_field_freq(arg1,(char const *)arg2,arg3);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pistax_PISTAXJNI_pista_1get_1message_1descriptor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pista_data_packet *arg1 = (pista_data_packet *) 0 ;
  ProtobufCMessageDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pista_data_packet **)&jarg1; 
  result = (ProtobufCMessageDescriptor *)pista_get_message_descriptor((pista_data_packet const *)arg1);
  *(ProtobufCMessageDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pistax_PISTAXJNI_pista_1get_1field_1descriptor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  pista_data_packet *arg1 = (pista_data_packet *) 0 ;
  int arg2 ;
  ProtobufCFieldDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pista_data_packet **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (ProtobufCFieldDescriptor *)pista_get_field_descriptor((pista_data_packet const *)arg1,arg2);
  *(ProtobufCFieldDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_pistax_PISTAXJNI_getPistaVersion(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)pistax::getPistaVersion();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pistax_PISTAXJNI_new_1PistaDescriptor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  ProtobufCFieldDescriptor *arg1 = (ProtobufCFieldDescriptor *) 0 ;
  pistax::PistaDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ProtobufCFieldDescriptor **)&jarg1; 
  result = (pistax::PistaDescriptor *)new pistax::PistaDescriptor((ProtobufCFieldDescriptor const *)arg1);
  *(pistax::PistaDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_pistax_PISTAXJNI_PistaDescriptor_1getLoc(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pistax::PistaDescriptor *arg1 = (pistax::PistaDescriptor *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pistax::PistaDescriptor **)&jarg1; 
  result = (char *)(arg1)->getLoc();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_pistax_PISTAXJNI_PistaDescriptor_1getSPP(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pistax::PistaDescriptor *arg1 = (pistax::PistaDescriptor *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pistax::PistaDescriptor **)&jarg1; 
  result = (int)(arg1)->getSPP();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_pistax_PISTAXJNI_PistaDescriptor_1getFreq(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pistax::PistaDescriptor *arg1 = (pistax::PistaDescriptor *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pistax::PistaDescriptor **)&jarg1; 
  result = (int)(arg1)->getFreq();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pistax_PISTAXJNI_delete_1PistaDescriptor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pistax::PistaDescriptor *arg1 = (pistax::PistaDescriptor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pistax::PistaDescriptor **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_pistax_PISTAXJNI_new_1PistaStream(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pista_data_packet *arg1 = (pista_data_packet *) 0 ;
  pistax::PistaStream *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pista_data_packet **)&jarg1; 
  result = (pistax::PistaStream *)new pistax::PistaStream((pista_data_packet const *)arg1);
  *(pistax::PistaStream **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_pistax_PISTAXJNI_PistaStream_1getPackageName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pistax::PistaStream *arg1 = (pistax::PistaStream *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pistax::PistaStream **)&jarg1; 
  result = (char *)(arg1)->getPackageName();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_pistax_PISTAXJNI_PistaStream_1getDescriptorCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pistax::PistaStream *arg1 = (pistax::PistaStream *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pistax::PistaStream **)&jarg1; 
  result = (int)(arg1)->getDescriptorCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pistax_PISTAXJNI_PistaStream_1getDescriptorByIdx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  pistax::PistaStream *arg1 = (pistax::PistaStream *) 0 ;
  int arg2 ;
  SwigValueWrapper< pistax::PistaDescriptor > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pistax::PistaStream **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->getDescriptorByIdx(arg2);
  *(pistax::PistaDescriptor **)&jresult = new pistax::PistaDescriptor((const pistax::PistaDescriptor &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pistax_PISTAXJNI_delete_1PistaStream(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pistax::PistaStream *arg1 = (pistax::PistaStream *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pistax::PistaStream **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_pistax_PISTAXJNI_new_1PistaDataPacket(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pista_data_packet *arg1 = (pista_data_packet *) 0 ;
  pistax::PistaDataPacket *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pista_data_packet **)&jarg1; 
  result = (pistax::PistaDataPacket *)new pistax::PistaDataPacket(arg1);
  *(pistax::PistaDataPacket **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pistax_PISTAXJNI_delete_1PistaDataPacket(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pistax::PistaDataPacket *arg1 = (pistax::PistaDataPacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pistax::PistaDataPacket **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_pistax_PISTAXJNI_PistaDataPacket_1getTm(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pistax::PistaDataPacket *arg1 = (pistax::PistaDataPacket *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pistax::PistaDataPacket **)&jarg1; 
  result = (int64_t)(arg1)->getTm();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_pistax_PISTAXJNI_PistaDataPacket_1getStreamID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pistax::PistaDataPacket *arg1 = (pistax::PistaDataPacket *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pistax::PistaDataPacket **)&jarg1; 
  result = (int)(arg1)->getStreamID();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_pistax_PISTAXJNI_PistaDataPacket_1getDescriptorCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pistax::PistaDataPacket *arg1 = (pistax::PistaDataPacket *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pistax::PistaDataPacket **)&jarg1; 
  result = (int)(arg1)->getDescriptorCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pistax_PISTAXJNI_PistaDataPacket_1_1getDescriptor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  pistax::PistaDataPacket *arg1 = (pistax::PistaDataPacket *) 0 ;
  int arg2 ;
  ProtobufCFieldDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pistax::PistaDataPacket **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (ProtobufCFieldDescriptor *)(arg1)->_getDescriptor(arg2);
  *(ProtobufCFieldDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pistax_PISTAXJNI_PistaDataPacket_1getDescriptor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  pistax::PistaDataPacket *arg1 = (pistax::PistaDataPacket *) 0 ;
  int arg2 ;
  SwigValueWrapper< pistax::PistaDescriptor > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pistax::PistaDataPacket **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->getDescriptor(arg2);
  *(pistax::PistaDescriptor **)&jresult = new pistax::PistaDescriptor((const pistax::PistaDescriptor &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_pistax_PISTAXJNI_PistaDataPacket_1getDescriptorLoc(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  pistax::PistaDataPacket *arg1 = (pistax::PistaDataPacket *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pistax::PistaDataPacket **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (char *)(arg1)->getDescriptorLoc(arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_pistax_PISTAXJNI_PistaDataPacket_1getFieldSubtyp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  pistax::PistaDataPacket *arg1 = (pistax::PistaDataPacket *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pistax::PistaDataPacket **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->getFieldSubtyp(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_pistax_PISTAXJNI_PistaDataPacket_1getFieldQuantifier(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  pistax::PistaDataPacket *arg1 = (pistax::PistaDataPacket *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pistax::PistaDataPacket **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->getFieldQuantifier(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_pistax_PISTAXJNI_PistaDataPacket_1getInt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  pistax::PistaDataPacket *arg1 = (pistax::PistaDataPacket *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pistax::PistaDataPacket **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->getInt(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_pistax_PISTAXJNI_PistaDataPacket_1getLong(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  pistax::PistaDataPacket *arg1 = (pistax::PistaDataPacket *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pistax::PistaDataPacket **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->getLong(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_org_pistax_PISTAXJNI_PistaDataPacket_1getFloat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jfloat jresult = 0 ;
  pistax::PistaDataPacket *arg1 = (pistax::PistaDataPacket *) 0 ;
  int arg2 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pistax::PistaDataPacket **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (float)(arg1)->getFloat(arg2);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_pistax_PISTAXJNI_PistaDataPacket_1getString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  pistax::PistaDataPacket *arg1 = (pistax::PistaDataPacket *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pistax::PistaDataPacket **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (char *)(arg1)->getString(arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_pistax_PISTAXJNI_PistaDataPacket_1getByteArray(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jstring jresult = 0 ;
  pistax::PistaDataPacket *arg1 = (pistax::PistaDataPacket *) 0 ;
  int arg2 ;
  size_t *arg3 = (size_t *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pistax::PistaDataPacket **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(size_t **)&jarg3; 
  result = (char *)(arg1)->getByteArray(arg2,arg3);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jintArray JNICALL Java_org_pistax_PISTAXJNI_PistaDataPacket_1getIntArray(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jintArray jresult = 0 ;
  pistax::PistaDataPacket *arg1 = (pistax::PistaDataPacket *) 0 ;
  int arg2 ;
  size_t *arg3 = (size_t *) 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  size_t arr_sz = 0; // output parameter
  
  arg3 = &arr_sz;
  (void)jarg1_;
  arg1 = *(pistax::PistaDataPacket **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int *)(arg1)->getIntArray(arg2,arg3);
  {
    jresult = (result == NULL ) ? NULL : SWIG_JavaArrayOutInt(jenv, (int *)result, (arg1)->getFieldQuantifier(arg2) ); 
  }
  return jresult;
}


SWIGEXPORT jfloatArray JNICALL Java_org_pistax_PISTAXJNI_PistaDataPacket_1getFloatArray(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jfloatArray jresult = 0 ;
  pistax::PistaDataPacket *arg1 = (pistax::PistaDataPacket *) 0 ;
  int arg2 ;
  size_t *arg3 = (size_t *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  size_t arr_sz = 0; // output parameter
  
  arg3 = &arr_sz;
  (void)jarg1_;
  arg1 = *(pistax::PistaDataPacket **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (float *)(arg1)->getFloatArray(arg2,arg3);
  {
    jresult = (result == NULL) ? NULL : SWIG_JavaArrayOutFloat(jenv, (float *)result, (arg1)->getFieldQuantifier(arg2) ); 
  }
  return jresult;
}


SWIGEXPORT jdoubleArray JNICALL Java_org_pistax_PISTAXJNI_PistaDataPacket_1getDoubleArray(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdoubleArray jresult = 0 ;
  pistax::PistaDataPacket *arg1 = (pistax::PistaDataPacket *) 0 ;
  int arg2 ;
  size_t *arg3 = (size_t *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  size_t arr_sz = 0; // output parameter
  
  arg3 = &arr_sz;
  (void)jarg1_;
  arg1 = *(pistax::PistaDataPacket **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double *)(arg1)->getDoubleArray(arg2,arg3);
  {
    jresult = (result == NULL) ? NULL : SWIG_JavaArrayOutDouble(jenv, (double*)result, (arg1)->getFieldQuantifier(arg2) ); 
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pistax_PISTAXJNI_PistaDataPacket_1_1packet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pistax::PistaDataPacket *arg1 = (pistax::PistaDataPacket *) 0 ;
  pista_data_packet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pistax::PistaDataPacket **)&jarg1; 
  result = (pista_data_packet *)(arg1)->_packet();
  *(pista_data_packet **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pistax_PISTAXJNI_new_1PistaEventHandler(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pistax::PistaEventHandler *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pistax::PistaEventHandler *)new SwigDirector_PistaEventHandler(jenv);
  *(pistax::PistaEventHandler **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pistax_PISTAXJNI_delete_1PistaEventHandler(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pistax::PistaEventHandler *arg1 = (pistax::PistaEventHandler *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pistax::PistaEventHandler **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_org_pistax_PISTAXJNI_PistaEventHandler_1event(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  pistax::PistaEventHandler *arg1 = (pistax::PistaEventHandler *) 0 ;
  pistax::PistaDev *arg2 = (pistax::PistaDev *) 0 ;
  pistax::PistaDataPacket *arg3 = (pistax::PistaDataPacket *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(pistax::PistaEventHandler **)&jarg1; 
  arg2 = *(pistax::PistaDev **)&jarg2; 
  arg3 = *(pistax::PistaDataPacket **)&jarg3; 
  result = (int)(arg1)->event(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pistax_PISTAXJNI_PistaEventHandler_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  pistax::PistaEventHandler *obj = *((pistax::PistaEventHandler **)&objarg);
  (void)jcls;
  SwigDirector_PistaEventHandler *director = dynamic_cast<SwigDirector_PistaEventHandler *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_org_pistax_PISTAXJNI_PistaEventHandler_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  pistax::PistaEventHandler *obj = *((pistax::PistaEventHandler **)&objarg);
  SwigDirector_PistaEventHandler *director = dynamic_cast<SwigDirector_PistaEventHandler *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_org_pistax_PISTAXJNI_new_1PistaCommHandler(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pistax::PistaCommHandler *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pistax::PistaCommHandler *)new SwigDirector_PistaCommHandler(jenv);
  *(pistax::PistaCommHandler **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pistax_PISTAXJNI_delete_1PistaCommHandler(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pistax::PistaCommHandler *arg1 = (pistax::PistaCommHandler *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pistax::PistaCommHandler **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_org_pistax_PISTAXJNI_PistaCommHandler_1open(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pistax::PistaCommHandler *arg1 = (pistax::PistaCommHandler *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pistax::PistaCommHandler **)&jarg1; 
  {
    try {
      result = (int)(arg1)->open();
    } catch (int e) {
      jclass clazz = jenv->FindClass("gnu/io/PortInUseException");
      jenv->ThrowNew(clazz, "Could not open port");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_pistax_PISTAXJNI_PistaCommHandler_1openSwigExplicitPistaCommHandler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pistax::PistaCommHandler *arg1 = (pistax::PistaCommHandler *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pistax::PistaCommHandler **)&jarg1; 
  {
    try {
      result = (int)(arg1)->pistax::PistaCommHandler::open();
    } catch (int e) {
      jclass clazz = jenv->FindClass("gnu/io/PortInUseException");
      jenv->ThrowNew(clazz, "Could not open port");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_pistax_PISTAXJNI_PistaCommHandler_1config(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jchar jarg5) {
  jint jresult = 0 ;
  pistax::PistaCommHandler *arg1 = (pistax::PistaCommHandler *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  char arg5 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pistax::PistaCommHandler **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (char)jarg5; 
  {
    try {
      result = (int)(arg1)->config(arg2,arg3,arg4,arg5);
    } catch (int e) {
      jclass clazz = jenv->FindClass("gnu/io/UnsupportedCommOperationException");
      jenv->ThrowNew(clazz, "Config error");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_pistax_PISTAXJNI_PistaCommHandler_1configSwigExplicitPistaCommHandler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jchar jarg5) {
  jint jresult = 0 ;
  pistax::PistaCommHandler *arg1 = (pistax::PistaCommHandler *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  char arg5 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pistax::PistaCommHandler **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (char)jarg5; 
  {
    try {
      result = (int)(arg1)->pistax::PistaCommHandler::config(arg2,arg3,arg4,arg5);
    } catch (int e) {
      jclass clazz = jenv->FindClass("gnu/io/UnsupportedCommOperationException");
      jenv->ThrowNew(clazz, "Config error");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_pistax_PISTAXJNI_PistaCommHandler_1write(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2) {
  jint jresult = 0 ;
  pistax::PistaCommHandler *arg1 = (pistax::PistaCommHandler *) 0 ;
  char *arg2 ;
  size_t arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pistax::PistaCommHandler **)&jarg1; 
  {
    if (jarg2) {
      arg2 = (char *) jenv->GetByteArrayElements(jarg2, 0);
      arg3 = (size_t) jenv->GetArrayLength(jarg2);
    } else {
      arg2 = 0;
      arg3 = 0;
    }
  }
  {
    try {
      result = (int)(arg1)->write((char const (*))arg2,arg3);
    } catch (int e) {
      jclass clazz = jenv->FindClass("java/io/IOException");
      jenv->ThrowNew(clazz, "Write error");
      return 0;
    }
  }
  jresult = (jint)result; 
  {
    if (jarg2) jenv->ReleaseByteArrayElements(jarg2, (jbyte *)arg2, 0);
  }
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_pistax_PISTAXJNI_PistaCommHandler_1close(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pistax::PistaCommHandler *arg1 = (pistax::PistaCommHandler *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pistax::PistaCommHandler **)&jarg1; 
  result = (int)(arg1)->close();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_pistax_PISTAXJNI_PistaCommHandler_1closeSwigExplicitPistaCommHandler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pistax::PistaCommHandler *arg1 = (pistax::PistaCommHandler *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pistax::PistaCommHandler **)&jarg1; 
  result = (int)(arg1)->pistax::PistaCommHandler::close();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pistax_PISTAXJNI_PistaCommHandler_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  pistax::PistaCommHandler *obj = *((pistax::PistaCommHandler **)&objarg);
  (void)jcls;
  SwigDirector_PistaCommHandler *director = dynamic_cast<SwigDirector_PistaCommHandler *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_org_pistax_PISTAXJNI_PistaCommHandler_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  pistax::PistaCommHandler *obj = *((pistax::PistaCommHandler **)&objarg);
  SwigDirector_PistaCommHandler *director = dynamic_cast<SwigDirector_PistaCommHandler *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_org_pistax_PISTAXJNI_new_1PistaDev(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pista_dev_inst *arg1 = (pista_dev_inst *) 0 ;
  pistax::PistaDev *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pista_dev_inst **)&jarg1; 
  result = (pistax::PistaDev *)new pistax::PistaDev(arg1);
  *(pistax::PistaDev **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pistax_PISTAXJNI_PistaDev_1getStream(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  pistax::PistaDev *arg1 = (pistax::PistaDev *) 0 ;
  int arg2 ;
  SwigValueWrapper< pistax::PistaStream > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pistax::PistaDev **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->getStream(arg2);
  *(pistax::PistaStream **)&jresult = new pistax::PistaStream((const pistax::PistaStream &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_pistax_PISTAXJNI_PistaDev_1connect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pistax::PistaDev *arg1 = (pistax::PistaDev *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pistax::PistaDev **)&jarg1; 
  result = (int)(arg1)->connect();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_pistax_PISTAXJNI_PistaDev_1disconnect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pistax::PistaDev *arg1 = (pistax::PistaDev *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pistax::PistaDev **)&jarg1; 
  result = (int)(arg1)->disconnect();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_pistax_PISTAXJNI_PistaDev_1setOption(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jint jresult = 0 ;
  pistax::PistaDev *arg1 = (pistax::PistaDev *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pistax::PistaDev **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (int)(arg1)->setOption((char const *)arg2,(char const *)arg3);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_pistax_PISTAXJNI_PistaDev_1getStatus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pistax::PistaDev *arg1 = (pistax::PistaDev *) 0 ;
  enum pista_dev_status result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pistax::PistaDev **)&jarg1; 
  result = (enum pista_dev_status)(arg1)->getStatus();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_pistax_PISTAXJNI_PistaDev_1handle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2) {
  jint jresult = 0 ;
  pistax::PistaDev *arg1 = (pistax::PistaDev *) 0 ;
  char *arg2 ;
  size_t arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pistax::PistaDev **)&jarg1; 
  {
    if (jarg2) {
      arg2 = (char *) jenv->GetByteArrayElements(jarg2, 0);
      arg3 = (size_t) jenv->GetArrayLength(jarg2);
    } else {
      arg2 = 0;
      arg3 = 0;
    }
  }
  result = (int)(arg1)->handle((char const (*))arg2,arg3);
  jresult = (jint)result; 
  {
    if (jarg2) jenv->ReleaseByteArrayElements(jarg2, (jbyte *)arg2, 0);
  }
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pistax_PISTAXJNI_PistaDev_1attach_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  pistax::PistaDev *arg1 = (pistax::PistaDev *) 0 ;
  commfunc_t arg2 = (commfunc_t) 0 ;
  void *arg3 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pistax::PistaDev **)&jarg1; 
  arg2 = *(commfunc_t *)&jarg2; 
  arg3 = *(void **)&jarg3; 
  (arg1)->attach(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_pistax_PISTAXJNI_PistaDev_1attach_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  pistax::PistaDev *arg1 = (pistax::PistaDev *) 0 ;
  eventfunc_t arg2 = (eventfunc_t) 0 ;
  void *arg3 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pistax::PistaDev **)&jarg1; 
  arg2 = *(eventfunc_t *)&jarg2; 
  arg3 = *(void **)&jarg3; 
  (arg1)->attach(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_pistax_PISTAXJNI_PistaDev_1attach_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pistax::PistaDev *arg1 = (pistax::PistaDev *) 0 ;
  pistax::PistaEventHandler *arg2 = (pistax::PistaEventHandler *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pistax::PistaDev **)&jarg1; 
  arg2 = *(pistax::PistaEventHandler **)&jarg2; 
  (arg1)->attach(arg2);
}


SWIGEXPORT void JNICALL Java_org_pistax_PISTAXJNI_PistaDev_1attach_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pistax::PistaDev *arg1 = (pistax::PistaDev *) 0 ;
  pistax::PistaCommHandler *arg2 = (pistax::PistaCommHandler *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pistax::PistaDev **)&jarg1; 
  arg2 = *(pistax::PistaCommHandler **)&jarg2; 
  (arg1)->attach(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_pistax_PISTAXJNI_PistaDev_1poll(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  pistax::PistaDev *arg1 = (pistax::PistaDev *) 0 ;
  int arg2 ;
  pistax::PistaDataPacket *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pistax::PistaDev **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (pistax::PistaDataPacket *)(arg1)->poll(arg2);
  *(pistax::PistaDataPacket **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_pistax_PISTAXJNI_PistaDev_1dump(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  pistax::PistaDev *arg1 = (pistax::PistaDev *) 0 ;
  pista_dump_flags arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pistax::PistaDev **)&jarg1; 
  arg2 = (pista_dump_flags)jarg2; 
  result = (int)(arg1)->dump(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pistax_PISTAXJNI_PistaDev_1c_1inst(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pistax::PistaDev *arg1 = (pistax::PistaDev *) 0 ;
  pista_dev_inst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pistax::PistaDev **)&jarg1; 
  result = (pista_dev_inst *)(arg1)->c_inst();
  *(pista_dev_inst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_pistax_PISTAXJNI_PistaDev_1sendEvent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  pistax::PistaDev *arg1 = (pistax::PistaDev *) 0 ;
  pistax::PistaDataPacket *arg2 = (pistax::PistaDataPacket *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pistax::PistaDev **)&jarg1; 
  arg2 = *(pistax::PistaDataPacket **)&jarg2; 
  result = (int)(arg1)->sendEvent(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pistax_PISTAXJNI_delete_1PistaDev(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pistax::PistaDev *arg1 = (pistax::PistaDev *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pistax::PistaDev **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_pistax_PISTAXJNI_new_1PistaDiscoveryHandler(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pistax::PistaDiscoveryHandler *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pistax::PistaDiscoveryHandler *)new SwigDirector_PistaDiscoveryHandler(jenv);
  *(pistax::PistaDiscoveryHandler **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pistax_PISTAXJNI_delete_1PistaDiscoveryHandler(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pistax::PistaDiscoveryHandler *arg1 = (pistax::PistaDiscoveryHandler *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pistax::PistaDiscoveryHandler **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pistax_PISTAXJNI_PistaDiscoveryHandler_1discovery(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3, jstring jarg4, jstring jarg5) {
  pistax::PistaDiscoveryHandler *arg1 = (pistax::PistaDiscoveryHandler *) 0 ;
  int64_t arg2 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pistax::PistaDiscoveryHandler **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return ;
  }
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return ;
  }
  (arg1)->discovery(arg2,arg3,(char const *)arg4,(char const *)arg5);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
}


SWIGEXPORT void JNICALL Java_org_pistax_PISTAXJNI_PistaDiscoveryHandler_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  pistax::PistaDiscoveryHandler *obj = *((pistax::PistaDiscoveryHandler **)&objarg);
  (void)jcls;
  SwigDirector_PistaDiscoveryHandler *director = dynamic_cast<SwigDirector_PistaDiscoveryHandler *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_org_pistax_PISTAXJNI_PistaDiscoveryHandler_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  pistax::PistaDiscoveryHandler *obj = *((pistax::PistaDiscoveryHandler **)&objarg);
  SwigDirector_PistaDiscoveryHandler *director = dynamic_cast<SwigDirector_PistaDiscoveryHandler *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jstring JNICALL Java_org_pistax_PISTAXJNI_PistaService_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pistax::PistaService *arg1 = (pistax::PistaService *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pistax::PistaService **)&jarg1; 
  result = (char *)(arg1)->name();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_pistax_PISTAXJNI_PistaService_1longname(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pistax::PistaService *arg1 = (pistax::PistaService *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pistax::PistaService **)&jarg1; 
  result = (char *)(arg1)->longname();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pistax_PISTAXJNI_PistaService_1attach_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  pistax::PistaService *arg1 = (pistax::PistaService *) 0 ;
  discoveryfunc_t arg2 = (discoveryfunc_t) 0 ;
  void *arg3 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pistax::PistaService **)&jarg1; 
  arg2 = *(discoveryfunc_t *)&jarg2; 
  arg3 = *(void **)&jarg3; 
  (arg1)->attach(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_pistax_PISTAXJNI_PistaService_1attach_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pistax::PistaService *arg1 = (pistax::PistaService *) 0 ;
  pistax::PistaDiscoveryHandler *arg2 = (pistax::PistaDiscoveryHandler *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pistax::PistaService **)&jarg1; 
  arg2 = *(pistax::PistaDiscoveryHandler **)&jarg2; 
  (arg1)->attach(arg2);
}


SWIGEXPORT jint JNICALL Java_org_pistax_PISTAXJNI_PistaService_1start(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pistax::PistaService *arg1 = (pistax::PistaService *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pistax::PistaService **)&jarg1; 
  result = (int)(arg1)->start();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_pistax_PISTAXJNI_PistaService_1stop(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pistax::PistaService *arg1 = (pistax::PistaService *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pistax::PistaService **)&jarg1; 
  result = (int)(arg1)->stop();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_pistax_PISTAXJNI_PistaService_1tick(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pistax::PistaService *arg1 = (pistax::PistaService *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pistax::PistaService **)&jarg1; 
  result = (int)(arg1)->tick();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pistax_PISTAXJNI_delete_1PistaService(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pistax::PistaService *arg1 = (pistax::PistaService *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pistax::PistaService **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_org_pistax_PISTAXJNI_PistaDriver_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pistax::PistaDriver *arg1 = (pistax::PistaDriver *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pistax::PistaDriver **)&jarg1; 
  result = (char *)(arg1)->name();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_pistax_PISTAXJNI_PistaDriver_1longname(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pistax::PistaDriver *arg1 = (pistax::PistaDriver *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pistax::PistaDriver **)&jarg1; 
  result = (char *)(arg1)->longname();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pistax_PISTAXJNI_PistaDriver_1allocate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pistax::PistaDriver *arg1 = (pistax::PistaDriver *) 0 ;
  pistax::PistaDev *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pistax::PistaDriver **)&jarg1; 
  result = (pistax::PistaDev *)(arg1)->allocate();
  *(pistax::PistaDev **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pistax_PISTAXJNI_PistaDriver_1release(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pistax::PistaDriver *arg1 = (pistax::PistaDriver *) 0 ;
  pistax::PistaDev *arg2 = (pistax::PistaDev *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pistax::PistaDriver **)&jarg1; 
  arg2 = *(pistax::PistaDev **)&jarg2; 
  (arg1)->release(arg2);
}


SWIGEXPORT jint JNICALL Java_org_pistax_PISTAXJNI_PistaDriver_1probe(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  pistax::PistaDriver *arg1 = (pistax::PistaDriver *) 0 ;
  pistax::PistaCommHandler *arg2 = (pistax::PistaCommHandler *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pistax::PistaDriver **)&jarg1; 
  arg2 = *(pistax::PistaCommHandler **)&jarg2; 
  result = (int)(arg1)->probe(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_pistax_PISTAXJNI_PistaDriver_1verify(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2, jint jarg4) {
  jint jresult = 0 ;
  pistax::PistaDriver *arg1 = (pistax::PistaDriver *) 0 ;
  char *arg2 ;
  size_t arg3 ;
  int arg4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pistax::PistaDriver **)&jarg1; 
  {
    if (jarg2) {
      arg2 = (char *) jenv->GetByteArrayElements(jarg2, 0);
      arg3 = (size_t) jenv->GetArrayLength(jarg2);
    } else {
      arg2 = 0;
      arg3 = 0;
    }
  }
  arg4 = (int)jarg4; 
  result = (int)(arg1)->verify((char const (*))arg2,arg3,arg4);
  jresult = (jint)result; 
  {
    if (jarg2) jenv->ReleaseByteArrayElements(jarg2, (jbyte *)arg2, 0);
  }
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pistax_PISTAXJNI_PistaDriver_1c_1inst(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pistax::PistaDriver *arg1 = (pistax::PistaDriver *) 0 ;
  pista_dev_driver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pistax::PistaDriver **)&jarg1; 
  result = (pista_dev_driver *)(arg1)->c_inst();
  *(pista_dev_driver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pistax_PISTAXJNI_delete_1PistaDriver(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pistax::PistaDriver *arg1 = (pistax::PistaDriver *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pistax::PistaDriver **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_pistax_PISTAXJNI_PistaCl_1getInstance(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pistax::PistaCl *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pistax::PistaCl *) &pistax::PistaCl::getInstance();
  *(pistax::PistaCl **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_pistax_PISTAXJNI_PistaCl_1driver_1count(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pistax::PistaCl *arg1 = (pistax::PistaCl *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pistax::PistaCl **)&jarg1; 
  result = (int)(arg1)->driver_count();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pistax_PISTAXJNI_PistaCl_1driver_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  pistax::PistaCl *arg1 = (pistax::PistaCl *) 0 ;
  int arg2 ;
  pistax::PistaDriver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pistax::PistaCl **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (pistax::PistaDriver *)(arg1)->driver(arg2);
  *(pistax::PistaDriver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pistax_PISTAXJNI_PistaCl_1driver_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  pistax::PistaCl *arg1 = (pistax::PistaCl *) 0 ;
  char *arg2 = (char *) 0 ;
  pistax::PistaDriver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pistax::PistaCl **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (pistax::PistaDriver *)(arg1)->driver((char const *)arg2);
  *(pistax::PistaDriver **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_pistax_PISTAXJNI_PistaCl_1service_1count(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pistax::PistaCl *arg1 = (pistax::PistaCl *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pistax::PistaCl **)&jarg1; 
  result = (int)(arg1)->service_count();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pistax_PISTAXJNI_PistaCl_1service_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  pistax::PistaCl *arg1 = (pistax::PistaCl *) 0 ;
  int arg2 ;
  pistax::PistaService *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pistax::PistaCl **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (pistax::PistaService *)(arg1)->service(arg2);
  *(pistax::PistaService **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pistax_PISTAXJNI_PistaCl_1service_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  pistax::PistaCl *arg1 = (pistax::PistaCl *) 0 ;
  char *arg2 = (char *) 0 ;
  pistax::PistaService *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pistax::PistaCl **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (pistax::PistaService *)(arg1)->service((char const *)arg2);
  *(pistax::PistaService **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_pistax_PISTAXJNI_PistaCl_1run(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pistax::PistaCl *arg1 = (pistax::PistaCl *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pistax::PistaCl **)&jarg1; 
  result = (int)(arg1)->run();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_pistax_PISTAXJNI_PistaCl_1tick(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pistax::PistaCl *arg1 = (pistax::PistaCl *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pistax::PistaCl **)&jarg1; 
  result = (int)(arg1)->tick();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_pistax_PISTAXJNI_PistaCl_1stop(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pistax::PistaCl *arg1 = (pistax::PistaCl *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pistax::PistaCl **)&jarg1; 
  result = (int)(arg1)->stop();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pistax_PISTAXJNI_PistaCl_1c_1inst(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pistax::PistaCl *arg1 = (pistax::PistaCl *) 0 ;
  pista_context *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pistax::PistaCl **)&jarg1; 
  result = (pista_context *)(arg1)->c_inst();
  *(pista_context **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pistax_PISTAXJNI_delete_1PistaCl(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pistax::PistaCl *arg1 = (pistax::PistaCl *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pistax::PistaCl **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pistax_PISTAXJNI_swig_1module_1init(JNIEnv *jenv, jclass jcls) {
  int i;
  
  static struct {
    const char *method;
    const char *signature;
  } methods[6] = {
    {
      "SwigDirector_PistaEventHandler_event", "(Lorg/pistax/PistaEventHandler;JJ)I" 
    },
    {
      "SwigDirector_PistaCommHandler_open", "(Lorg/pistax/PistaCommHandler;)I" 
    },
    {
      "SwigDirector_PistaCommHandler_config", "(Lorg/pistax/PistaCommHandler;IIIC)I" 
    },
    {
      "SwigDirector_PistaCommHandler_write", "(Lorg/pistax/PistaCommHandler;[B)I" 
    },
    {
      "SwigDirector_PistaCommHandler_close", "(Lorg/pistax/PistaCommHandler;)I" 
    },
    {
      "SwigDirector_PistaDiscoveryHandler_discovery", "(Lorg/pistax/PistaDiscoveryHandler;JILjava/lang/String;Ljava/lang/String;)V" 
    }
  };
  Swig::jclass_PISTAXJNI = (jclass) jenv->NewGlobalRef(jcls);
  if (!Swig::jclass_PISTAXJNI) return;
  for (i = 0; i < (int) (sizeof(methods)/sizeof(methods[0])); ++i) {
    Swig::director_method_ids[i] = jenv->GetStaticMethodID(jcls, methods[i].method, methods[i].signature);
    if (!Swig::director_method_ids[i]) return;
  }
}


#ifdef __cplusplus
}
#endif

