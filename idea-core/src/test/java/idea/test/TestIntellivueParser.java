package idea.test;

import icuInterface.conf.dev.SocketDeviceConfiguration;
import idea.driver.IntellivueUDPDriver;
import idea.driver.intellivue.IntellivueDriver;

public class TestIntellivueParser {

	/*
	 * Connect message
	 */
	private final static byte[] ci = {
			0x00, 0x00, 0x01, 0x00, 0x00, 0x01, //
			0x01, 0x70, 0x00, 0x00, 0x00, 0x00, 0x01, 0x61, 0x00, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, //
			(byte)0xac, 0x00, 0x0d, 0x17, 0x01, 0x5c, 0x00, 0x0d, 0x01, 0x58, 0x09, 0x20, 0x00, 0x04, 0x00, 0x03, //
			0x00, 0x00, 0x09, (byte)0x86, 0x00, 0x04, 0x00, 0x01, 0x11, 0x4d, 0x09, 0x37, 0x00, 0x08, 0x06, 0x08, //
			0x06, 0x08, 0x00, 0x01, 0x00, 0x0b, (byte) 0xf1, 0x36, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, (byte) 0xf2, 0x7c, //
			0x00, 0x1a, 0x00, 0x01, (byte)0x80, 0x00, 0x00, 0x01, 0x00, 0x12, (byte)0xf1, 0x00, 0x00, 0x0e, 0x00, 0x09, //
			(byte)0xfb, 0x76, (byte)0xe8, 0x0b, (byte)0xc0, (byte)0xa8, 0x01, 0x03, (byte)0xff, (byte)0xff, (byte)0xff, 0x00, (byte)0xf1, 0x35, 0x00, 0x22, //
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
			0x00, 0x00, (byte)0xf1, 0x00, 0x00, 0x0e, 0x00, 0x09, (byte)0xfb, 0x76, (byte)0xe8, 0x0b, 0x0c, (byte)0xa8, 0x01, 0x03, //
			(byte)0xff, (byte)0xff, (byte)0xff, 0x00, (byte)0xf1, 0x01, 0x00, 0x2c, 0x00, 0x05, 0x00, 0x28, 0x00, 0x01, 0x00, 0x03, //
			0x5d, (byte)0xc0, 0x00, 0x00, 0x00, 0x02, 0x00, 0x03, 0x5d, (byte)0xc0, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, //
			0x5e, 0x29, 0x00, 0x00, 0x00, 0x05, 0x01, 0x5e, 0x29, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x01, //
			0x5d, (byte)0xcc, 0x00, 0x00, (byte)0xf3, 0x5e, 0x00, 0x10, (byte)0xfe, (byte)0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
			0x02, 0x09, (byte)0xfb, (byte)0xff, (byte)0xfe, 0x76, (byte)0xe8, 0x0b, 0x09, (byte)0x84, 0x00, 0x0a, 0x00, 0x08, 0x00, 0x09, //
			(byte)0xfb, (byte)0xff, (byte)0xff, 0x76, (byte)0xe8, 0x0b, 0x09, 0x2d, 0x00, 0x68, 0x00, 0x06, 0x00, 0x64, 0x00, 0x01, //
			0x00, 0x08, 0x00, 0x0c, 0x44, 0x45, 0x39, 0x31, 0x33, 0x33, 0x37, 0x37, 0x33, 0x36, 0x00, 0x09, //
			0x00, 0x02, 0x00, 0x08, 0x00, 0x0e, 0x4d, 0x38, 0x31, 0x30, 0x35, 0x41, 0x00, 0x00, 0x00, 0x00, //
			0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x08, 0x00, 0x08, 0x20, 0x41, 0x2e, 0x30, 0x30, 0x2e, //
			0x31, 0x31, 0x00, 0x05, 0x00, 0x78, 0x00, 0x08, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, //
			0x00, 0x02, 0x00, 0x58, 0x00, 0x0e, 0x53, 0x2d, 0x4d, 0x38, 0x31, 0x30, 0x35, 0x2d, 0x31, 0x35, //
			0x30, 0x31, 0x41, 0x20, 0x00, 0x04, 0x00, 0x58, 0x00, 0x08, 0x48, 0x2e, 0x31, 0x35, 0x2e, 0x33, //
			0x36, 0x20, 0x09, 0x28, 0x00, 0x14, 0x00, 0x08, 0x50, 0x68, 0x69, 0x6c, 0x69, 0x70, 0x73, 0x00, //
			0x00, 0x08, 0x4d, 0x38, 0x31, 0x30, 0x35, 0x41, 0x00, 0x00, (byte)0xf1, 0x5a, 0x00, 0x04, 0x00, 0x00, //
			0x00, 0x02
	};

	private final static byte[] TEST_RELEASE_REQUEST = {
		(byte)0xe1, 0x00, 0x00, 0x02, 0x00, 0x01, 0x00, (byte)0xc8, //
		0x09, 0x18, 
			(byte)0xc1, 0x16, 0x61, (byte) 0x80, 0x30, (byte) 0x80, 0x02, 0x01,
			0x01, (byte) 0xa0, (byte) 0x80, 0x62, (byte) 0x80, (byte) 0x80, 0x01, 0x00,
			0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00 };
	
	private final static byte [] TEST_ASSOC_REQUEST = { //
		 // 0x11, 0x01, 0x00, (byte)0xc4, 
		(byte)0xe1, 0x00, 0x00, 0x02, 0x00, 0x01, 0x00, (byte)0xc8, //
		 0x0d, (byte)0x82, 0x00, (byte)0xbf, 0x05, 0x08, 0x13, 0x01, 0x00, 0x16, 0x01, 0x02,
		 (byte)0x80, 0x00, 0x14, 0x02, 0x00, 0x02, 0x7d, (byte)0xe1, (byte)0x82, 0x00, (byte)0x83, 0x31, (byte)0x80, (byte)0xa0, (byte)0x80, (byte)0x80,
		 0x01, 0x01, 0x00, 0x00, (byte)0xa2, (byte)0x80, (byte)0xa0, 0x03, 0x00, 0x00, 0x01, (byte)0xa4, (byte)0x80, 0x30, (byte)0x80, 0x02,
		 0x01, 0x01, 0x06, 0x04, 0x52, 0x01, 0x00, 0x01, 0x30, (byte)0x80, 0x06, 0x02, 0x51, 0x01, 0x00, 0x00,
		 0x00, 0x00, 0x30, (byte)0x80, 0x02, 0x01, 0x02, 0x06, 0x0c, 0x2a, (byte)0x86, 0x48, (byte)0xce, 0x14, 0x02, 0x01,
		 0x00, 0x00, 0x00, 0x01, 0x01, 0x30, (byte)0x80, 0x06, 0x0c, 0x2a, (byte)0x86, 0x48, (byte)0xce, 0x14, 0x02, 0x01,
		 0x00, 0x00, 0x00, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x61, (byte)0x80, 0x30, (byte)0x80, 0x02,
		 0x01, 0x01, (byte)0xa0, (byte)0x80, 0x60, (byte)0x80, (byte)0xa1, (byte)0x80, 0x06, 0x0c, 0x2a, (byte)0x86, 0x48, (byte)0xce, 0x14, 0x02,
		 0x01, 0x00, 0x00, 0x00, 0x03, 0x01, 0x00, 0x00, (byte)0xbe, (byte)0x80, 0x28, (byte)0x80, 0x06, 0x0c, 0x2a, (byte)0x86,
		 0x48, (byte)0xce, 0x14, 0x02, 0x01, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x01, 0x02, (byte)0x81, 0x1a, (byte)0x80,
		 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, (byte)0x80, 0x00, 0x00, 0x00, 0x20,
		 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	  // crc , 0x75, (byte)0x95,
	};
	
	private final static byte[] TEST_ASSOC_RESPONSE = { 0x0e, 0x00, 
			
			0x05, 0x08, 0x13, 0x01, 0x00, 0x16, 0x01, 0x02, (byte) 0x80, 0x00, 0x14, 0x02,
			0x00, 0x02,
			
			(byte) 0xC1, 0x00, 0x31, (byte) 0x80, (byte) 0xA0, (byte) 0x80, (byte) 0x80,
					0x01, 0x01, 0x00, 0x00, (byte) 0xA2, (byte) 0x80, (byte) 0xA0, 0x03, 0x00, 0x00, 0x01, (byte) 0xA4,
					(byte) 0x80, 0x30, (byte) 0x80, 0x02, 0x01, 0x01, 0x06, 0x04, 0x52, 0x01, 0x00, 0x01, 0x30, (byte) 0x80,
					0x06, 0x02, 0x51, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, (byte) 0x80, 0x02, 0x01, 0x02, 0x06, 0x0C, 0x2A,
					(byte) 0x86, 0x48, (byte) 0xCE, 0x14, 0x02, 0x01, 0x00, 0x00, 0x00, 0x01, 0x01, 0x30, (byte) 0x80, 0x06,
					0x0C, 0x2A, (byte) 0x86, 0x48, (byte) 0xCE, 0x14, 0x02, 0x01, 0x00, 0x00, 0x00, 0x02, 0x01, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00, 0x61, (byte) 0x80, 0x30, (byte) 0x80, 0x02, 0x01, 0x01, (byte) 0xA0, (byte) 0x80,
					0x60, (byte) 0x80, (byte) 0xA1, (byte) 0x80, 0x06, 0x0C, 0x2A, (byte) 0x86, 0x48, (byte) 0xCE, 0x14, 0x02,
					0x01, 0x00, 0x00, 0x00, 0x03, 0x01, 0x00, 0x00, (byte) 0xBE, (byte) 0x80, 0x28, (byte) 0x80, 0x06, 0x0C,
					0x2A, (byte) 0x86, 0x48, (byte) 0xCE, 0x14, 0x02, 0x01, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x01, 0x02,
					(byte) 0x81,

			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00 };
	
	

	/**
	 * @param args
	 */
	public static void main(String[] args) {

		int len = 256;
		int physio_id = 317;
		
		int key = (len << 16 ) + physio_id;
		System.out.println("key=" + Integer.toHexString(key));

		SocketDeviceConfiguration conf = IntellivueUDPDriver.createConfigInstance();
		conf.setHost("192.168.1.123");

		IntellivueDriver d = new IntellivueUDPDriver(null);

//		d.parsePacket(ci, 0, ci.length);
//		d.parsePacket( TEST_RELEASE_REQUEST, 0, TEST_RELEASE_REQUEST.length );
//		TEST_ASSOC_RESPONSE[17] = (byte)(TEST_ASSOC_RESPONSE.length - 18);
//		System.out.flush();
//		System.err.flush();
//		System.out.println( "assoc request");
//		d.parsePacket( TEST_ASSOC_REQUEST, 0, TEST_ASSOC_REQUEST.length );
//		System.out.flush();
//		System.err.flush();
//		System.out.println( "assoc response");
//		d.parsePacket( TEST_ASSOC_RESPONSE, 0, TEST_ASSOC_RESPONSE.length );
	}

}
